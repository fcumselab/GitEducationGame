歡迎來到
'創建第一個本地儲存庫' 關卡！

首先，讓我們快速回顧上一關卡中學到的知識

在上一關中，我們提到了
備份檔案這種方式可能會引發的問題

這些問題不僅影響開發專案時的效率
還給專案管理帶來了困難

接著，我們介紹了版本控制和 Git
以及它們的特點和優點

由此可知，
在專案管理中使用版本控制能夠帶來很大的幫助

因此，在本次關卡中
我們要開始學習如何使用 Git 

首先，讓我們先來模擬本次的背景故事

在準備好了模擬背景後
讓我們試著執行 Git 中的功能

首先，如果要在電腦中輸入 Git 指令
需要開啟 '命令行' (Command Line) 視窗

'命令行' 是一個提供使用者輸入指令的地方
它可以執行電腦上許多不同的功能
同時 Git 指令也可以在這里運行

我們現在解鎖了 '命令行' 視窗
請您先開啟視窗吧

很好！
您成功開啟了 '命令行' 視窗

接下來，讓我們了解一下視窗中的功能
之後需要的話，可以參考遊戲手冊

首先是 '指令記錄' 區域
它記錄著您之前輸入的指令

視窗右上角的按鈕可以清除指令記錄
方便您在需要時進行清理

接下來是 '指令細節' 區域
指令執行後的結果會顯示在這裡

此外，將滑鼠移到 '指令記錄' 中的指令上
您也可以看到執行後的訊息

然後，下方的是 '輸入指令' 區域
這是 '命令行' 最重要的部分
您可以在這裡輸入和執行指令

第一行顯示的是當前資料夾位置
就和 '檔案管理' 視窗一樣
命令行也有它們現在所在的位置

為了方便您學習 Git 指令
您只需要在 '檔案管理' 視窗中移動路徑
'命令行' 視窗也會同步移動

最後一欄是輸入指令的區域

在介紹完 '命令行' 視窗的功能後
讓我們立即嘗試輸入指令吧

請注意
'輸入指令時需要保持大小寫一致'
Git 才能識別指令

現在，請點擊輸入欄
輸入 '<color=#CF001C>git --version</color>' 或 '<color=#CF001C>git -v</color>'
然後按下鍵盤上的 Enter 鍵
或輸入欄旁的箭頭來執行您的第一個指令吧

非常好！
您成功地運行了第一個 Git 指令

透過 'git --version' 或 'git -v'
能夠查看電腦上正在使用的 Git 版本

同時，這個指令也能確認
您的電腦是否已成功安裝了 Git

如果電腦尚未安裝 Git
需要前往 Git 的官方網站進行下載

在執行這個簡單易懂的 Git 指令
相信您有信心去挑戰下一個指令了

接下來，讓我們執行下一個指令
這個指令是創建 Git 管理系統的第一步

這個指令的名稱是 '<color=#CF001C>git init</color>'
'init' 是 'initialize'（初始化）的縮寫

也就是說：
通過執行 'git init'
能夠在電腦上創建一個全新的 Git 管理系統

然而，在創建管理系統之前
要先移動到需要管理的專案路徑

如果在錯誤的位置創建管理系統
可能會追蹤到與專案無關的檔案

根據故事情節
請您先移動到需要進行管理的路徑

好的，您已經成功地移動到了專案位置

現在，我們可以繼續進行下一個步驟
創建您的第一個 Git 管理系統

在開始之前
讓我再向您介紹幾個在 '命令行' 視窗中非常實用的功能
這些小技巧能夠幫助您更有效地操作指令

首先，請注意在輸入欄旁的放大鏡圖標
您可以通過鍵盤上的 Tab 鍵或者點擊圖標
來使用搜尋功能

這對於在還沒有記住 Git 指令
或著是需要快速完成指令時特別有用

另外，在點擊輸入欄後
使用鍵盤上的方向鍵 '上' 和 '下'
來快速填入以前執行過的指令

接下來，請您在專案位置上執行 '<color=#CF001C>git init</color>'
來創建您的第一個 Git 管理系統

做得好！
當您執行了 'git init' 指令之後
專案位置上多了一個新資料夾

執行該指令後
Git 會在指定位置上創建一個名為 '.git' 的資料夾

這個資料夾在電腦系統中是 '隱藏' 的
這意味著您不需要直接去修改它的內容
令來與它進行互動

相反，您將使用各種 Git 指
'.git' 是整個 Git 系統的核心
它包含了與專案相關的重要信息
例如提交的版本內容、作者、時間等

如果沒有 '.git' 資料夾
大部分的 Git 指令是無法正常運作的

現在，讓我來簡單介紹一下組成 Git 的三個區域： 

首先是 '工作目錄' (Working Directory)
這個區域實際上就是您選擇的專案位置

'工作目錄' 中的所有檔案都會被 Git 追蹤
也就是 '開發中的專案' 這個資料夾

接著是 '暫存區域' (Staging Area)
這個區域在 '工作目錄' 和 '.git' 資料夾之間
擔任了橋樑的角色

您可以把檔案修改內容
從 '工作目錄' 推送到 '暫存區域'

然後將確認好的檔案移動到 '儲存庫' 形成一個記錄

最後是 '儲存庫' (Repository)
在本地電腦創建的管理系統
稱為 '本地儲存庫' (Local Repository)

而實際上，'儲存庫' 指的就是 '.git' 資料夾

在接下來的關卡中
我們將更詳細地介紹
'暫存區域' 和 '本地儲存庫' 這兩個區域
並使用 Git 指令來操作它們

經過本次的操作，
您成功地達成了模擬場景的目標

通過新解鎖的 '命令行' 視窗
執行 'git -v' 和 'git init' 指令
來創建新的 Git 管理系統

我們也了解 '.git' 資料夾的作用和裡面的結構

在下一關卡
我們將進一步瞭解 '暫存區域' 的內容
並通過指令來操作它

最後，恭喜您順利完成本次教學關卡
做得好！