歡迎來到
'創建您的第一個 Git 專案版本' 關卡！

在這個關卡中
您將學習如何創建您的第一個 Git 專案版本

首先，讓我們快速回顧上一關卡中學到的知識和指令

在上一個關卡中，我們進一步瞭解了 '暫存區域' 的結構
並學習 'git add' 和 'git reset' 的進階用法

在指令前方加入 '資料夾名稱' 或 '.' 符號
來更有效地將檔案移入或移出 '暫存區域'

在回顧完上一個關卡的內容後
讓我們開始本次的教學

接下來，讓我們先來模擬本次的遊戲背景

在創建好關卡場景後
請您先開啟 '檔案管理' 視窗
我們來確認電腦中的檔案

好的，在開啟 '檔案管理' 視窗後
電腦中的檔案與第 1 關卡中的背景相似

這次也需要準備課程期中報告
但是，本次要使用 Git 系統來管理它

在創建 Git 管理系統後
''儲存庫' 的內容在初始狀態下是沒有記錄的

因此，在通常情況下
我們創建的第一個版本都是將
需要管理的檔案新增至 '儲存庫' 中

接下來，為了讓期中報告能夠通過 Git 進行管理
請您先將檔案加入 '暫存區域' 吧

當檔案加入至 '已追蹤' 後
就可以準備將其推送到 '儲存庫' 中了

非常好！
您已成功將簡報推送到 '暫存區域' 中

在確定好要提交的內容後
接下來，我們來執行一個新的指令
讓 '暫存區域' 的內容移動到 '儲存庫'
這些內容將保存為第一個報告版本

這個指令是 '<color=#CF001C>git commit -m</color>'
讓我們來了解這個指令的結構

'git commit' 指令
會將 '暫存區域' 的內容保存為一個新的版本
並將其記錄到 '儲存庫' 中

而 '-m'（Message 訊息）表示我們可以
在指令的前方加入提交訊息 

在提交新版本之前
我們必須為本次的修改內容填入一個提交訊息

在填寫提交訊息時，也需要注意填入的內容

<color=#CF001C>清晰、簡潔、有意義</color>的提交訊息
能讓人更好地理解檔案變更的內容和目的

在本遊戲執行 'git commit -m' 指令時
系統會要求您從選項中選擇最適合的訊息

如果要在遊戲中使用這個指令
請按照以下步驟來操作：

第 1 步：
在輸入欄中輸入 '<color=#CF001C>git commit -m</color>'

第 2 步：
在指令前方加入一個空格
變成 '<color=#CF001C>git commit -m </color>'

第 3 步：
由於 Git 指令是按照空格區分不同的部分
所以在填寫提交訊息時
需要通過 <color=#CF001C>"</color> 符號將訊息括起來
變成：「<color=#CF001C>git commit -m ""</color>」

第 4 步：
在本遊戲中，您不需要手動輸入提交訊息
完成上一步後，按下 Tab 鍵或搜尋功能按鈕
來開啟提交訊息選項
從中<color=#CF001C>選擇一個最合適的提交訊息</color>

第 5 步：
選擇完後，輸入欄中的內容應該是：
<color=#CF001C>git commit -m "選擇的提交訊息"</color>

請您按照以上步驟
創建您的第一個專案版本吧

非常好！
您已成功創建簡報的第一個版本
''命令行' 返回了成功訊息

不過，在提交成功後
請您先確認 '暫存區域' 的狀態
以確保指令是否成功執行

好的，在開啟 '暫存區域' 視窗後
您會注意到 '期中報告.ppt' 檔案
並未出現在 '未追蹤' 和 '已追蹤' 區域中

這表示您已成功創建 '期中報告.ppt' 的第一個版本

當 Git 系統比較 
''工作目錄' 與 '第一個提交版本' 的檔案差異時
並未發現報告內容有改變

因此 '暫存區域' 目前不包含任何被追蹤的檔案

接下來，我們將學習如何確認版本的提交狀況

在 '儲存庫' 中
有一個專門儲存 '提交記錄' 的區域
我們可以通過指令來查看區域中的內容

通過 '<color=#CF001C>git log</color>' 指令
將顯示 '儲存庫' 中的所有版本記錄
輸出結果會顯示在 '命令行' 視窗中

不過，就和 'git status' 一樣
本遊戲將 'git log' 指令的輸出結果
獨立成一個視窗 —— '提交記錄' 視窗

關於 'git log' 指令的介紹
您可以查看遊戲手冊來獲得更多資訊

接下來，請您通過 '<color=#CF001C>git log</color>' 指令
開啟 '提交記錄' 視窗吧

很好！
您通過 'git log' 指令成功開啟 '提交記錄' 視窗

接下來，讓我們來查看 '提交記錄' 裡的內容

首先，您會注意到視窗中有一個圓形圖示
它代表著我們從 '暫存區域' 中創建的第一個版本

在 Git 系統裡，
這些版本稱為 '提交' (Commit)

您可以點擊 '提交' 圓形圖示
來查看 '提交' 的詳細內容

在彈出的彈窗中
顯示著提交的日期、作者、以及剛才填入的訊息
這些資訊有助於您理解這個 '提交' 做的變更

接著，在分支欄位中
您會看到 'HEAD -> master'
這行顯示 '提交' 屬於哪個分支

'master' 是 Git 系統中的默認分支
在通常情況下，我們會在 'master' 分支上進行提交

在 'Git 的基礎' 主題關卡中
我們只會使用 'master' 分支

關於其他分支知識
將在下一個主題關卡 —— '分支管理' 中進一步介紹

接下來，讓我們來了解什麼是 'HEAD'

請使用滑鼠左鍵
點擊 '提交記錄' 視窗的任意區域以關閉彈窗

在 '提交記錄' 視窗的左側列表中
能夠看到當前 '儲存庫' 所有分支名稱和對應的圖標

分支會以不同的顏色表示
例如：屬於 'master' 分支的 '提交'
將以藍色 M 字母圖示顯示

旗子圖示的 HEAD 
表示現在的 '提交' 版本

當專案有多個版本時
就可以使用指令來切換不同的版本

接下來，請您再次使用 'git commit -m' 指令
創建簡報的第二個版本吧

不過，想要成功創建 '提交'
檔案需要被修改，加入至 '暫存區域' 後
才能夠再次新增第二個提交

請您開啟 '期中報告.ppt'
並修正檔案中錯誤的內容吧

很好！
您已成功修正 '期中報告.ppt' 中的錯誤內容 

由於我們變更了檔案內容，'暫存區域' 的狀態更新了
請您確認 '暫存區域' 的最新狀態

好的，更新 '暫存區域' 的狀態後
'期中報告.ppt' 檔案再次出現在 '未追蹤' 區域中

Git 系統比較了
'工作目錄' 與 '第一個提交版本' 的檔案差異
並發現 '期中報告.ppt' 內容的不同

此外，列表中的第一行顯示的是鉛筆圖示
表示該檔案內容已被變動

接下來，請再次將簡報加入 '暫存區域' 中吧
完成後，請再次更新 '暫存區域' 的狀態

好的，您已經將檔案加入至 '已追蹤'

在確定好要推送到 '儲存庫' 的檔案後
請您再次使用 'git commit -m' 指令
來創建簡報的第二個版本

如果您忘記了指令的用法
請查看遊戲手冊

很好！
您成功創建了簡報的第二個版本

現在，為了確保我們的操作是正確無誤的
請您再次確認 '暫存區域' 的狀態

在實際工作中
確認 '暫存區域' 和 '提交記錄' 不一定是必要的步驟
但是確認指令執行後的狀態是一個好的習慣

接下來，請您再次確認 '期中簡報.ppt'
是否已成功從 '暫存區域' 移動到 '儲存庫' 中

好的，在確認更新後的 '暫存區域' 後
''期中報告' 的追蹤狀態已經消失
表示檔案已被推入 '儲存庫' 中

接下來，請您使用 'git log' 指令
來觀看新增第二個 '提交' 後
''提交記錄' 視窗有了什麼樣的變化吧

非常好！
執行指令後，'提交記錄' 視窗的內容更新了

在區域中又新增了一個 '提交'
它與第一個 '提交' 連接在一起

在 Git 系統中，
'提交記錄' 就像一個時間軸
每個提交是在時間軸上留下的一個記錄

最新的 '提交' 位於時間軸的頂部
而最早的 '提交' 位於底部

''提交' 之間的連線
顯示了 '提交' 間的關係

查看 '提交記錄'，
您可以更好地理解 Git 系統
是如何記錄版本間的不同

接下來，請您自行創建第三個 '提交' 吧！
藉此來練習 '新增提交' 的流程
請加油！