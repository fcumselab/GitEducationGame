歡迎來到
'快進合併分支' 關卡！

在本次關卡中
我們將學習如何將分支中的修改內容
合併到另一個分支中

首先，讓我們快速回顧上一關卡中學到的知識和指令

在上一關卡中
我們介紹了分支系統所帶來的優點

並學習基本的分支管理指令
去創建、查看和刪除分支

在完成目標的過程中
了解分支系統可以提升專案的穩定性
避免開發中的分支影響到主分支

在回顧完上一個關卡的內容後
讓我們先來模擬本次的遊戲背景

在創建好關卡場景後
請您查看 '提交記錄' 的狀態

好的，在開啟 '提交記錄' 視窗後
讓我們來查看每個提交的狀態

這個專案有兩個分支
'master' 和 'new-feature'

'master' 分支有 3 個提交
這些提交完成俄羅斯方塊遊戲基本功能

隨後，作者新建 'new-feature' 分支
來開發遊戲的新玩法

分支裡創建了一個提交
對開發到一半的內容做保存

從 '提交記錄' 內容裡，
作者很好地運用分支系統來開發專案

接下來，根據背景故事
請您在 'new-feature' 分支上
繼續開發新功能吧

很好！
新的遊戲功能開發完成了

經過測試後，
遊戲運行地很穩定
新功能也讓遊戲變得有趣

在確認功能完善後
現在可以將它合併回主分支中

本次要學習的 Git 指令是
'<color=#CF001C>git merge 分支名稱</color>'
這個指令能夠合併不同分支的工作內容

您可以理解成：
「<color=#CF001C>將輸入分支的提交記錄合併到目前的分支</color>」

然而，請注意：
如果想要將 'new-feature' 分支合併到 'master' 分支的話

需要先移動到 'master' 分支
才能執行合併指令

接下來，請您先移動到 'master' 分支上
並更新 '提交記錄' 內容

好的，目前已位於 'master' 分支

您可以用滑鼠點擊指定的分支列
來查看提交屬於哪一個分支上

接下來，讓您執行合併分支的指令 
'<color=#CF001C>git merge 分支名稱</color>' 吧

通過 '<color=#CF001C>git merge new-feature</color>' 指令
來將 'new-feature' 分支合併到 'master' 分支中

執行後，請更新 '提交記錄'
來確認合併後的內容發生了什麼變化

非常好！
您使用了合併分支指令
命令行回傳了成功訊息

查看更新後的 '提交記錄'
會發現兩個分支的記錄是相同的

您可以點擊提交來查看它們屬於什麼分支
或者點擊左側的分支列來觀察

現在，兩個分支都擁有了 5 個提交
也表示 'new-feature' 分支已經完成目標

在通常情況下，合併完成的分支就可以刪除
請您刪除指定分支，並更新提交記錄

很好！
目前 Git 系統裡就只剩下 'master' 分支
但是新功能已經包含在此分支上

您完成了 '合併分支' 流程
表示您學會如何使用分支來開發專案了

最後，讓我們來了解什麼是 Git 的合併模式

在嘗試執行合併分支指令時
Git 會根據兩個分支間的複雜度
<color=#CF001C>自動選擇</color>不同的合併模式

Git 會選擇下方一種合併模式：
1. 快進合併（Fast-Forward Merge）
2. 自動合併（Auto Merge）
3. 合併衝突（Merge Conflict）

本次的合併模式為快進合併，也是最為簡單的一種

當<color=#CF001C>兩個分支的 '提交記錄' 呈現一條直線，沒有分叉</color>時
Git 會使用這種模式合併分支

觀察 '提交記錄' 視窗
會發現 'new-feature' 與 'master' 分支
提交在同一條直線上

這種情況下
舊的分支（master）會 '<color=#CF001C>更新提交記錄</color>'
將 'new-feature' 分支合併到 'master' 分支中

在後面的關卡裡
會遇到提交出現分叉的狀況

我們將進一步討論 '自動合併' 和 '合併衝突' 
這兩種合併模式

最後，恭喜您完成本次的關卡
您做得很好！