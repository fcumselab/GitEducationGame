做得好！當您執行了 <color=red>"git init"</color> 指令之後
您是否注意到在專案位置多了一個新的資料夾？

當您運行 "git init" 指令時
Git 會在您指定的位置建立一個名為 ".git" 的資料夾

這個資料夾在電腦系統中是隱藏的
這意味著您不需要直接去修改它的內容

相反，您將使用各種 Git 指令
來與這個 ".git" 資料夾進行互動


".git" 資料夾是整個 Git 系統的核心
它包含了與專案相關的重要資訊
像是提交的版本內容、作者、時間等

另外，上一關中提到的分支管理也存放在其中

如果沒有 ".git" 資料夾
大部分的 Git 指令是無法正常運作的



現在，讓我來簡單介紹一下組成 Git 的三個區域： 

首先是 "工作目錄" (working directory)
這個區域實際上就是您選擇的專案位置

也就是說：
"開發中的專案" 這個資料夾中的所有檔案
都會被 Git 追蹤



接著是 "暫存區域" (staging area)
這個區域在 "工作目錄" 和 ".git" 資料夾之間
擔任了橋樑的角色

您可以將提交的修改內容
從 "工作目錄" 推送到 "暫存區域"

然後，再將確認的更改提交到到 ".git" 資料夾中
形成一個記錄



最後，我們有 "存儲庫" (Repository)
由於我們在自己的電腦上建立了 Git 管理系統
所以我們稱它為 "本地存儲庫" (Local Repository)

實際上，"存儲庫" 指的就是 ".git" 資料夾

在接下來的關卡中
我們將更詳細地介紹
 "暫存區域" 和 "本地存儲庫" 這兩個區域

並且使用新的 Git 指令來操作它們

此外，當您完成了所有 Git 基礎教學關卡後
我們將會更進一步的學習 "遠端存儲庫" 的概念

那時，您將能夠把
 "本地存儲庫" 中的記錄上傳到網絡上！
這會是學習 Git 的一個重要階段！

好了，在本關卡的最後
讓我們再多加練習建立本地存儲庫吧！

這次，系統將會從模擬背景資料庫中
隨機選擇場景並生成！

透過關卡後半段的練習
希望您可以更加熟悉指令的用途
並學習如何解決問題！

當您遇到困難時
可以詢問我或者查閱遊戲手冊！

那麼，請加油吧！

















很好！在執行了<color=red> git init </color>指令後
是否有發現在檔案管理視窗中增加了一個新的資料夾？

這個指令告訴 Git
在指定的位置中建立<color=red> .git </color>的資料夾


接下來，我們要來了解關於<color=red> .git </color>資料夾的作用
以及組成 Git 的四個重要區域

首先，這個 Git 的系統分成了四個區域
工作區（Working Tree）、暫存區（Staging Area）、本地倉庫（Local Repository）
還有遠端倉庫（Remote Repository）

在前半段的關卡裡會先跳過遠端倉庫的部分
讓我們先來了解其他三個區塊的功能吧

首先是工作區（Working Tree）
它所代表的就是現在我們處理檔案的這個資料夾目錄

例如現在在檔案管理視窗中的報告講稿就是工作區裡面的文件
圖片資料夾裡的所有檔案也屬於工作區

但是要注意的是工作區的範圍只有在輸入指定的這個位置內
所以在執行<color=red> git init </color>指令前要先確定
哪一個位置才是我們想要建立的工作區

再來要介紹的是暫存區（Staging Area）
他的用途是將已經修改好的檔案放入到本地倉庫（Local Repository）裡

例如我們已經修改了報告草稿的內容
這時就可以利用指令將這些文件上傳到暫存區

最後是本地倉庫（Local Repository）
它可以記錄每個檔案修改的內容
也是管理檔案不同版本的重要區塊

本地倉庫的意思是
這個倉庫是建立在當前的電腦的
所以不需要連到網路上也可以進行專案管理

暫存區（Staging Area）和本地倉庫（Local Repository）這兩個區塊
都存儲在這個 .git 的隱藏資料夾中
我們會藉著 Git 指令來操作這兩個區塊

有了這三個區塊
就可以管理檔案之間版本上的不同了

在下一關卡中會介紹這三個區塊管理版本的流程
並且嘗試透過 Git 來實現上一關卡的情景

接下來，我們再來練習使用<color=red> git init </color>指令來創建新的倉庫
這次請注意在當前目標指定的位置建立倉庫

（已更新檔案管理內容）