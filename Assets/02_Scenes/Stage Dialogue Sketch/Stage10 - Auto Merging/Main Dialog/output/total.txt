歡迎來到
'自動合併分支' 關卡！

在這個關卡中
將遇到 '提交記錄' 出現多條路徑的專案
並學習第二種合併模式 —— 自動合併（Auto Merge）

首先，讓我們快速回顧上一關卡中學到的知識和指令

在上一關卡中
學習了 'git merge 分支名稱' 指令
這個指令用於合併不同分支的工作內容

在關卡的模擬環境中
Git 採用了快進合併（Fast-Forward Merge）
它是合併模式中最簡單的一種

當兩個分支的 '提交記錄' 呈現一條線，沒有分叉時
Git 會自動使用快進合併

在回顧完上一個關卡的內容後
讓我們先來模擬本次的遊戲背景

在創建好關卡場景後
請您查看 '提交記錄' 的狀態

好的，在開啟 '提交記錄' 視窗後
讓我們來查看每個提交的狀態

這次的專案包含了兩個分支
'master' 和 'new-design'

在 'master' 分支中，作者創建了 1 個 '提交'
將網頁所需的檔案加入到 Git 管理系統中
不過這些檔案內容是空的

接著，在 'new-design' 分支中
作者新增了一個 '提交'
將網頁的文字字型和顏色做了調整

根據背景故事，為了更有系統地開發這個專案
我們需要在 'master' 分支上創建新一個分支
它用於新增網頁文章

很好！
您已成功創建 'new-article' 分支
分支用於編寫網站中的文章

接下來，請您在 '我的網頁.html' 上添加内容吧
完成後，請創建一個新的提交
並更新 '提交記錄' 的狀態

很好！
您完成了文章的編寫

查看更新的 '提交記錄'
會發現 'new-design' 分支與 'new-article' 分支
它們的 '提交記錄' 分叉成了兩條不同的路徑

接下來，讓我們來了解為什麼會發生這種情況：

這兩個分支都是創建於 'master' 分支上
在同一個提交上被創建

接著，作者在 'new-design' 分支上新增提交
這時，整體的 '提交記錄' 仍然保持一條直線

然而，當您在 'new-article' 分支上新增提交時
這將導致兩個開發分支分叉
因為它們的 '提交記錄' 不再相同

這兩個分支將獨立發展，它們都有自己的提交

當繼續在 'new-article' 分支上開發時
新的提交會繼續向上移動
但不會影響到 'new-image' 分支

接下來，讓我們將這兩個分支合併回 'master' 分支吧
請您先切換到 'master' 分支，
為合併分支做好準備

好的，在切換到 'master' 分支後
先來合併 'new-design' 分支

首先，我們來判斷
合併 'master' 和 'new-design' 分支時
屬於哪一種合併模式

'new-design' 基於 'master' 分支
創建了兩個新的提交

而 'master' 分支沒有新的提交
兩個分支為一條直線

由此可以判斷這是 '快進合併'
這種模式將更新 'master' 分支內容
變得和 'new-design' 分支相同

接下來，請您使用合併分支指令吧

合併後，請更新 '提交記錄'
來觀察 '快進合併' 造成的影響

非常好！
'new-design' 分支的內容已經合併到 'master' 分支

查看更新後的 '提交記錄'
正如我們預測的那樣
兩個分支的 '提交記錄' 現在是相同的

接下來，來合併 'new-article' 分支的內容
合併前，同樣來分析它屬於何種合併模式

觀察 'master' 和 'new-article' 分支的 '提交記錄'
會發現它們分叉成不同的路徑

在這種情況下
Git 將使用 '自動合併'（Auto Merge）
這種方式會判斷兩個分支的修改內容是否存在衝突

例如，如果團隊成員在不同的分支上
修改了同一個文件

合併過程中
Git 將提醒團隊成員這個文件發生衝突

這時，您需要決定
<color=#CF001C>哪些修改需要保留，哪些需要丟棄</color>

這個過程是 '合併衝突'（Merge Conflict）
也是最複雜的合併模式

但是，請不要擔心！
'解決合併衝突' 實際上是一個簡單的步驟
我們在下一關中會處理這種情況

本次的模擬背景中
'new-design' 與 'new-article' 分支不會造成文件衝突

Git 會直接合併兩個分支的內容
並在合併後的分支上創建一個新的提交

接下來，請您合併 'new-article' 分支
並更新 '提交記錄' 來觀察 '自動合併' 帶來的影響

很好！
'new-article' 分支的內容已經合併到 'master' 分支

查看更新後的 '提交記錄'
會發現 'new-article'、'master' 分支的
'提交記錄' 已經連接在一起

'master' 分支上還新增了一個提交
請點擊它來查看詳細訊息

這個提交將用於保存解決衝突後的檔案內容
並告訴開發者，合併的兩個分支名稱

接下來，當這些分支已經完成開發目標後
請您刪除掉這些分支吧
並確認 '提交記錄' 的狀態

好的，您已經成功移除兩個分支
現在 '提交記錄' 視窗中
只剩下 'master' 分支

在最新的提交中
已經包含了新增的文章和圖片
表示本次的關卡目標已經完成

從本次關卡的兩次的合併中
我們可以總結 '快進合併' 和 '自動合併' 的區別

快進合併是當兩個分支的 '提交記錄'
<color=#CF001C>呈現為線性、沒有分叉時</color>
Git 自動採用的合併模式

合併後的分支<color=#CF001C>不會新增提交</color>
只更新 '提交記錄'

自動合併是當兩個分支的 '提交記錄' 
<color=#CF001C>出現分叉，出現多個路徑時</color>
Git 自動採用的合併模式

Git 在合併時會判斷分支是否有修改衝突
如果有衝突，開發者需要手動解決衝突

合併後<color=#CF001C>會新增一個提交</color>
它將包含解決衝突後的檔案内容
提交訊息將提示合併的兩個分支名稱

在下一關卡裡
我們將學習如何解決合併衝突

最後，恭喜您完成本次的關卡
您做得很好！