歡迎來到
'切換專案版本' 關卡！

在這個關卡中
我們將學習如何切換您的專案版本
以便您可以在新舊版本之間切換

首先，讓我們快速回顧一下上一關中學到的知識和指令

在上一關卡中
我們了解了 '儲存庫' 中的 '提交記錄' 區域
它用來儲存我們創建的多個專案版本

執行 'git commit -m' 指令
將 '暫存區域' 中已經確定的修改內容移動到 '儲存庫' 

它們將形成一個 '提交' 並存放在 '提交記錄' 中

執行 'git log' 指令
來檢視 '提交記錄' 區域的內容

在回顧完上一個關卡的內容後
讓我們開始本次的教學

接下來，讓我們先來模擬本次的遊戲背景

在創建好關卡場景後
請您先開啟 '提交記錄' 視窗吧
我們要先確認目前所有 '提交' 的狀況

好的，在開啟 '提交記錄' 視窗後
讓我們來查看每個提交的狀態

這個專案已經有了 3 個提交
您可以點擊它們來查看詳細訊息

第 1 個提交：
作者將需要管理的文件 '我的網頁.html'
加入到 '儲存庫' 中

第 2 個提交：
作者新增 '網頁樣式.css' 文件
並將網頁中的文字設置為 '橙色'

第 3 個提交：
作者把文字顏色改成 '藍色'
希望這個顏色更加合適

從提交的訊息可以清楚得知
它們分別做了哪些改動

而目前 HEAD 正位於最新的提交上

接下來，請您開啟 '檔案管理' 視窗
來確認 '工作目錄' 的內容

好的，在開啟 '檔案管理' 視窗後
我們看到了兩個檔案

根據 '提交記錄' 區域中最新的 '提交'
'工作路徑' 確實有兩個檔案：
'我的網頁.html' 和 '網頁樣式.css'

接下來，請確認 '網頁樣式.css' 文件中的內容

好的，在開啟 '網頁樣式.css' 文件後

從檔案內容中可以發現
網頁中的文字設置為 '藍色'
這與最新的提交訊息是一致的

不過，如果我們要將網頁再次改變成 '橙色'
但是又不希望手動更改文件內容時
應該怎麼做呢？

在本次關卡中，
我們要使用指令 '<color=#CF001C>git checkout</color>'
將 HEAD 移動到其他提交上

就和 'git add' 與 'git reset' 一樣
需要在 'git checkout' 指令前方加上參數

通過在指令前方加入指定的 '提交ID'
變成：'<color=#CF001C>git checkout 提交ID</color>'
讓 HEAD 移動到指定的提交上

在 Git 系統中
每一個提交在創建時都會被賦予一個獨立的 ID

如果需要得知它們的 ID
可以通過 'git log' 指令來查看

接下來，請您跟著以下步驟
來學習如何查看提交的 ID 吧

一開始，您需要先通過指令來開啟 '提交記錄' 視窗

接著，點擊您想要移動的提交
本次想要查看 '橙色' 的文字是否合適
所以請您點擊第 2 個提交

在彈窗中，
您可以看見詳細訊息裡出現了提交 ID 
(例如：abc123)

那麼，我們就可以在 '命令行' 視窗裡
輸入 '<color=#CF001C>git checkout abc123</color>' 指令
來移動 HEAD 到指定提交了

現在，請您根據以上教學執行這個新的指令吧

非常好！
您成功使用 'git checkout 提交ID' 指令
命令行返回了成功提示

在命令行的當前路徑中
您可以將滑鼠移動到右方的分支圖示
它能夠幫助您確認目前所在的 '提交' 或 '分支' 在哪裡

目前顯示的是第 2 個提交的 ID
也就是我們剛才移動到的位置

而在默認情況下
這裡顯示的文字會是 'master'
表示您現在位於 'master' 分支中

現在，既然移動到對應的提交中
請您查看 '提交記錄' 中的狀態吧

好的！
更新了 '提交記錄' 視窗的內容後
您可以看到 HEAD 移動到了第 2 個提交中

HEAD 移動後，
'工作目錄' 中的檔案也會恢復成這個提交的內容

現在，請您確認 '網頁樣式.css' 文件
來看看內容是否回到先前的版本了

好的，在開啟 '網頁樣式.css' 檔案後
文字顏色已經恢復成了 '橙色' 
這是第 2 個提交修改內容

接下來，讓我們再來練習一次 
通過 'git checkout 提交ID' 指令來切換版本

這次請將 HEAD 移動到第 3 個提交
再次比較 '藍色' 文字和 '橙色' 文字哪個合適

非常好！
HEAD 已經移動到第 3 個提交中

在比對了兩個顏色文字哪個合適後
最後我們決定使用 '橙色'
也就是第 2 個提交

於是，我們決定移動到第 2 個提交上
然後繼續開發專案

然而，在這種情況下
這樣是無法繼續開發專案的

接下來，讓我們來了解當前遇到的問題

首先，在 '提交記錄' 區域中
您會發現 HEAD 看起來變透明了

在 Git 系統中
這種情況稱為<color=#CF001C>分離 HEAD</color> (Detached HEAD)
表示當前 HEAD 並沒有指到任何的分支

在執行 'git checkout 提交ID' 時
HEAD 會指向您指定的提交
導致<color=#CF001C>分離 HEAD</color>的發生

雖然 HEAD 指向了第 3 個提交
它也是 'master' 分支裡最新的提交
然而實際上，HEAD 並沒有指向 'master' 分支

點擊這個提交後
會發現在分支欄位已不再是 'HEAD -> master'

在這種情況下
就算我們新建一個提交 
也不會在 'master' 分支上創建第 4 個提交

同時，您在分離 HEAD 情況下創建的提交
甚至會有遺失的風險

所以請注意，當我們查看完其他提交的內容後
<color=#CF001C>請記得切換回您想要繼續開發的分支！</color>

本關卡要學習的最後一個指令是
'<color=#CF001C>git checkout 分支名稱</color>'
通過這個指令，您就可以將 HEAD 移動回分支上了

試試看在命令行中輸入：'<color=#CF001C>git checkout master</color>'
讓 HEAD 移動回 'master' 分支吧
請加油！

非常好！
執行 'git checkout master' 指令後
'命令行' 回傳了 '移動分支成功' 的訊息

查看 '提交記錄' 視窗，
發現 HEAD 不再透明，並位於第 3 個提交上

點擊這個提交後
發現在分支欄位中的文字變回了 'HEAD -> master'
表示 HEAD 正指向 'master' 分支

在我們決定好文字顏色為 '橙色' 後
我們立即修改了 '網頁樣式.css' 的內容
並創建了第 4 個提交

根據本次的練習和操作
我們順利地完成了這次的關卡目標

本次關卡學會了兩種方式去切換不同的版本

'git checkout 提交ID' 用於移動至指定的提交
通過這個指令來查看不同版本的內容

'git checkout 分支名稱' 則用於移動到指定的分支上
在分離 HEAD 的情形發生時，或是想要繼續在分支上開發時
會使用的指令

最後，恭喜您通過了本次關卡！
這也代表您完成了 'Git 基礎' 主題關卡
您做得很棒！

恭喜您！
您已成功完成了模擬背景的目標

通過這些練習
您現在應該已經熟悉了如何切換不同的專案版本了

接下來，讓我們回顧一下本次關卡學到的知識和指令吧

在本關中，我們學會如何去切換專案版本

通過指令 "git checkout 提交ID" 
可以將 HEAD 指向指定的 "提交"

在執行後
HEAD 的顏色會變得透明
我們稱為 "<color=#CF001C>分離 HEAD</color>"

這意味著當我們將 HEAD 指向 "提交"
並沒有指向任何分支時

如果這時我們新建一個 "提交"
新的 "提交" 不會新建在任何一個分支裡

這可能導致 Git 管理上的困難
從而影響開發效率

因此，請在查看完 "提交" 內容後
務必使用指令 "git checkout 分支名稱"
將 HEAD 指向您想要繼續開發的分支

在回顧完本次關卡學到的知識和指令後

恭喜您通過了本次關卡！
這也代表您成功完成了 "Git 基礎" 主題關卡
您做得很棒！