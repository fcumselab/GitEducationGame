歡迎來到
'合併前的確認' 關卡！

在這個關卡中，
將學習 '合併到遠端主分支' 前
需要先確認的流程

這個流程
能減少合併時的問題，提高合併效率
同時保證專案的穩定性

在開始前
讓我們快速回顧上一關卡中學到的知識和指令

在上一個關卡中
學會了如何去獲取遠端分支內容
並且去更新舊的本地分支至遠端分支

'<color=#CF001C>git pull 遠端儲存庫別名 分支名稱</color>'
將落後的本地分支更新到遠端分支最新的版本

'<color=#CF001C>git branch -r</color>'
來查看遠端儲存庫的所有分支名稱

'<color=#CF001C>git branch 本地分支名 遠端分支名</color>'
來將遠端分支獲取到本地電腦上

回顧完上一個關卡的內容後
讓我們來模擬本次的遊戲背景

在創建好了關卡場景後
請您先開啟 '提交記錄' 視窗
我們來確認本地和遠端儲存庫的 '提交記錄' 狀態

好的，開啟 '提交記錄' 視窗
讓我們來檢查其中的狀態

首先，注意到在 'master' 分支上
本地儲存庫落後於遠端儲存庫

根據背景故事
團隊成員已經將開發完的內容合併至遠端 'master' 分支
總共有 2 個提交

然而，我們的 'update-readme' 分支
是在 'master' 分支的第 1 個提交上創建的
現在這兩個分支的提交記錄是分開的

這種情況在團隊開發是常見的
團隊成員會在自己的分支上開發功能
並將開發完的功能合併到 'master' 分支上

這些改動會使得整個遠端儲存庫的 '提交記錄'
出現多個不同的路徑
遠端 'master' 分支也會隨時間不斷更新

在這種情況下
在準備合併到遠端主分支之前
需要先在本地儲存庫中進行 '合併前的確認'

完成確認後
合併遠端主分支的過程會變得流暢
並減少專案出現錯誤的可能性

我們將在本次關卡中進行以下步驟：
1. 確認 '開發分支' 和 '主分支' 的記錄與遠端一致
2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中
3. 查看合併後的專案是否出現問題
4. 將合併後的 '開發分支'，上傳至遠端

根據第 1 步，
需要先同步本地的 '開發分支' 和 '主分支'

當確認本地與遠端的提交記錄相同時
才能繼續將兩個分支合併在一起

那麼，讓我們先從 '主分支' 開始
請您切換到 'master' 分支
並同步遠端 'master' 分支的內容

很好！
目前本地 'master' 分支已同步遠端分支
已獲取到其他團隊成員合併的提交

目前已進行的流程：
<color=#CF001C>1. 確認 '開發分支' 和 '主分支' 的記錄與遠端一致</color>
2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中
3. 查看合併後的專案是否出現問題
4. 將合併後的 '開發分支'，上傳至遠端

接下來來確認 '開發分支'
請您切換到 'update-readme' 分支
並同步遠端 'update-readme' 分支的內容

很好！
目前本地 'update-readme' 分支已同步遠端分支
已確認 'update-readme' 是最新版本

目前已進行的流程：
1. 確認 '開發分支' 和 '主分支' 的記錄與遠端一致
<color=#CF001C>2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中</color>
3. 查看合併後的專案是否出現問題
4. 將合併後的 '開發分支'，上傳至遠端

目前已確認了第 1 步，
'開發分支' 和 '主分支' 現在是最新的版本

讓我們繼續下一個步驟：
我們要在本地電腦中
將 'master' 分支合併到 'update-readme' 分支上

在團隊開發專案時，
遠端 'master' 分支通常是受保護的狀態
無法直接將本地 'master' 分支上傳到遠端

我們需要通過已合併後的 'update-readme' 分支
來繼續進行合併遠端主分支的流程

在執行合併之前
請注意目前分支的位置
我們要在 'update-readme' 分支上進行合併

切換到 'update-readme' 分支後
請使用 'git merge master' 指令
<color=#CF001C>將 '主分支' 合併到 '開發分支' 上吧</color>

非常好！
您成功執行合併分支指令
但是，在合併的過程中出現了文件衝突

因為團隊成員同樣在 'README.md' 新增內容
這些修改被合併到了 'master' 分支
所以發生了文件衝突

接下來，需要您來解決文件衝突
這次要保留這兩個分支的修改內容

當成功解決文件衝突後
請新建一個提交來保存解決衝突後的內容

非常出色！
在成功解決文件衝突並創建新的 '提交' 後

'master' 與 'update-readme' 分支的 '提交記錄' 連接在了一起
表示合併成功了

目前已進行的流程：
1. 確認 '開發分支' 和 '主分支' 的記錄與遠端一致
2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中
<color=#CF001C>3. 查看合併後的專案是否出現問題</color>
4. 將合併後的 '開發分支'，上傳至遠端

完成第 2 步驟後
下一步要來確認合併後的專案是否可以使用

由於本故事只有在 'README.md' 上修改內容
所以只需要確認檔案的內容是否正確即可

那麼，請開啟 'README.md'
查看合併後的檔案內容
是否包含我們和團隊成員新增的內容

好的，查看檔案內容後
可以確認我們和團隊的修改都包含在裡面
表示第 3 步驟已完成

目前已進行的流程：
<color=#CF001C>1. 確認 '開發分支' 和 '主分支' 的記錄與遠端一致</color>
2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中
3. 查看合併後的專案是否出現問題
<color=#CF001C>4. 將合併後的 '開發分支'，上傳至遠端</color>

確認合併後的專案可以運行後
就可以將 'update-readme' 分支上傳到遠端儲存庫中了

執行完第 4 步驟
就可以準備來創建 Pull Request 請求

Pull Request 是合併遠端 'master' 分支時
需要創建的一種合併請求
團隊成員需要查看請求並決定是否要合併分支

在下一個關卡中
我們將學習如何創建 Pull Request

接下來，請通過 'git push origin update-readme' 指令
將本地分支的內容上傳到遠端儲存庫中

非常好！
您已成功將 'update-readme' 分支上傳至遠端儲存庫

目前在遠端儲存庫中
'update-readme' 的 '提交記錄'
已經解決了與 'master' 分支的文件衝突

完成第 4 步驟後
在創建 Pull Request 請求時
就不需要再次解決文件衝突

現在，讓我們回顧已經完成的流程：
1. 確認 '開發分支' 和 '主分支' 的版本與遠端儲存庫一致
2. 在本地電腦中將 '主分支' 合併至 '開發分支' 中
3. 運行合併分支後的專案，查看運行是否出現問題
4. 將合併後的 '開發分支' ，推送至遠端儲存庫中

通過以上這四個步驟
在開始合併到遠端主分支時
就可以減少合併時遇到的問題

在下一關卡裡，
我們要創建 Pull Request
並嘗試將內容合併到遠端 'master' 分支上

當您學會 Pull Request 後
您就已經精通了大部分的 Git 知識與指令

最後，恭喜您完成了本次的關卡
做得非常好！