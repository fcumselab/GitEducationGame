歡迎來到
'Git 暫存區域的基礎操作' 關卡！

首先，讓我們快速回顧上一關卡中學到的知識和指令

在上一關卡中，
我們使用了兩個 Git 指令：
'git --version' 和 'git init' 

'git init' 作為創建 Git 管理系統的基礎
是開始使用 Git 系統時需要輸入的第一個指令

執行指令後創建的 '.git' 資料夾
是 Git 系統的核心

之後介紹了 '.git' 資料夾是什麼
並提到組成 Git 的三個重要區域

分別是：
'工作目錄' (Working Directory)
'暫存區域' (Staging Area)
'儲存庫' (Repository)

在本次關卡中，將進一步介紹 '暫存區域'
並通過幾個 Git 指令來與它互動

接下來，讓我們先來模擬本次的遊戲背景

在完成模擬後
我們先回顧 '暫存區域' 的作用

'暫存區域' 在 Git 系統中扮演了重要的角色
它作為 '工作目錄' 和 '儲存庫' 之間的橋樑

在 '工作目錄' 中修改檔案內容後
通過 Git 指令將檔案移動至 '暫存區域' 中

在確定好修改內容後
通過另一個 Git 指令將所有修改內容存入到 '儲存庫' 中

'儲存庫' 會把它們整合成一次記錄
這個記錄稱為 '提交'，表示我們創建了一個版本

但是，我們無法直接在 '檔案管理' 視窗中
看到 '暫存區域' 和 '儲存庫' 這兩個區域
需要通過 Git 指令來查看它們

接下來，讓我們來學習如何打開 '暫存區域'
本次也需要使用 '命令行' 視窗來執行指令

那麼，請您先打開 '命令行' 視窗吧

好的，您已開啟 '命令行' 視窗

在這個關卡中，
要學習的第一個指令是 '<color=#CF001C>git status</color>'

通過這個指令
Git 會將 '暫存區域' 中的內容
顯示在 '命令行' 視窗上

在本遊戲裡，
為了讓您能以簡潔便利的方式觀看輸出內容
輸出結果獨立成了視窗 —— '暫存區域' 視窗

接下來，請您執行 '<color=#CF001C>git status</color>' 指令
來查看 '暫存區域' 的內容

很好！
您已成功執行 'git status' 指令

執行後，'暫存區域' 視窗顯示在了畫面上
我們來了解視窗中的內容吧

在這個視窗中
顯示了 '工作目錄' 與 '暫存區域' 檔案之間的差異

在 '未追蹤' (Unstaged Files) 區域中
是我們在 '工作目錄' 裡新增、修改、刪除的檔案

當這些檔案在 '<color=#CF001C>變更</color>' 後
但還沒有放入 '暫存區域' 時
Git 系統將會視它們為 '<color=#CF001C>未追蹤</color>' 檔案

此外，列表第一行的加號圖示
表示 '課堂筆記.txt' 對於 Git 管理系統來說
是第一次被追蹤

而 '已追蹤' (Staged Files) 區域
表示我們把需要儲存成記錄的檔案加入到 '暫存區域'

在我們確認好所有要記錄的檔案後
就可以一次性地將 '已追蹤' 的內容放到 '儲存庫' 中 
這些內容將創建為一份 '提交'（記錄）

了解完 '暫存區域' 的結構後
來試著將檔案加入到 '已追蹤' 吧
我們要通過指令 '<color=#CF001C>git add</color>' 來達成目標

在 'git add' 指令中
您需要在指令前方加入想要上傳的文件名稱

本次電腦中有一份文件
我們可以使用 '<color=#CF001C>git add 課堂筆記.txt</color>'
加入到 '已追蹤'

但是，在開始操作之前
請讓我再介紹一個 '命令行' 視窗中的功能

'命令行' 視窗的搜尋功能
除了可以搜索、快速完成 Git 指令外
它也同樣適用於 '檔案管理' 的文件上

如果要使用這個功能
請您按照以下指示操作：

第 1 步：
在輸入欄中輸入 '<color=#CF001C>git add</color>'

第 2 步：
在指令前方加一個空格
變成 '<color=#CF001C>git add </color>' 

第 3 步：
按下搜尋功能按鈕或 Tab 鍵
系統會顯示當前路徑下的所有檔案名稱
從中選擇要加入的檔案

那麼，請您按照以上操作
執行 '<color=#CF001C>git add 課堂筆記.txt</color>' 指令吧

非常好！
您已成功執行 'git add' 指令

然而，儘管我們已經執行了指令
'命令行' 也返回成功提示
但是 '暫存區域' 視窗卻還沒有更新內容

原因在於：
當我們與 '暫存區域' 做互動時
是 '<color=#CF001C>無法即時</color>' 看到執行後的結果的

因此，當我們從 '暫存區域' 放入或移出檔案後
請記得執行 'git status' 指令更新內容

那麼，就和之前的步驟一樣
使用 '<color=#CF001C>git status</color>' 指令
來確認 '課堂筆記.txt' 是否加入到 '暫存區域'

好的，通過 'git status' 指令
我們看到了更新後的結果

指定檔案已經從 '未追蹤' 加入到 '已追蹤'

您可以點擊之前執行的 'git status' 指令
來觀察執行前後造成的影響

在學習如何將檔案加入 '已追蹤' 後
接下來來學習與 'git add' 相反的指令

通過 '<color=#CF001C>git reset</color>' 指令
可以將 '已追蹤' 的檔案移動為 '未追蹤'

當您不想將檔案提交到 '儲存庫' 時
可以使用這個指令

要執行 'git reset' 指令
與輸入 'git add' 指令時的方式相同
您需要在指令前方加入檔案名稱

這次，請您將 '課堂筆記.txt' 移出 '已追蹤' 
並確保檔案已移出 '暫存區域'

如果您忘記了如何使用指令
請查閱遊戲手冊來確認

非常好！
您執行了 'git reset' 指令

在更新後的 '暫存區域' 視窗中
'課堂筆記.txt' 現在是 '未追蹤'

經過指令的操作，
您達成了本次的模擬背景目標

在本次關卡裡，
您了解了 '暫存區域' 的結構
並學會三個其互動的指令

''git status' 用於查看 '暫存區域' 視窗
''git add' 將檔案加入 '已追蹤'
''git reset' 將檔案變回 '未追蹤'

您可以通過實戰關卡再次練習指令的使用
也能夠繼續進行下一個教學關卡

在下一關卡中，
將教會您如何使用更進階的指令
來控制 '暫存區域' 狀態

最後，恭喜您完成本次的關卡
您做的很棒！