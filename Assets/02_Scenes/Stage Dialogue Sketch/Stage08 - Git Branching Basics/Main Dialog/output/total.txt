歡迎來到 
'Git 分支基礎教學' 關卡！

在 '分支管理' 主題關卡中
我們將學習 Git 的分支系統
並通過指令、視窗來達成模擬場景的目標

首先，來回顧分支系統對專案管理有什麼優點

Git 中的分支是一個強大且實用的功能
我們可以創建多個不同名稱和用途的分支

例如，'分支A' 來開發新功能
'分支B' 來修復專案上的錯誤
主分支（master）則等待其他分支完成目標

當團隊共同開發專案時
可以將這些分支分配給其他人

分支環境提供了獨立開發工作的環境，
分支間不會互相干擾

即使 '分支A' 中導致專案出現問題
只需要刪除或修改 '分支A' 就可以
'master' 分支不會受到影響

分支系統為專案管理
帶來了靈活性和穩定性

接下來，我們將進入本次的關卡
讓我們先建構本次的模擬環境

在建構完成後
請您查看 '提交記錄' 的狀態
看看目前專案的開發進度

好的，在開啟 '提交記錄' 視窗後
我們來查看專案中所有提交的狀態

第 1 個提交：
作者為俄羅斯方塊遊戲
創建了一個 Git 管理系統

第 2 個提交：
完成俄羅斯方塊的基本遊戲規則
但在遊戲過程中會出現錯誤

第 3 個提交：
作者修復了錯誤
經過多次測試後，遊戲運行順暢

藉由這些提交可知
作者已經完成了俄羅斯方塊遊戲的基本功能

根據背景故事
作者接下來想要在遊戲中新增有趣的功能
但同時需要確保現在的版本不會被正在開發的功能干擾

因此，本次要通過 Git 的分支功能來開發專案
我們需要新建一個分支來開發新功能

本關卡要學習的第一個指令是 
'<color=#CF001C>git branch 分支名稱</color>'
'分支名稱' 是我們創建新分支要被命名的名稱

這個指令會在 HEAD 指向的提交創建新的分支
並包含 HEAD 的提交以及之前的所有提交

例如，我們在第 2 個提交上創建新的分支
這個分支的 '提交記錄' 會包含前面兩個提交
也就是第 1 和 第 2 個提交

不過，創建新分支時需要遵守一些規則
這些規則可以更好地管理專案

1. 分支的命名要簡潔、明確
和提交訊息一樣
清晰的命名可以讓人了解分支的目的和作用

1. 避免使用特殊符號、中文
分支名稱盡量不要使用這些文字
以確保專案能夠在不同語言的設備上開發
也讓團隊理解分支的作用

以上是創建新分支時最重要的兩個規則
請在遵守規則的情況下創建分支吧

如果想要了解更多分支命名的規則的話
請查看遊戲手冊

接下來，就像提交訊息一樣
本遊戲可以快速填入正確的分支名稱
請您按照以下步驟來創建分支

第 1 步：
開啟 '命令行' 視窗

第 2 步：
請先輸入 '<color=#CF001C>git branch</color>'

第 3 步：
在指令前方加一個空格
變成 '<color=#CF001C>git branch </color>'

第 4 步
完成前一步驟後
按下 Tab 鍵或搜尋功能按鈕，來開啟命名分支視窗
從選項中<color=#CF001C>選擇最合適的分支名稱</color>

第 5 步：
選擇最合適的選項後
輸入欄的內容應該會是：
<color=#CF001C>git branch "正確的分支命名</color>"

請您按照以上步驟
在最新的提交上創建您的第一個分支吧

非常好！
您執行指令創建了一個分支
命令行返回了成功訊息

在創建新分支後
請確認指令對 Git 造成了什麼影響
請您先查看 '提交記錄' 視窗的狀態

好的，更新 '提交記錄' 視窗的內容
會注意到分支欄位中
新增了一個分支 'new-feature' 

此外，當您點擊提交後
分支欄位多了一個 'new-feature'

但是，請注意現在還是 'HEAD -> master'
表示 HEAD 目前指向 'master' 分支

'git branch 分支名稱' 指令只用於創建分支
HEAD 並不會自動切換到新創建的分支上

所以在創建新分支後
請不要忘記使用 'git checkout 分支名稱' 指令
來切換到新創建的分支，以開始在新分支上工作

在開始切換分支之前
讓我們先學習如何快速查看分支

通過 '<color=#CF001C>git branch</color>' 指令
來查看目前 Git 包含的所有分支
來試試看吧

很好！
執行新的指令 'git branch' 後
命令行列出了目前所有的分支名稱

帶有 '<color=#CF001C>*</color>' 符號的分支
表示 HEAD 當前所在的分支

接下來，需要先切換到新分支上才可以
在 'new-feature' 分支開發新功能

請您使用 'git checkout 分支名稱' 指令
來切換到 'new-feature' 分支
並更新 '提交記錄' 的狀態

很好！
您切換到了新創建的 'new-feature' 分支

'提交記錄' 視窗裡
發現所有提交的顏色
變成 'new-feature' 分支代表的顏色

點擊其中一個提交後
分支欄位變成了 'HEAD -> new-feature'
表示 HEAD 已經指向 'new-feature' 分支

在確認所在的分支無誤後
請您在遊戲裡新增功能
並完成一次提交吧

相信通過 'Git 基礎' 主題關卡的您
可以完成 '新建提交' 的流程
加油！

非常好！
您在 'new-feature' 分支上創建了一個 '提交'
請您點擊這個提交來查看訊息

點擊提交後
分支欄位中並沒有 'master'
只有 'new-feature'

這是因為我們是在 'new-feature' 分支進行提交的
'master' 分支最新的提交仍是第 3 個

為了驗證這是正確的
請先切換到 'master' 分支
並更新 '提交記錄' 的內容吧

好的，在更新了 '提交記錄' 內容後
發現 HEAD 移動到第 3 個提交
也就是 'master' 分支裡最新的提交

而新創建的第 4 個提交和其他提交的顏色不同

由此可知
兩個分支間的修改內容互不影響

在遊戲中新增功能後
我們測試了遊戲的運行狀況

然而，在遊玩途中
發現這個新功能造成了很多錯誤

這下我們有兩種選擇：
1. 繼續開發這項功能
2. 捨棄掉這個功能

在本次關卡中
我們先試著將刪除這個分支吧

本次要學習的最後一個指令是
'<color=#CF001C>git branch -d 分支名稱</color>' 

這個指令可以刪除掉指定分支
並刪除該分支中的 '提交記錄'

'git branch 分支名稱' 是用來創建分支的指令
而在指令中加入 '<color=#CF001C>-d</color>' (Delete 刪除)
就變成刪除分支的指令

不過在刪除分支之前
<color=#CF001C>請確保 HEAD 已經移動到其他分支</color>

在關卡過程中
已經位於 'master' 分支
所以不需要移動分支

接下來，請您執行
'<color=#CF001C>git branch -d new-feature</color>' 指令
刪除 'new-feature' 分支吧

刪除分支後，請更新 '提交記錄' 的狀態
查看執行指令後造成的影響

很好！
執行刪除分支的指令後
命令行返回了成功訊息

更新的 '提交記錄' 內容中
'new-feature' 分支已經被刪除了
專案回到了關卡開始時的模樣

'master' 分支中的最新 '提交'
依舊可以遊玩俄羅斯方塊

從本次關卡裡
可以看出分支系統讓專案提高穩定性
以減少開發失敗造成的損失

這次學習了與分支管理有關的指令
'git branch' 用於查看 Git 中所有的分支
'git branch 分支名稱' 用於創建一個新的分支
'git branch -d 分支名稱' 用於刪除一個指定分支

在下個關卡中
我們將換個角度思考本次發生的情況

如果新功能順利開發出來
要如何將新分支的提交
合併到主要分支呢？

最後，恭喜您完成本次的關卡
您做得很好！