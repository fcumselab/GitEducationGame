TooltipMessage/GameManualButton/Unlock,遊戲手冊
TooltipMessage/GameManualButton/Lock,尚未解鎖視窗：遊戲手冊
GameManualItem/list/git,git
GameManualItem/list/git init,git init
GameManualItem/list/git status,git status
GameManualItem/list/git add,git add
GameManualItem/list/git reset,git reset
GameManualItem/list/git commit,git commit
GameManualItem/list/git log,git log
GameManualItem/list/git checkout,git checkout
GameManualItem/list/git branch,git branch
GameManualItem/list/git merge,git merge
GameManualItem/list/git clone,git clone
GameManualItem/list/git remote,git remote
GameManualItem/list/git push,git push
GameManualItem/list/git pull,git pull
GameManualWindow/content/DefaultContent,"點擊左方列表
來觀看教學內容"
GameManualItem/content/common/commandTitle,指 令 類 型 介 紹
GameManualItem/content/common/commandDetailedTitle,指 令 細 節
GameManualItem/content/common/command/use, 用途：
GameManualItem/content/common/command/scenario, 使用情境：
GameManualItem/content/common/command/example, 使用範例：
GameManualItem/content/common/command/hint, 需要注意的地方：
GameManualItem/content/common/tipTitle,小提醒：
GameManualWindow/Title,遊 戲 手 冊
GameManualWindow/CategoryButton/Command,指 令
GameManualWindow/CategoryButton/RuleAndWindow,遊 戲 規 則 與 視 窗
GameManualWindow/CategoryButton/VersionControl,版 本 控 制
GameManualWindow/ListTitle/Command,Git 指 令 列 表
GameManualWindow/ListTitle/RuleAndWindow,遊 戲 規 則 與 視 窗 教 學 列 表
GameManualWindow/ListTitle/VersionControl,版 本 控 制 教 學 列 表
GameManualItem/content/git/1,"'git' 是 Git 指令中最基礎的類型之一。

在執行大部分 Git 指令時，
您需要將 'git' 作為第 1 個指令欄位，
然後在第 2 欄位加上其他指令類型（例如：init 、add）。

而 'git' 指令類型，只需要輸入 1 個欄位的指令即可執行。
您也可以在指令前方加入其他參數來執行不同操作。

通常情況下，'git' 指令可用於以下情境：
 1. 確認當前電腦使用的 Git 系統版本。
 2. 了解可用的 Git 系統指令，以及每個指令的用途。"
GameManualItem/content/git/commandDetail/1,git <color=#CF001C>-h 或 --help</color>
GameManualItem/content/git/commandDetail/1/use,"了解所有可用 Git 指令的簡要說明。
除了執行這個指令外，
您也可以從 Git 官方網站來獲得更詳細的指令使用方法。"
GameManualItem/content/git/commandDetail/1/scenario,"1. 需要回顧之前學習的內容。
2. 查找特定指令的使用方法時。"
GameManualItem/content/git/commandDetail/1/example,當使用者 A 在使用 Git 遇到問題時，可以執行以下指令來獲得幫助：
GameManualItem/content/git/commandDetail/1/exampleBox,git <color=#CF001C>--help</color>
GameManualItem/content/git/commandDetail/1/hint,"在本遊戲中，每個指令的詳細說明都包含在遊戲手冊中。
如果想要進一步了解特定指令，
請點擊遊戲手冊按鈕或執行這個指令來開啟手冊。"
GameManualItem/content/git/commandDetail/2,git <color=#CF001C>-v 或 --version</color>
GameManualItem/content/git/commandDetail/2/use,"確認當前電腦使用的 Git 系統版本，
同時確認是否已安裝系統。"
GameManualItem/content/git/commandDetail/2/scenario,"1. 在開始使用 Git 管理專案之前。
2. 需要確認電腦是否已安裝 Git 系統。"
GameManualItem/content/git/commandDetail/2/example,"當使用者 A 想要使用 Git 來管理專案時。
可以執行以下指令來確認 Git 是否已安裝："
GameManualItem/content/git/commandDetail/2/exampleBox,git <color=#CF001C>--version</color>
GameManualItem/content/git/commandDetail/2/hint,"無特別注意事項，只需遵守基本的 Git 指令輸入規則即可。
（詳情請查看 'Git 指令的基本介紹'）"
GameManualItem/content/git init/1,"'git init' 是 Git 指令中最基礎的類型之一。

當您想要開始使用 Git 來管理您的專案時，
'git init' 將是您需要執行的第一個指令。

執行成功後，將在您指定的檔案路徑下創建一個名為 '.git' 的隱藏資料夾。
這個資料夾是 Git 管理系統的核心，它儲存著專案的管理記錄。
如果缺少這個資料夾，大多數 Git 指令將無法運作。"
GameManualItem/content/git init/commandDetail/1,git init
GameManualItem/content/git init/commandDetail/1/use,在命令行所在的路徑下創建一個 '.git' 隱藏資料夾。
GameManualItem/content/git init/commandDetail/1/scenario,1. 想要開始使用 Git 管理專案時。
GameManualItem/content/git init/commandDetail/1/example,"當使用者 A 準備使用 Git 來管理專案時，
在選定要管理的專案路徑後，執行以下指令："
GameManualItem/content/git init/commandDetail/1/exampleBox,git init
GameManualItem/content/git init/commandDetail/1/hint,"1. 確保執行指令時的路徑正確：
當您執行 'git init' 時，
Git 將在命令行所在的路徑下創建 '.git' 資料夾。

請確保這個路徑與您要管理的專案相符，
以避免不必要的混淆和困擾。"
GameManualItem/content/git status/1,"'git status' 屬於與 '暫存區域' 相關的指令類型。

透過這個指令，
您可以查看目前 Git 管理系統中的 '暫存區域' 狀態。
以便了解哪些檔案已被追蹤，哪些檔案已被修改，
以及是否準備好進行提交。"
GameManualItem/content/git status/1/tip,"在實際使用 Git 時，指令的輸出內容會顯示在命令行視窗中。
本遊戲將輸出內容，整合到 '暫存區域' 視窗中。
以便更容易查看內容，視窗的設計和實際輸出相似。"
GameManualItem/content/git status/commandDetail/1,git status
GameManualItem/content/git status/commandDetail/1/use,開啟 '暫存區域' 視窗，顯示當前 '暫存區域' 的狀態。
GameManualItem/content/git status/commandDetail/1/scenario,"1. 需要確認當前 '暫存區域' 的狀態。
2. 將檔案推入或移出 '暫存區域' 後。
3. 創建新的 '提交' 前，確認追蹤的檔案和狀態。"
GameManualItem/content/git status/commandDetail/1/example,"當使用者 A 在將修改完成的檔案推入或移出 '暫存區域' 後，
執行以下指令來查看區域中檔案的狀態："
GameManualItem/content/git status/commandDetail/1/exampleBox,git status
GameManualItem/content/git status/commandDetail/1/hint,"1. 無法即時更新內容：
在執行與 '暫存區域' 互動的指令
（例如：git add、git reset 等）後。

雖然檔案的狀態已更改，但您無法立即看到視窗中的更新。
因此，在執行這些指令後，
請再次使用 'git status' 指令以查看最新的狀態。"
GameManualItem/content/git add/1,"'git add' 是與 '暫存區域' 有關的指令類型。
透過這個指令，將檔案內容從工作目錄加入到 '暫存區域'。

成功將檔案加入 '暫存區域' 後，這些檔案會被標記為 '已追蹤'。
它們將作為下一次的 '提交'（版本記錄）。"
GameManualItem/content/git add/commandDetail/1,git add <color=#CF001C>指定的檔案名稱</color>
GameManualItem/content/git add/commandDetail/1/use,將特定檔案加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/1/scenario,1. 希望將特定檔案的更改保存為記錄時。
GameManualItem/content/git add/commandDetail/1/example,"當使用者 A 已經完成對 '文章A.txt' 的修改後，
可以執行以下指令，將該檔案加入到 '暫存區域' 中："
GameManualItem/content/git add/commandDetail/1/exampleBox,git add <color=#CF001C>文章A.txt</color>
GameManualItem/content/git add/commandDetail/1/hint,"1. 無法即時更新內容：
執行指令後，不會立即看到即時的反饋。
請使用 'git status' 指令查看最新的 '暫存區域' 狀態。"
GameManualItem/content/git add/commandDetail/2,git add <color=#CF001C>資料夾名稱</color>
GameManualItem/content/git add/commandDetail/2/use,將指定資料夾中的所有檔案一次性加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/2/scenario,1. 想要將一個資料夾中的所有檔案一次性加入 '已追蹤' 時。
GameManualItem/content/git add/commandDetail/2/example,"當使用者 A 想要一次性將 '網站圖片庫' 資料夾中的
所有檔案加入到 '暫存區域' 時。
可以執行以下指令："
GameManualItem/content/git add/commandDetail/2/exampleBox,git add <color=#CF001C>網站圖片庫</color>
GameManualItem/content/git add/commandDetail/3,git add <color=#CF001C>.</color>
GameManualItem/content/git add/commandDetail/3/use,一次性將命令行所在路徑下的所有檔案加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/3/scenario,"1. 想要一次性將整個工作目錄下的所有檔案加入到 '已追蹤' 中。
2. 第一次建立 Git 管理系統時，用於初始化專案。"
GameManualItem/content/git add/commandDetail/3/example,"當使用者 A 需要初始化一個新的 Git 專案。
將整個工作目錄中的檔案加入 '暫存區域' 時。
可以執行以下指令："
GameManualItem/content/git add/commandDetail/3/exampleBox,git add <color=#CF001C>.</color>
GameManualItem/content/git reset/1,"'git reset' 是功能強大的指令類型。
它涵蓋了 '暫存區域'、'提交記錄' 這些領域。

在開發專案時，如果不想要將一些檔案新增到 '暫存區域' 時，
可以使用這個指令將檔案從 '已追蹤' 區域移回 '未追蹤' 區域。"
GameManualItem/content/git reset/commandDetail/1,git reset <color=#CF001C>指定的檔案名稱</color>
GameManualItem/content/git reset/1/tip,"在實際使用 Git 時，
'git reset' 除了可以做到上述功能外，還能夠刪除 '提交記錄' 裡的 '提交'。
但是，考慮到刪除 '提交' 後造成的不可挽回性以及操作的難度。
本遊戲將略過 '刪除提交記錄' 功能，以確保學習品質。"
GameManualItem/content/git reset/commandDetail/1/use,將指定的檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/1/scenario,1. 當你不想要將修改後的檔案放入 '暫存區域' 時。
GameManualItem/content/git reset/commandDetail/1/example,"當使用者 A 不小心將一個重要檔案推送到 '暫存區域' 時，
可以執行以下指令將其移回 '未追蹤' 區域："
GameManualItem/content/git reset/commandDetail/1/exampleBox,git reset <color=#CF001C>機密文件.txt</color>
GameManualItem/content/git reset/commandDetail/1/hint,"1. 無法即時更新內容：
執行指令後，不會立即看到即時的反饋。
請使用 'git status' 指令查看最新的 '暫存區域' 狀態。"
GameManualItem/content/git reset/commandDetail/2,git reset <color=#CF001C>資料夾名稱</color>
GameManualItem/content/git reset/commandDetail/2/use,將指定資料夾中的所有檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/2/scenario,1. 希望一次性將指定資料夾中的所有檔案移回 '未追蹤' 區域時。
GameManualItem/content/git reset/commandDetail/2/example,"當使用者 A 不希望將資料夾中的大型檔案提交到 '暫存區域' 時。
可以執行以下指令將其移回 '未追蹤' 區域："
GameManualItem/content/git reset/commandDetail/2/exampleBox,git reset <color=#CF001C>未壓縮圖片庫</color>
GameManualItem/content/git reset/commandDetail/3,git reset <color=#CF001C>.</color>
GameManualItem/content/git reset/commandDetail/3/use,將命令行所在路徑下的所有檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/3/scenario,1. 希望一次性將整個專案的檔案移回 '未追蹤' 區域時。
GameManualItem/content/git reset/commandDetail/3/example,"當使用者 A 需要一次性將多個資料夾中的檔案移回 '未追蹤' 區域時。
可以執行以下指令："
GameManualItem/content/git reset/commandDetail/3/exampleBox,git reset <color=#CF001C>.</color>
GameManualItem/content/git commit/1,"'git commit' 是與 '提交記錄' 有關的指令類型。

這個指令是將位於 '暫存區域' 中的修改整合成一個新的 '提交'，
並將其儲存到 '儲存庫' 中的 '提交記錄' 區域。

要成功執行 'git commit'，需要滿足以下兩個條件：
1. 至少有一個檔案已經被加入 '暫存區域'。
2. 提供一個簡潔且有意義的提交訊息。
   
這個指令有助於開發者整理工作，
以便更好地追蹤不同版本修改內容和目的。"
GameManualItem/content/git commit/commandDetail/1,"git commit <color=#CF001C>-m 或 --message</color> <color=""#173D91"">""commit message""</color>"
GameManualItem/content/git commit/commandDetail/1/use,"用於將 '暫存區域' 中的修改整合成一個新的 '提交'，
同時提供提交訊息以說明修改的內容。"
GameManualItem/content/git commit/commandDetail/1/scenario,1. 已確定要將 '暫存區域' 中的修改保存為一個 '提交' 時。
GameManualItem/content/git commit/commandDetail/1/example,"使用者 A 最近開發了一個新的功能。
並將檔案加入至 '暫存區域'，
然後執行以下指令以創建新的 '提交'："
GameManualItem/content/git commit/commandDetail/1/exampleBox,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""新增搜尋關鍵字功能""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/1,"1. 提交訊息需要使用雙引號（""）包裹：
Git 指令使用空格來區分不同的指令欄位。
使用雙引號可以確保提交訊息被視為一個指令欄位。

2. 提交訊息要具體而清晰：
為了讓人能夠快速了解每個 '提交' 的內容和目的，
請確保填寫的提交訊息具體而清晰。

3. 如何在本遊戲中快速填寫提交訊息：
本遊戲提供了快速填寫提交訊息的方式，
請按照以下步驟執行正確的指令：
"
GameManualItem/content/git commit/commandDetail/1/hint/2,        1. 在命令行中輸入以下指令：
GameManualItem/content/git commit/commandDetail/1/hint/3,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/4,"        2. 按下 Tab 鍵或搜尋功能按鈕，以開啟提交訊息的選擇視窗。
        3. 從選擇視窗中選擇最適合的提交訊息選項。
        4. 選擇後，提交訊息將自動填入指令中。"
GameManualItem/content/git commit/commandDetail/1/hint/5,"按照上述步驟，
您就可以輕鬆執行 'git commit' 指令並提交您的修改。"
GameManualItem/content/git log/1,"'git log' 是一個廣泛使用的指令類型。
它涵蓋了 '提交記錄'、'分支管理'、'遠端管理' 領域。

這個指令類型的主要作用
是讓您了解目前 Git 管理系統中的 '提交記錄' 狀態。

'提交記錄' 是 '儲存庫' 中的一個區域，用來存放專案的所有 '提交'。"
GameManualItem/content/git log/1/tip,"在實際使用 Git 時，'提交記錄' 狀態會顯示在命令行視窗中。
本遊戲將輸出內容，整合到 '提交記錄' 視窗中。
以便更容易查看內容，視窗的設計和實際輸出相似。
並整合了 'git log' 不同參數的輸出結果。"
GameManualItem/content/git log/commandDetail/1,git log
GameManualItem/content/git log/commandDetail/1/use,開啟 '提交記錄' 視窗，以顯示當前的 '提交記錄' 內容。
GameManualItem/content/git log/commandDetail/1/scenario,"1. 想要確認當前 '提交記錄' 的狀態。
2. 剛剛新建一個 '提交'。
3. 切換到其他 '提交' 後。
4. 查看本地儲存庫分支的狀態。
5. 查看遠端儲存庫分支的狀態。"
GameManualItem/content/git log/commandDetail/1/example,"當使用者完成一個新的功能並成功提交後，
可以執行以下指令來查看目前 '提交記錄' 狀態："
GameManualItem/content/git log/commandDetail/1/exampleBox,git log
GameManualItem/content/git log/commandDetail/1/hint/1,"1. 無法即時更新內容：
在執行會影響 '提交記錄' 的指令時
（例如：git commit、git checkout 等）。

雖然成功執行了指令，您無法立即看到視窗中的更新。

因此，在執行這些指令後，
請再次使用 'git log' 以查看最新的狀態。

2. '提交記錄' 視窗的設計：
在本遊戲中，將 'git log' 指令的輸出結果
整合到一個名為 '提交記錄' 的視窗中。

如果您在實際使用 Git 時需要輸入以下指令以達到相同效果："
GameManualItem/content/git log/commandDetail/1/hint/2,"git log <color=#CF001C>--oneline</color> <color=""#173D91"">--all</color> <color=#244B0E>--graph</color>"
GameManualItem/content/git log/commandDetail/1/hint/3,"以下是這些參數的功能：
'--oneline' 僅顯示 '提交ID' 和 '提交訊息'。
'--all'：顯示所有分支的 '提交記錄'。
'--graph'：通過圖示來顯示 '提交' 間關係。"
GameManualItem/content/git checkout/1,"'git checkout' 是一個廣泛使用的指令類型。
它涵蓋了 '提交記錄'、'分支管理' 這些領域。

這個指令允許您切換到不同的 '提交' 和 '分支'，
同時還會同步 '工作目錄' 中的檔案內容。"
GameManualItem/content/git checkout/commandDetail/1,git checkout <color=#CF001C>commit_ID</color>
GameManualItem/content/git checkout/commandDetail/1/use,將 HEAD 移動到指定的 '提交'，以恢復專案到該 '提交' 的版本。
GameManualItem/content/git checkout/commandDetail/1/scenario,"1. 檢查不同 '提交' 的修改內容。
2. 在最新版本中發現錯誤，需要進行問題修復時。
3. 想要回到之前的版本，放棄新版本的內容時。"
GameManualItem/content/git checkout/commandDetail/1/example,"當使用者 A 需要回到先前的版本以檢查錯誤的根本原因時。
在確認了指定提交的 ID 後（例如：'123abc'）。
可以執行以下指令："
GameManualItem/content/git checkout/commandDetail/1/exampleBox,git checkout <color=#CF001C>123abc</color>
GameManualItem/content/git checkout/commandDetail/1/hint,"1. 查看完成後，需要返回到正確的分支以繼續開發：
當 HEAD 指向 '提交'，而不是指向 '分支' 時，
這被稱為 '分離 HEAD' 狀態。

在這種狀態下，新的 '提交' 不會新建在任何分支上。
這可能導致 '提交' 的遺失。

為了維護專案的管理，請在查看完內容後。
使用 'git checkout 分支名稱' 指令將 HEAD 重新指向分支。"
GameManualItem/content/git checkout/commandDetail/2,git checkout <color=#CF001C>分支名稱</color>
GameManualItem/content/git checkout/commandDetail/2/use,"將 HEAD 指向指定的 '分支'。
HEAD 將移動到該分支的最新 '提交'，以便繼續專案開發。"
GameManualItem/content/git checkout/commandDetail/2/scenario,"1. 繼續在特定分支上進行開發。
2. 準備進行分支合併操作時。"
GameManualItem/content/git checkout/commandDetail/2/example,"當使用者 A 完成查看之前版本的內容後，需要繼續在 'master' 分支上開發時。
可以執行以下指令："
GameManualItem/content/git checkout/commandDetail/2/exampleBox,git checkout <color=#CF001C>master</color>
GameManualItem/content/git checkout/commandDetail/2/hint,"1. 注意當前所在分支：
在專案開發過程中，經常會在不正確的分支開發功能。
為了造成避免不必要的混淆。
請在開發功能前，確保位於正確的分支。"
GameManualItem/content/git branch/1,"'git branch' 是與 '分支管理'、'遠端管理' 有關的指令類型

這個指令可以執行各種分支管理操作，
包括查看、新增、刪除等。

此外，加入特定參數可以查看遠端儲存庫中的遠端分支。
通常會與 'git checkout' 指令類型結合使用。"
GameManualItem/content/git branch/commandDetail/1,git branch
GameManualItem/content/git branch/commandDetail/1/use,"查看當前本地儲存庫中所有本地分支的名稱。
同時也會顯示目前 HEAD 位於哪一個 '分支' 或 '提交'。"
GameManualItem/content/git branch/commandDetail/1/scenario,"1. 確認當前 HEAD 所在位置
2. 查看儲存庫中有哪些本地分支"
GameManualItem/content/git branch/commandDetail/1/example,"當使用者 A 需要查看本地儲存庫中的所有分支，
以及 HEAD 目前所在的分支時。
可以執行以下指令："
GameManualItem/content/git branch/commandDetail/1/exampleBox,git branch
GameManualItem/content/git branch/commandDetail/1/hint,"1. 與 'git log' 指令的區別：
雖然這兩個指令都可以查看分支，但它們的用途不同。
'git branch' 用於查看儲存庫中的所有分支，
'git log' 用於查看分支的 '提交記錄'。"
GameManualItem/content/git branch/commandDetail/2,git branch <color=#CF001C>分支名稱</color>
GameManualItem/content/git branch/commandDetail/2/use,"創建一個新的本地分支。
這個分支將基於當前 HEAD 指向的 '提交' 創建，
並含有其他舊的 '提交'。"
GameManualItem/content/git branch/commandDetail/2/scenario,"1. 需要在專案上修復問題
2. 需要在專案上開發新功能"
GameManualItem/content/git branch/commandDetail/2/example,"當使用者 A 需要在專案中開發新功能時，
可以執行以下指令以創建新的分支："
GameManualItem/content/git branch/commandDetail/2/exampleBox,git branch <color=#CF001C>new-feature</color>
GameManualItem/content/git branch/commandDetail/2/hint,"1. 創建分支後需要切換到該分支：
這個指令僅用於創建分支。
如果要在新創建的分支上進行開發，
還需要使用 'git checkout' 指令切換到該分支。

2. 分支名稱要具體而清晰：
為了讓自己和團隊能夠快速了解分支的內容和目的，
請確保分支名稱具體而清晰。"
GameManualItem/content/git branch/commandDetail/3,"git branch <color=#CF001C>-d 或 --delete</color> <color=""#173D91"">分支名稱</color>"
GameManualItem/content/git branch/commandDetail/3/use,將指定的本地分支從本地儲存庫中刪除。
GameManualItem/content/git branch/commandDetail/3/scenario,1. 當分支已經完成目標並合併到主分支時
GameManualItem/content/git branch/commandDetail/3/example,"當使用者 A 已將開發功能的分支合併到主分支時，
可以執行以下指令來刪除分支："
GameManualItem/content/git branch/commandDetail/3/exampleBox,"git branch <color=#CF001C>-d</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git branch/commandDetail/3/hint,"1. 刪除分支前，請確保已將 HEAD 移動到其他位置：
為了成功執行刪除分支指令，
請確保 HEAD 已經移動到其他分支或提交上。"
GameManualItem/content/git branch/commandDetail/4,git branch <color=#CF001C>-r 或 --remote</color>
GameManualItem/content/git branch/commandDetail/4/use,"查看所有遠端分支的名稱，這些遠端分支會以以下格式命名：
'遠端儲存庫別名/分支名稱'"
GameManualItem/content/git branch/commandDetail/4/scenario,1. 需要知道遠端儲存庫中的遠端分支名稱。
GameManualItem/content/git branch/commandDetail/4/example,"當使用者 A 想要得知使用者 B 開發的遠端分支名稱時，
可以執行以下指令："
GameManualItem/content/git branch/commandDetail/4/exampleBox,git branch <color=#CF001C>-r</color>
GameManualItem/content/git branch/commandDetail/4/hint,"1. 與 'git branch' 指令的不同處：
雖然這兩個指令都能夠查看分支名稱，但是作用不同
'git branch' 用於查看本地分支，
'git branch -r' 用於查看所有遠端分支名稱。"
GameManualItem/content/git branch/commandDetail/5,"git branch <color=#CF001C>本地分支名</color> <color=""#173D91"">遠端分支名</color>"
GameManualItem/content/git branch/commandDetail/5/use,"將指定遠端分支的 '提交記錄' 複製到一個新創建的本地分支上，
然後連接在一起。"
GameManualItem/content/git branch/commandDetail/5/scenario,"1. 需要從遠端獲取特定分支。
2. 需要查看其他開發者或自己的遠端分支時。"
GameManualItem/content/git branch/commandDetail/5/example,"當使用者 A 需要從使用者 B 開發的 'member-branch' 分支
查看開發進度時，可以執行以下指令："
GameManualItem/content/git branch/commandDetail/5/exampleBox,"git branch <color=#CF001C>member-branch</color> <color=""#173D91"">origin/member-branch</color>"
GameManualItem/content/git branch/commandDetail/5/hint,"1. 本地分支盡量與遠端分支名稱一致：
通常情況下，本地分支的名稱應與遠端分支相對應。
以減少混淆。

2. 確保執行此指令時，指定的分支名稱不存在：
和 'git branch' 指令相同，這個指令會在本地儲存庫上創建分支。
如果創建的分支名稱已存在，將停止運行。"
GameManualItem/content/git merge/1,"'git merge' 是一個重要的指令類型。
它涵蓋了 '提交記錄'、'分支管理' 這些領域。

這個指令能夠執行分支合併操作。
'將一個分支的修改內容移動到另一個分支中'。
這個動作稱為 '合併'。

在合併過程中，
Git 根據兩個目標分支的 '提交記錄' 自動選擇合併模式。
合併模式有以下三種：
1. 快進合併（Fast-Forward Merge）
2. 自動合併（Auto Merge）
3. 合併衝突（Merge Conflict）

關於這些合併模式的詳細說明，
可以參考遊戲手冊中的 'git merge 的三種模式'。"
GameManualItem/content/git merge/commandDetail/1,git merge <color=#CF001C>分支名稱</color>
GameManualItem/content/git merge/commandDetail/1/use,"將指定分支合併到當前分支上，
使得當前分支獲得指定分支的所有 '提交記錄'。"
GameManualItem/content/git merge/commandDetail/1/scenario,"1. 準備將已完成的分支合併到主分支時。
2. 在準備創建 Pull Request 之前，確認合併流程的步驟之一。"
GameManualItem/content/git merge/commandDetail/1/example,"當使用者 A 在 'new-feature' 分支上完成開發後，
想要將其內容合併到 'master' 分支上。
可以切換到 'master' 分支，然後執行以下指令："
GameManualItem/content/git merge/commandDetail/1/exampleBox,git merge <color=#CF001C>new-feature</color>
GameManualItem/content/git merge/commandDetail/1/hint,"1. 確認當前分支：
在執行合併之前，請確保當前分支是正確的。
以避免合併到錯誤的分支上，造成不必要的困擾。

2. 了解指定分支和當前所在分支的角色：
合併分支 A 到分支 B 的結果，
可能會不同於合併分支 B 到分支 A。

因此在進行合併之前，請先確定兩個分支的角色，
以避免合併到錯誤的分支。"
GameManualItem/content/git clone/1,"git clone' 是與 '遠端管理' 有關的指令類型，
在使用遠端儲存庫時要執行的第一個指令。

這個指令類型允許您將遠端儲存庫的內容複製到本地設備，
同時創建本地設備和遠端儲存庫之間的連接。

通常情況下，複製成功的遠端儲存庫會被 Git 命名為 'origin'，
這些連接的遠端儲存庫會有一個別名，對應著遠端儲存庫的網址。"
GameManualItem/content/git clone/commandDetail/1,git clone <color=#CF001C>remote_repository_URL</color>
GameManualItem/content/git clone/commandDetail/1/use,將遠端儲存庫的內容複製到本地設備中。
GameManualItem/content/git clone/commandDetail/1/scenario,"1. 準備開始使用遠端儲存庫進行開發時。
2. 需要在新的設備上繼續專案開發時。"
GameManualItem/content/git clone/commandDetail/1/example,"當使用者 A 在 Git 服務平台（例如：GitHub、GitLab 等）上
創建了一個新的遠端儲存庫（例如：https://github.com/user/New-Project.git）。

如果要在自己的本地設備上開發專案時，
可以執行以下指令："
GameManualItem/content/git clone/commandDetail/1/exampleBox,git clone <color=#CF001C>https://github.com/user/New-Project.git</color>
GameManualItem/content/git clone/commandDetail/1/hint,"1. 確認當前命令行的路徑：
當執行此指令後，
Git 會在命令行路徑下創建一個與遠端儲存庫相同名稱的資料夾。
資料夾內包含了遠端儲存庫的所有檔案。

2. 了解指令執行失敗的原因：
指令執行失敗的原因可能是：
        1. 網路連接問題
        2. 權限問題
        3. 當前路徑的狀態

如果想要避免 '當前路徑的狀態' 造成指令執行失敗。
請您確保當前路徑中不包含與遠端儲存庫同名的資料夾，
並且該資料夾內容為空。"