Common/None,None
SelfLeaderboard/TitleText,Personal Best Records
SelfLeaderboard/ClearTimesText,-  Clear times:
StageIntroductionPanel/Title,Stage Introduction
StageIntroductionPanel/StageOverviewTitle,Stage Overview
StageIntroductionPanel/StageObjectivesTitle,Stage Objectives
ModeSelectionPanel/Title,Mode Selection
ModeSelectionPanel/TutorialModeButton,Tutorial Mode
ModeSelectionPanel/PracticeModeButton,Practice Mode
ModeSelectionPanel/BackToStageSelectionButton,Back to Stage Selection
ModeSelectionPanel/PlayThisStage,Play This Stage
TooltipMessage/TutorialModeDescription,"In Tutorial Mode,
the instructional text will guide you
to accomplish the main objectives in simulated scenarios."
TooltipMessage/PracticeModeDescription,"In Practice Mode,
you are required to achieve the main objectives in simulated scenarios independently.
(Note: You must clear the Tutorial Mode first.)"
StageIntroductionPanel/StageOverview/Game Introduction,"The 'Game Introduction' stage is your starting place in this Git tutorial game.
In this stage, you will be introduced to the basic gameplay and rules of the game. 
You will get familiar with the game's basic operations and interface by using the 'file backup' method."
StageIntroductionPanel/StageObjective/Game Introduction,"1. Understand the game interface and operations by the actual game play.
2. Get familiar with the game environment and gameplay using the 'file backup' method."
StageIntroductionPanel/StageOverview/Version Control and Git,"In this stage, you will learn the basics of version control and Git. 
This stage will focus on:
What are version control and Git? And the benefits of using them.
This stage does not include practical operations, 
but there is a quiz at the end to review the learning content."
StageIntroductionPanel/StageObjective/Version Control and Git,"1. Review the previous stage and point out the issues caused by 'file backup.'
2. Understand the basic concept of version control and its advantages.
3. Learn what Git is and the benefits of using it.
4. Deepen your understanding of version control and Git by taking a quiz."
StageIntroductionPanel/StageOverview/Create Local Repository,"In this stage, you will learn how to use the command line interface to create your first Git local repository.
Follow the text tutorial and practical actions, 
learn how to control the command line interface, execute Git commands, and understand the components of Git and its workflow."
StageIntroductionPanel/StageObjective/Create Local Repository,"1. Learn to open and use the command line interface.
2. Understand and execute the 'git --version' command to check the installation and version of Git.
3. Execute the 'git init' command to create a new Git repository in a specified directory.
4. Understand the role and composition of the '.git' folder."
StageIntroductionPanel/StageOverview/Basic Staging Area,"In this stage, you will learn the basic operations of the Git Staging Area. 
This stage will further get to know the structure of the Staging Area. 
And use Git commands to view the contents of the Staging Area and control the staging status of files."
StageIntroductionPanel/StageObjective/Basic Staging Area,"1. Understand the role and importance of the Staging Area in the Git workflow.
2. Learn to use the 'git status' command to view the status of the Staging Area.
3. Become familiar with using the 'git add' command to add files to the Staging Area.
4. Understand how to use the 'git reset' command to remove files from the Staging Area."
StageIntroductionPanel/StageOverview/Advanced Staging Area,"In this stage, you will learn advanced operations of the Git Staging Area. 
This stage will teach you how to add parameters before commands for more efficient management of the file staging status.
You will learn how to move files of a folder at once and move all files in the command line path."
StageIntroductionPanel/StageObjective/Advanced Staging Area,"1. Learn to add parameters to 'git add' and 'git reset' commands for more efficient operation of the Staging Area.
2. Understand the high flexibility of Git commands in the process."
StageIntroductionPanel/StageOverview/Creating First Version,"In this stage, you will learn the process of creating Git commits.
In previous stages, you have already learned how to add files to the staging area. 
This time, you will push these contents into the commit history and understand the contents of it."
StageIntroductionPanel/StageObjective/Creating First Version,"1. Use 'git add' and 'git reset' commands to add or remove files from the staging area.
2. Learn to use the 'git commit' command to commit changes.
3. Understand the importance of commit messages and learn how to write meaningful messages.
4. Use 'git status' and 'git log' to view the status of the staging area and commit history."
StageIntroductionPanel/StageOverview/Switching Project Versions,"In this stage, you will learn how to use the 'git checkout' command to switch different commit versions.
And learn how to check the commit history, and move HEAD to other commits. 
During the process, you will encounter situations while switching versions."
StageIntroductionPanel/StageObjective/Switching Project Versions,"1. Get familiar with the structure of commit history.
2. Learn to use 'git checkout commit_ID' to switch to different commits.
3. Understand the concept and impact of 'Detached HEAD'.
4. Learn how to use 'git checkout branch_name' to switch HEAD back to a specified branch."
StageIntroductionPanel/StageOverview/Git Branching Basics,"In this stage, you will learn the basic operations and management skills of Git branches. 

This stage will introduce the benefits of using the branch system 
and learn branch-related commands through scenarios. 

The scenario will include actions like:
creating, viewing, switching, and deleting branches."
StageIntroductionPanel/StageObjective/Git Branching Basics,"1. Introduce the importance and benefits of branch management in projects.
2. Learn to use the 'git branch' command for branch management, adding parameters for using more features.
3. Practice using 'git checkout' to switch branches.
4. Verify the importance of branch management in project development through practical operations."
StageIntroductionPanel/StageOverview/Fast-Forward Merging,"In this stage, you will learn how to use the 'git merge' command to merge branches. 

You will practice how to merge the development branch back into the main branch, 
and understand what kind of merge mode Git will choose while merging.

This stage will focus on introducing 'Fast-Forward Merge'."
StageIntroductionPanel/StageObjective/Fast-Forward Merging,"1. Practice using the 'git merge' command to merge branches.
2. Understand what Fast-Forward Merge mode is and why Git chooses it.
3. After completing the branch merge, learn to delete branches that are no longer needed."
StageIntroductionPanel/StageOverview/Auto Merging,"In this stage, you will learn how to use the 'git merge' command to merge branches. 

This stage will focus on introducing 'Auto Merge'. 

Understand how Git uses auto merging when the commit history of two branches is not in the same line."
StageIntroductionPanel/StageObjective/Auto Merging,"1. Understand the impact of 'Fast-Forward Merge' and 'Auto Merge' through two branch merges.
2. During the auto-merge process, understand how Git detects the merge conflicts.
3. Merge branches by yourself, and observe the changes in the commit history."
StageIntroductionPanel/StageOverview/Merge Conflicts,"In this stage, you will learn how to solve conflicts during Git merges. 
Understand how Git makes decisions during automatic merges,
and practice identifying and resolving file conflicts that occur when merging different branches."
StageIntroductionPanel/StageObjective/Merge Conflicts,"1. Learn why merge conflicts will happen.
2. Practice manually resolving file conflicts.
3. Practice the process of resolving merge conflicts."
StageIntroductionPanel/StageOverview/Create Remote Repository,"In this stage, you will understand the advantages of using remote repositories. 
Learn how to create remote repositories on platforms like GitHub 
and clone them to your local computer."
StageIntroductionPanel/StageObjective/Create Remote Repository,"1. Understand the role of remote repositories in project management and team collaboration.
2. Create a new remote repository on a Git service platform.
3. Use the 'git clone' command to copy the remote repository to your local computer.
4. Verify the connection of the remote repository to the local project using the 'git remote -v' command."
StageIntroductionPanel/StageOverview/Push to Remote Branches,"In this stage, you will learn how to upload local branches to a remote repository. 
You will experience like:
1. Creating new branches in the local repository, 
2. Updating these local branches. 
3. Using 'git push' to push changes to the remote repository. 
The process includes learning how to create and delete remote branches."
StageIntroductionPanel/StageObjective/Push to Remote Branches,"1. Use the 'git push' command to upload local branches to the remote repository.
2. Learn how to use the 'git push -d' command to delete remote branches."
StageIntroductionPanel/StageOverview/Keep Branches in Sync,"In this stage, you will learn how to use 'git pull' to synchronize content from a remote repository to a local branch. 
You will encounter two common scenarios, requiring you to fetch branches from the remote repository to your local computer."
StageIntroductionPanel/StageObjective/Keep Branches in Sync,"1. Understand why 'git clone' cannot resolve the issues encountered in these scenarios.
2. Use the 'git pull' command to update local branches to the latest version of the remote branches.
3. Learn how to view all remote branches of a repository.
4. Use advanced 'git branch' commands to get the targeted remote branches."
StageIntroductionPanel/StageOverview/Preparation for Merging,"In this stage, you'll learn the necessary checks and preparations 
before merging into the main branch of the remote repository. 
The scenario will follow a process to identify and resolve any potential conflicts, 
making the Pull Request creation process smoother."
StageIntroductionPanel/StageObjective/Preparation for Merging,"1. Ensure that the local development branch and main branch records are consistent with the remote branches.
2. Merge the main branch into the development branch locally and handle potential conflicts.
3. Check that the merged project runs correctly without any issues.
4. Successfully push the merged development branch to the remote repository."
StageIntroductionPanel/StageOverview/Creating a Pull Request,"In this stage, you will learn how to create pull requests on a Git service platform. 
You will play the creator of the pull request in this stage. 
And experience and resolve issues encountered during the process."
StageIntroductionPanel/StageObjective/Creating a Pull Request,"1. Understand what Pull Requests are and their role in team development.
2. Practice filling in and creating pull requests on a Git service platform.
3. Understand the structure of the Pull Request details page.
4. Update the Pull Request based on modification suggestions from team members."
StageIntroductionPanel/StageOverview/Review and Merge Pull Requests,"In this stage, you will play the role of a reviewer. 
You will learn how to review and merge Pull Requests. 
You will examine merge requests from team members, make modification suggestions, and approve the merge after confirming everything is correct."
StageIntroductionPanel/StageObjective/Review and Merge Pull Requests,"1. Learn how to review file changes in Pull Requests.
2. Practice making effective modification suggestions and communicating with developers.
3. Approve the Pull Request after ensuring all modifications are fixed.
4. Merge the Pull Request once all conditions of the Pull Request have been completed."