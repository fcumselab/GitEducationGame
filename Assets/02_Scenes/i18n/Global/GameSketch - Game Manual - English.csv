TooltipMessage/GameManualButton/Unlock,Game Manual
TooltipMessage/GameManualButton/Lock,Lock Window: Game Manual
TooltipMessage/GameManualItem/content/commandDetail/Lock,後面的指令尚未解鎖
GameManualItem/list/IntroGitCommand,Introduction to Git commands
GameManualItem/list/git,git
GameManualItem/list/git init,git init
GameManualItem/list/git status,git status
GameManualItem/list/git add,git add
GameManualItem/list/git reset,git reset
GameManualItem/list/git commit,git commit
GameManualItem/list/git log,git log
GameManualItem/list/git checkout,git checkout
GameManualItem/list/git branch,git branch
GameManualItem/list/git merge,git merge
GameManualItem/list/git clone,git clone
GameManualItem/list/git remote,git remote
GameManualItem/list/git push,git push
GameManualItem/list/git pull,git pull
GameManualItem/list/IntroGame,Gameplay and Objectives
GameManualItem/list/IntroGameScore,Introduction to Game Score
GameManualItem/list/IntroGetPerfect,How to Complete Objectives Perfectly
GameManualItem/list/IntroAssistance,Assistance Features
GameManualItem/list/IntroGameManual,Window Introduction: Game Manual
GameManualItem/list/IntroFileManager,Window Introduction: File Manager
GameManualItem/list/IntroFileContent,Window Introduction: File Content
GameManualItem/list/IntroResultsScreen,Window Introduction: Results Screen
GameManualItem/list/IntroCommandLine,Window Introduction: Command Line
GameManualItem/list/IntroStagingArea,Window Introduction: Staging Area
GameManualItem/list/IntroCommitHistory,Window Introduction: Commit History
GameManualItem/list/IssuesBackupFile,Issues with the Backup File method
GameManualItem/list/VersionControlAndGit,Version Control and Git
GameManualItem/list/.gitAndGitCoreAreas,.git and Git's Core Areas
GameManualItem/list/ProcessCreateCommit,Process of Creating a Commit
GameManualItem/list/RuleNameBranch,Principles of Naming Branches
GameManualItem/list/RuleCommitMessage,Principles of Commit Messages
GameManualItem/list/DetachedHEAD,Detached HEAD
GameManualItem/list/gitMergeModes,Merge Modes in git merge
GameManualItem/list/ResolveMergeConflict,Resolving Merge Conflicts
GameManualItem/list/CheckBeforeMergeMainBrach,Preparation Before Merging into the Main Remote Branch
GameManualWindow/content/DefaultContent,"點擊左方列表
來觀看教學內容"
GameManualItem/content/common/windowTitle,視 窗 介 紹E
GameManualItem/content/common/knowledgeTitle,Knowledge Introduction
GameManualItem/content/common/errorMsgTitle,錯誤操作提示訊息
GameManualItem/content/common/commandTitle,Introduction to command type
GameManualItem/content/common/commandDetailedTitle,Command format
GameManualItem/content/common/command/use,Purpose
GameManualItem/content/common/command/scenario,Scenarios
GameManualItem/content/common/command/example,Example
GameManualItem/content/common/command/hint,Points to note about the command
GameManualItem/content/common/tipTitle,Tip:
GameManualWindow/Title,Game Manual
GameManualWindow/CategoryButton/Command,Commands
GameManualWindow/CategoryButton/RuleAndWindow,Rule and Window
GameManualWindow/CategoryButton/VersionControl,Version Control
GameManualWindow/ListTitle/Command,Git 指 令 列 表
GameManualWindow/ListTitle/RuleAndWindow,遊 戲 規 則 與 視 窗 教 學 列 表
GameManualWindow/ListTitle/VersionControl,版 本 控 制 教 學 列 表
GameManualItem/content/git/1,"<color=#CF001C>git</color> is one of the most basic command types in Git.

When executing Git commands, you need to add <color=#CF001C>git</color> in the first command field,
and then add other command types (e.g., init, add) in the second field.

For the <color=#CF001C>git</color> command type, you can execute it with just one field of command.
It can also add other parameters in front of the command to perform different operations.

Typically, the <color=#CF001C>git</color> command can be used in the following scenarios:
1. To check the current version of the Git on your computer.
2. To understand the available Git commands and the purpose of each command."
GameManualItem/content/git/commandDetail/1,git <color=#CF001C>-h or --help</color>
GameManualItem/content/git/commandDetail/1/use,"To understand a brief explanation of all available Git commands.
In addition to executing this command,
you can also get more detailed from the official Git website."
GameManualItem/content/git/commandDetail/1/scenario,"1. When needing to review content you learned before.
2. When looking up the usage method for a specific command."
GameManualItem/content/git/commandDetail/1/example,"When User A encounters a problem using Git, 
execute the following command for help:"
GameManualItem/content/git/commandDetail/1/exampleBox,git <color=#CF001C>--help</color>
GameManualItem/content/git/commandDetail/1/hint,"In this game, detailed explanations of each command are included in the game manual.
If you want to learn more about a specific command,
please click the game manual button or execute this command to open the manual."
GameManualItem/content/git/commandDetail/2,git <color=#CF001C>-v or --version</color>
GameManualItem/content/git/commandDetail/2/use,"To check the current version of the Git system used on your computer, 
and confirm whether the system has been installed."
GameManualItem/content/git/commandDetail/2/scenario,"1. Before starting to use Git to manage a project.
2. When needing to confirm whether the Git system is installed on the computer."
GameManualItem/content/git/commandDetail/2/example,"When User A wants to use Git to manage a project,
execute the following command to confirm whether Git is installed:"
GameManualItem/content/git/commandDetail/2/exampleBox,git <color=#CF001C>--version</color>
GameManualItem/content/git/commandDetail/2/hint,"There are no special things to notice, only need to follow the basic Git command input rules.
please refer to the 'Introduction to Git commands' in the game manual."
GameManualItem/content/git init/1,"<color=#CF001C>git init</color> is one of the most basic command types in Git.

When you want to start using Git to manage your project,
<color=#CF001C>git init</color> will be the first command you need to execute.

Execution successfully, a hidden folder named <color=#CF001C>.git</color> will be created in the file path you specify.
This folder is the core of the Git management system, storing the records of the project.
Without this folder, most Git commands will not work."
GameManualItem/content/git init/commandDetail/1,git init
GameManualItem/content/git init/commandDetail/1/use,To create a <color=#CF001C>.git</color> hidden folder in the path where the command line is located.
GameManualItem/content/git init/commandDetail/1/scenario,1. When you want to start using Git to manage a project.
GameManualItem/content/git init/commandDetail/1/example,"When User A is preparing to use Git to manage a project,
after selecting the project path to manage, execute the following command:"
GameManualItem/content/git init/commandDetail/1/exampleBox,git init
GameManualItem/content/git init/commandDetail/1/hint,"<b>1. Ensure the correct path when executing the command:</b>
     When you execute <color=#CF001C>git init</color>,
     Git will create a <color=#CF001C>.git</color> folder in the path where the command line is located.

     Make sure this path matches the project you want to manage,
     to avoid unnecessary confusion and trouble."
GameManualItem/content/git status/1,"<color=#CF001C>git status</color> is a command type related to the 'Staging Area'.

With this command,
you can check the current status of the 'Staging Area' in the Git management system.
This helps you understand which files have been staged, which have been modified,
and whether they are ready to be committed."
GameManualItem/content/git status/1/tip,"Use Git in the real scenario, the command execute result will show in the command line window.
In this game, the output is moved into the 'Staging Area' window.
It makes it easier to view the content, and the window's design is similar to the actual output."
GameManualItem/content/git status/commandDetail/1,git status
GameManualItem/content/git status/commandDetail/1/use,Open the 'Staging Area' window and display the current state of the 'Staging Area'.
GameManualItem/content/git status/commandDetail/1/scenario,"1. When you need to check the current status of the 'Staging Area'.
2. After pushing or removing files to the 'Staging Area'.
3. Confirm the staged files and their status before creating a new commit."
GameManualItem/content/git status/commandDetail/1/example,"When User A pushes or removes modified files from the 'Staging Area',
execute the following command to view the status of the files in the area:"
GameManualItem/content/git status/commandDetail/1/exampleBox,git status
GameManualItem/content/git status/commandDetail/1/hint,"<b>1. Cannot update content immediately:</b>
     After executing commands that interact with the 'Staging Area'
     (e.g., git add, git reset, etc.).
     Although the status of the files has changed, can't see the update in the window right away.

     Therefore, after executing these commands,
     please execute the <color=#CF001C>git status</color> command again to view the latest status."
GameManualItem/content/git add/1,"<color=#CF001C>git add</color> is a command type related to the 'Staging Area'.
With this command, files are added content from the working directory to the 'Staging Area'.

After successfully adding files to the 'Staging Area', these files will be marked as 'staged'.
They will be included in the next 'commit' (version record)."
GameManualItem/content/git add/commandDetail/1,git add <color=#CF001C>file_name</color>
GameManualItem/content/git add/commandDetail/1/use,Add specific files to the 'staged' list.
GameManualItem/content/git add/commandDetail/1/scenario,1. When you want to save changes to a specific file as a record.
GameManualItem/content/git add/commandDetail/1/example,"When User A has completed modifications to 'Article_A.txt',
execute the following command to add the file to the 'Staging Area':"
GameManualItem/content/git add/commandDetail/1/exampleBox,git add <color=#CF001C>Article_A.txt</color>
GameManualItem/content/git add/commandDetail/1/hint,"<b>1. Cannot update content immediately:</b>
     After executing the command, can not see the update immediately.
     Please use the <color=#CF001C>git status</color> command to check the latest 'Staging Area' status."
GameManualItem/content/git add/commandDetail/2,git add <color=#CF001C>folder_name</color>
GameManualItem/content/git add/commandDetail/2/use,Add all files in a specified folder to the 'staged' at once.
GameManualItem/content/git add/commandDetail/2/scenario,1. When you want to add all files in a folder to 'staged' at once.
GameManualItem/content/git add/commandDetail/2/example,"When User A wants to add all files in the 'Website_Images' folder to the 'Staging Area' at once.
execute the following command:"
GameManualItem/content/git add/commandDetail/2/exampleBox,git add <color=#CF001C>Website_Images</color>
GameManualItem/content/git add/commandDetail/3,git add <color=#CF001C>.</color>
GameManualItem/content/git add/commandDetail/3/use,Add all files under the command line's current path to the 'staged' at once.
GameManualItem/content/git add/commandDetail/3/scenario,"1. When you want to add all files in the entire working directory to 'staged' at once.
2. When initializing a new Git project for the first time."
GameManualItem/content/git add/commandDetail/3/example,"When User A needs to initialize a new Git project.
Add all files in the working directory to the 'Staging Area'.
User A can execute the following command:"
GameManualItem/content/git add/commandDetail/3/exampleBox,git add <color=#CF001C>.</color>
GameManualItem/content/git reset/1,"'git reset' is a powerful command type.
It covers areas such as the 'Staging Area' and 'Commit History'.

In project development, if you don't want to add some files to the 'Staging Area',
you can use this command to move files from the 'staged' area back to the 'unstaged' area."
GameManualItem/content/git reset/commandDetail/1,git reset <color=#CF001C>file_name</color>
GameManualItem/content/git reset/1/tip,"Use Git in actual scenarios,
<color=#CF001C>git reset</color> not only has the function above but also deletes commits in the 'Commit History'.
However, considering the irreversibility and complexity of deleting commits,
this game removes the 'delete commit' feature to ensure learning quality."
GameManualItem/content/git reset/commandDetail/1/use,To move specified files from the 'staged' area back to the 'unstaged' area.
GameManualItem/content/git reset/commandDetail/1/scenario,1. When you do not want to put modified files into the 'Staging Area'.
GameManualItem/content/git reset/commandDetail/1/example,"When User A accidentally pushes an important file to the 'Staging Area',
execute the following command to move it back to the 'unstaged' area:"
GameManualItem/content/git reset/commandDetail/1/exampleBox,git reset <color=#CF001C>Secret_Document.txt</color>
GameManualItem/content/git reset/commandDetail/1/hint,"<b>1. Cannot update content immediately:</b>
     After executing the command, can not see the update immediately.
     Please use the <color=#CF001C>git status</color> command to check the latest 'Staging Area' status."
GameManualItem/content/git reset/commandDetail/2,git reset <color=#CF001C>folder_name</color>
GameManualItem/content/git reset/commandDetail/2/use,Move all files in a specified folder from the 'staged' area back to the 'unstaged' area.
GameManualItem/content/git reset/commandDetail/2/scenario,1. When you want to move all files in a specific folder back to the 'unstaged' area at once.
GameManualItem/content/git reset/commandDetail/2/example,"When User A does not want to commit large files in a folder to the 'Staging Area',
execute the following command to move them back to the 'unstaged' area:"
GameManualItem/content/git reset/commandDetail/2/exampleBox,git reset <color=#CF001C>Uncompressed_Images</color>
GameManualItem/content/git reset/commandDetail/3,git reset <color=#CF001C>.</color>
GameManualItem/content/git reset/commandDetail/3/use,"Move all files under the command line's current path 
from the 'staged' area back to the 'unstaged' area."
GameManualItem/content/git reset/commandDetail/3/scenario,1. When you want to move all files in the entire project back to the 'unstaged' area at once.
GameManualItem/content/git reset/commandDetail/3/example,"When User A needs to move multiple folders' files back to the 'unstaged' area at once,
execute the following command:"
GameManualItem/content/git reset/commandDetail/3/exampleBox,git reset <color=#CF001C>.</color>
GameManualItem/content/git commit/1,"<color=#CF001C>git commit</color> is a command type related to 'Commit History'.

This command integrates modifications in the 'Staging Area' into a new 'commit',
and stores it in the 'Commit History' area of the 'Repository'.

To successfully execute <color=#CF001C>git commit</color>, the following two conditions must be achieved:
1. At least one file has already been added to the 'Staging Area'.
2. Provide a concise and meaningful commit message.

This command helps developers organize their work,
allowing better tracking of different version changes and their purposes."
GameManualItem/content/git commit/commandDetail/1,"git commit <color=#CF001C>-m or --message</color> <color=""#173D91"">""commit message""</color>"
GameManualItem/content/git commit/commandDetail/1/use,"To integrate modifications in the 'Staging Area' into a new 'commit',
while providing a commit message to explain the changes."
GameManualItem/content/git commit/commandDetail/1/scenario,1. When you have decided to save modifications in the 'Staging Area' as a 'commit'.
GameManualItem/content/git commit/commandDetail/1/example,"User A recently developed a new feature, and added the files to the 'Staging Area',
Executed the following command to create a new 'commit':"
GameManualItem/content/git commit/commandDetail/1/exampleBox,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""Added search keyword feature.""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/1,"<b>1. The commit message should be enclosed in double quotes (""):</b>
     Git commands use spaces to separate different command fields.
     Using double quotes ensures the commit message is seen as one command field.

<b>2. The commit message should be specific and clear:</b>
     To let people quickly understand the content and purpose of each 'commit',
     please ensure that the commit message you fill in is specific and clear.

<b>3. How to quickly fill in a commit message in this game:</b>
     This game provides a way to quickly fill in commit messages,
     please follow these steps to execute the correct command:
"
GameManualItem/content/git commit/commandDetail/1/hint/2,        1. Enter the following command in the command line:
GameManualItem/content/git commit/commandDetail/1/hint/3,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/4,"        2. Press the Tab key or the search feature button to open the commit message selection window.
        3. Choose the most suitable commit message option from the selection window.
        4. After selection, the commit message will automatically fill into the command."
GameManualItem/content/git commit/commandDetail/1/hint/5,"     Following the above steps,
     you can easily execute the <color=#CF001C>git commit</color> command and submit your modifications."
GameManualItem/content/git log/1,"'git log' is a widely used command type.
It related to the 'Commit History', 'Branch Management', and 'Remote Management'.

The primary function of this command type is 
to let you understand the 'Commit History' status in the current Git management system.

'Commit History' is an area in the 'Repository' used to store all 'commits' of a project."
GameManualItem/content/git log/1/tip,"In actual use of Git, the 'Commit History' status is displayed in the command line window.
This game integrates the output content into the 'Commit History' window.
This makes it easier to view content, and the window's design is similar to the actual output.
It also integrates different output results of 'git log' parameters."
GameManualItem/content/git log/commandDetail/1,git log
GameManualItem/content/git log/commandDetail/1/use,Open the 'Commit History' window and display the current 'Commit History' status.
GameManualItem/content/git log/commandDetail/1/scenario,"1. When you want to check the current status of 'Commit History'.
2. After creating a new 'commit'.
3. After switching to another 'commit'.
4. To view the status of local repository branches.
5. To view the status of remote repository branches."
GameManualItem/content/git log/commandDetail/1/example,"When User A completes a new feature and successfully commits it,
they can execute the following command to view the current 'Commit History' status:"
GameManualItem/content/git log/commandDetail/1/exampleBox,git log
GameManualItem/content/git log/commandDetail/1/hint/1,"1. Cannot update content immediately:
When executing commands that affect 'Commit History'
(e.g., git commit, git checkout, etc.).
Although the command is successfully executed, you cannot immediately see the update in the window.

Therefore, after executing these commands,
use 'git log' again to check the latest status.

2. Design of the 'Commit History' Window:
In this game, the output results of the 'git log' command
are integrated into a window named 'Commit History'.

In actual use of Git, you need to enter the following command to achieve the same effect:"
GameManualItem/content/git log/commandDetail/1/hint/2,"git log <color=#CF001C>--oneline</color> <color=""#173D91"">--all</color> <color=#244B0E>--graph</color>"
GameManualItem/content/git log/commandDetail/1/hint/3,"The functions of these parameters are as follows:
'--oneline' only displays 'commit ID' and 'commit message'.
'--all' displays 'Commit History' of all branches.
'--graph' displays relationships between 'commits' graphically."
GameManualItem/content/git checkout/1,"'git checkout' is a widely used command type.
It is related to 'Commit History' and 'Branch Management'.

This command allows you to switch between different 'commits' and 'branches',
and also synchronizes the file contents in the 'Working Directory'."
GameManualItem/content/git checkout/commandDetail/1,git checkout <color=#CF001C>commit_ID</color>
GameManualItem/content/git checkout/commandDetail/1/use,"Move HEAD to a specified 'commit', restoring the project to that commit's version."
GameManualItem/content/git checkout/commandDetail/1/scenario,"1. To check the changes in different 'commits'.
2. To fix errors found in the latest version.
3. To revert to a previous version and discard the content of the new version."
GameManualItem/content/git checkout/commandDetail/1/example,"When User A needs to return to a previous version to check the place cause of an error.
After confirming the specific commit ID (e.g., '123abc').
They can execute the following command:"
GameManualItem/content/git checkout/commandDetail/1/exampleBox,git checkout <color=#CF001C>123abc</color>
GameManualItem/content/git checkout/commandDetail/1/hint,"1. After viewing, return to the correct branch to continue development:
When HEAD points to a 'commit', rather than a 'branch',
This is called the 'detached HEAD' state.
In this state, new 'commits' are not created on any branch.
This could lead to the loss of 'commits'.

To maintain project management, after viewing the content,
please use the 'git checkout branch_name' command to re-point HEAD to a branch."
GameManualItem/content/git checkout/commandDetail/2,git checkout <color=#CF001C>branch_name</color>
GameManualItem/content/git checkout/commandDetail/2/use,"Point HEAD to a specified 'branch'.
HEAD will move to the latest 'commit' of that branch, allowing you to continue project development."
GameManualItem/content/git checkout/commandDetail/2/scenario,"1. To continue development on a specific branch.
2. When preparing to perform branch merging operations."
GameManualItem/content/git checkout/commandDetail/2/example,"When User A completes reviewing the previous version's content,
and needs to continue development on the 'master' branch.
They can execute the following command:"
GameManualItem/content/git checkout/commandDetail/2/exampleBox,git checkout <color=#CF001C>master</color>
GameManualItem/content/git checkout/commandDetail/2/hint,"1. Be aware of the current branch:
During project development, it's common to develop features on the incorrect branch.
To avoid unnecessary confusion,
please ensure you are on the correct branch before developing features."
GameManualItem/content/git branch/1,"'git branch' is a command type related to 'Branch Management' and 'Remote Management'.

This command performs various branch management operations,
including viewing, adding, deleting, etc.

Additionally, with specific parameters, you can view remote branches in the remote repository.
It is often used in combination with the 'git checkout' command type."
GameManualItem/content/git branch/commandDetail/1,git branch
GameManualItem/content/git branch/commandDetail/1/use,"To view the names of all local branches in the current local repository.
It also displays the current HEAD locate in which 'branch' or 'commit'."
GameManualItem/content/git branch/commandDetail/1/scenario,"1. To confirm the current location of HEAD.
2. To view which local branches are in the repository."
GameManualItem/content/git branch/commandDetail/1/example,"When User A needs to view all branches in the local repository,
and which branch HEAD is currently on.
They can execute the following command:"
GameManualItem/content/git branch/commandDetail/1/exampleBox,git branch
GameManualItem/content/git branch/commandDetail/1/hint,"1. Difference from the 'git log' command:
Although both commands can view branches, their purposes are different.
'git branch' is used to view all branches in the repository,
'git log' is used to view the 'Commit History' of branches."
GameManualItem/content/git branch/commandDetail/2,git branch <color=#CF001C>branch_name</color>
GameManualItem/content/git branch/commandDetail/2/use,"To create a new local branch.
This branch will be based on the current HEAD's 'commit',
and will contain all older commits before it."
GameManualItem/content/git branch/commandDetail/2/scenario,"1. When needing to fix an issue in a project.
2. When needing to develop new features in a project."
GameManualItem/content/git branch/commandDetail/2/example,"When User A needs to develop a new feature in the project,
they can execute the following command to create a new branch:"
GameManualItem/content/git branch/commandDetail/2/exampleBox,git branch <color=#CF001C>new-feature</color>
GameManualItem/content/git branch/commandDetail/2/hint,"1. After creating a branch, switch to that branch:
This command is only used to create branches.
To develop on the newly created branch,
please use the 'git checkout' command to switch to that branch.

2. The branch name should be specific and clear:
To help yourself and your team quickly understand the content and purpose of the branch,
please ensure the branch name is specific and clear."
GameManualItem/content/git branch/commandDetail/3,"git branch <color=#CF001C>-d or --delete</color> <color=""#173D91"">branch_name</color>"
GameManualItem/content/git branch/commandDetail/3/use,To delete a specified local branch from the local repository.
GameManualItem/content/git branch/commandDetail/3/scenario,When the branch has been completed its goal and merged into the main branch.
GameManualItem/content/git branch/commandDetail/3/example,"When User A has merged the feature development branch into the main branch,
they can execute the following command to delete the branch:"
GameManualItem/content/git branch/commandDetail/3/exampleBox,"git branch <color=#CF001C>-d</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git branch/commandDetail/3/hint,"1. Before deleting a branch, ensure HEAD has moved to another location:
To successfully execute the delete branch command,
please ensure HEAD is moved to another branch or commit."
GameManualItem/content/git branch/commandDetail/4,git branch <color=#CF001C>-r or --remote</color>
GameManualItem/content/git branch/commandDetail/4/use,"To view the names of all remote branches, which are named in the format:
'remote_repository_alias/branch name'."
GameManualItem/content/git branch/commandDetail/4/scenario,1. When you need to know the names of remote branches in the remote repository.
GameManualItem/content/git branch/commandDetail/4/example,"When User A wants to know the remote branch names developed by User B,
they can execute the following command:"
GameManualItem/content/git branch/commandDetail/4/exampleBox,git branch <color=#CF001C>-r</color>
GameManualItem/content/git branch/commandDetail/4/hint,"1. Difference from the 'git branch' command:
Although both commands can view branch names, their purposes are different.
'git branch' is used to view local branches,
'git branch -r' is used to view all remote branch names."
GameManualItem/content/git branch/commandDetail/5,"git branch <color=#CF001C>local_branch_name</color> <color=""#173D91"">remote_branch_name</color>"
GameManualItem/content/git branch/commandDetail/5/use,"Copy the 'commit history' of a specified remote branch 
to a newly created local branch, then connect together."
GameManualItem/content/git branch/commandDetail/5/scenario,"1. When you need to get a specific branch from a remote repository. 
2. When you need to view other developers' or your own remote branches."
GameManualItem/content/git branch/commandDetail/5/example,"When User A needs to view the development progress of the 'member-branch' created by User B.
They can execute the following command:"
GameManualItem/content/git branch/commandDetail/5/exampleBox,"git branch <color=#CF001C>member-branch</color> <color=""#173D91"">origin/member-branch</color>"
GameManualItem/content/git branch/commandDetail/5/hint,"1. Local branch names should generally match remote branch names:
Normally, local branch names should correspond to remote branches.
This can avoid confusion.

2. Ensure the specified branch name does not exist when executing this command:
Similar to the 'git branch' command, this command creates branches on the local repository.
If the created branch name already exists, the command will stop running."
GameManualItem/content/git merge/1,"'git merge' is an important command type.
It is related to the 'Commit History' and 'Branch Management'.

This command performs branch merging operations.
'Moving the changes from one branch to another'. 
This action was called 'merging'.

During the merging process,
Git automatically selects the merging mode based on the 'commit history' of the two target branches.
There are three types of merging modes:
1. Fast-Forward Merge
2. Auto Merge
3. Merge Conflict

For detailed explanations of these merge modes,
please refer to the 'Merge Modes in git merge' in the game manual."
GameManualItem/content/git merge/commandDetail/1,git merge <color=#CF001C>branch_name</color>
GameManualItem/content/git merge/commandDetail/1/use,"Merge the targeted branch into the current branch,
let the current branch get all 'commit history' from the targeted branch."
GameManualItem/content/git merge/commandDetail/1/scenario,"1. When preparing to merge a completed branch into the main branch.
2. One of the steps in confirming the merging process before creating a Pull Request."
GameManualItem/content/git merge/commandDetail/1/example,"When User A completes development on the 'new-feature' branch,
and wants to merge its contents into the 'master' branch.
They can switch to the 'master' branch and execute the following command:"
GameManualItem/content/git merge/commandDetail/1/exampleBox,git merge <color=#CF001C>new-feature</color>
GameManualItem/content/git merge/commandDetail/1/hint,"1. Confirm the current branch:
Before performing the merge, ensure the current branch is correct.
To avoid merging into the wrong branch and causing unnecessary issues.

2. Confirm the roles of the specified branch and the current branch:
Merging branch A into branch B may result differently from merging branch B into branch A.

Therefore, before starting the merge. 
Please determine the roles of both branches first to avoid merging into the wrong branch."
GameManualItem/content/git clone/1,"'git clone' is a command type related to 'Remote Management'.
It is the first command to execute when using a remote repository.

This command type allows you to copy the contents of a remote repository to your local device, 
and create a connection between your local device and the remote repository.

Typically, a successfully cloned remote repository is named 'origin' by Git.
These connected remote repositories have an alias, which corresponds to the remote repository's URL."
GameManualItem/content/git clone/commandDetail/1,git clone <color=#CF001C>remote_repository_URL</color>
GameManualItem/content/git clone/commandDetail/1/use,Copy the contents of a remote repository into your local device.
GameManualItem/content/git clone/commandDetail/1/scenario,"1. When preparing to start development using a remote repository.
2. When needing to continue project development on a new device."
GameManualItem/content/git clone/commandDetail/1/example,"When User A creates a new remote repository (e.g., https://github.com/user/New-Project.git) 
on a Git service platform (such as GitHub, GitLab, etc.).

To develop the project on their local device,
they can execute the following command:"
GameManualItem/content/git clone/commandDetail/1/exampleBox,git clone <color=#CF001C>https://github.com/user/New-Project.git</color>
GameManualItem/content/git clone/commandDetail/1/hint,"1. Confirm the current command line path:
After executing this command,
Git will create a folder with the same name as the remote repository in the command line path.
The folder contains all files from the remote repository.

2. Understand the reasons for command execution failure:
The reasons for command execution failure might include:
        1. Network connection issues.
        2. Permission issues.
        3. The status of the current path.

To avoid failure due to 'the status of the current path',
please ensure that there is no folder in the current path with the same name as the remote repository and that the folder is empty."
GameManualItem/content/git remote/1,"'git remote' is a command type related to 'Remote Management'.

This command is used to confirm whether a project is connected to other remote repositories,
and display the URLs and aliases of the connected remote repositories.

In actual use of Git,
this command can also be used to add or delete connections with other remote repositories."
GameManualItem/content/git remote/commandDetail/1,git remote <color=#CF001C>-v or --verbose</color>
GameManualItem/content/git remote/commandDetail/1/use,"Confirm whether the local project has established connections with other remote repositories,
and display the URLs and aliases of the connected repositories."
GameManualItem/content/git remote/commandDetail/1/scenario,1. When you need to confirm the current project's remote connection status.
GameManualItem/content/git remote/commandDetail/1/example,"When User A has successfully cloned a remote repository from a Git service platform to their local device.
To confirm if it is correctly connected to the corresponding remote repository,
they can execute the following command:"
GameManualItem/content/git remote/commandDetail/1/exampleBox,git remote <color=#CF001C>-v</color>
GameManualItem/content/git remote/commandDetail/1/hint,"1. No response when not connected to any remote repository:
If the project has not established a connection with other remote repositories yet.
Executing this command will not return any message."
GameManualItem/content/git push/1,"'git push' is a command type related to 'Remote Management'.

This command is used to upload the contents of a local branch to a specified remote repository,
and the remote repository creates and updates the corresponding remote branch."
GameManualItem/content/git push/commandDetail/1,"git push <color=#CF001C>remote_repository_alias</color> <color=""#173D91"">local_branch_name</color>"
GameManualItem/content/git push/commandDetail/1/use,"Upload a targeted local branch to a targeted remote repository.
It will create a remote branch with the same name in the remote repository.
And synchronize the 'commit history' of the local branch."
GameManualItem/content/git push/commandDetail/1/scenario,"1. When a part of the feature is completed.
2. When needing to backup the contents of a local branch.
3. When the feature has been fully developed."
GameManualItem/content/git push/commandDetail/1/example,"When User A has completed a feature on the 'new-feature' branch
and wants to upload the branch contents to the remote repository.
They can execute the following command:"
GameManualItem/content/git push/commandDetail/1/exampleBox,"git push <color=#CF001C>origin</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git push/commandDetail/1/hint,"1. Confirm the name of the remote repository:
In common project development, we only need one connected remote repository, which is named 'origin' in Git.

However, if you are connected to multiple remote repositories.
Before uploading changes, 
please use the 'git remote -v' command to check the correct remote repository name."
GameManualItem/content/git push/commandDetail/2,"git push <color=#CF001C>-d or --delete</color> <color=""#173D91"">remote_repository_alias</color> <color=#244B0E>local_branch_name</color>"
GameManualItem/content/git push/commandDetail/2/use,Delete a targeted remote branch in the targeted remote repository.
GameManualItem/content/git push/commandDetail/2/scenario,1. When a targeted remote branch has already been merged into the main remote branch.
GameManualItem/content/git push/commandDetail/2/example,"When User A created a Pull Request,
it has successfully merged the 'new-feature' branch into the remote 'master' branch.
They can execute the following command to delete the remote branch:"
GameManualItem/content/git push/commandDetail/2/exampleBox,"git push <color=#CF001C>-d</color> <color=""#173D91"">origin</color> <color=#244B0E>new-feature</color>"
GameManualItem/content/git push/commandDetail/2/hint,"1. Confirm the name of the remote repository:
In common project development, we only need one connected remote repository, which is named 'origin' in Git.

However, if you are connected to multiple remote repositories.
Before deleting the branch,
please use the 'git remote -v' command to check the correct remote repository name."
GameManualItem/content/git pull/1,"'git pull' is a command type related to 'Remote Management'.

This command is used to synchronize your local branch with the branch in the remote repository.
To ensure that your local branch remains up-to-date.

When executing this command, it performs the following two operations in sequence:
1. Download the latest 'commit history' from the remote repository.
2. Merge these new 'commits' into your local branch.

The second operation is similar to the feature of the 'git merge' command,
where Git automatically chooses one of the merge modes based on the differences between the branches."
GameManualItem/content/git pull/commandDetail/1,"git pull <color=#CF001C>remote_repository_alias </color> <color=""#173D91"">branch_name</color>"
GameManualItem/content/git pull/commandDetail/1/use,Synchronize the current local branch with the targeted remote branch in the targeted remote repository.
GameManualItem/content/git pull/commandDetail/1/scenario,"1. When needing to develop the project on other local devices.
2. One of the steps in confirming the merging process before creating a Pull Request."
GameManualItem/content/git pull/commandDetail/1/example,"When User A needs to develop the project on another device,
and the local repository has not been updated for a long time.
They can execute the following command to update the local 'new-feature' branch:"
GameManualItem/content/git pull/commandDetail/1/exampleBox,"git pull <color=#CF001C>origin</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git pull/commandDetail/1/hint,"1. Confirm the name of the remote repository:
In common project development, we only need one connected remote repository, which is named 'origin' in Git.

However, if you are connected to multiple remote repositories.
Before updating content,
please use the 'git remote -v' command to check the correct remote repository name.

2. Ensure you are on the correct branch:
Before executing this command, please ensure you are on the correct branch.
If you execute 'git pull origin new-feature' while on the 'master' branch,
the 'master' branch will receive the 'commit history' of the remote 'new-feature'.
This could cause unnecessary confusion."
GameManualItem/content/IntroGameManual/1,"The Game Manual can help you review the content you have learned previously in the game. 
You can open and view its contents at any time during the stage selection screen or while playing a stage.

If you encounter difficulties in the game and can't solve the current challenges,
the Game Manual can provide hints and solutions.

As you play new stages, new knowledge will be unlocked and added to it. 
The knowledge is divided into three main themes:

<b>1. Git Commands:</b>
     All Git commands learned in the game are categorized under this section.
     It includes the usage, scenarios, and things that need to be noticed for each command.

<b>2. Game Rules and Windows:</b>
     This category includes the game's systems, windows, and rules. 
     If need to review the feature in the game, you can learn from this category.

<b>3. Version Control:</b>
     This section contains knowledge and concepts about version control and Git.

When you have completed a stage in the game and want to review the knowledge learned previously, you can open the Game Manual for review.
Or you can select the stage you want to review directly from the stage selection screen for practical exercises."
GameManualItem/content/IntroGameManual/2/Title,Knowledge item in the manual
GameManualItem/content/IntroGameManual/2,"In the Game Manual, the contents under each category are listed on the left side. 
You can click the category buttons in the upper left corner to view the knowledge list in each category.

The knowledge list has three different icons:

<b>1. Locked knowledge, which can be unlocked by playing new stages:</b>"
GameManualItem/content/IntroGameManual/3,<b>2. Unlocked knowledge:</b>
GameManualItem/content/IntroGameManual/4,<b>3. Unlocked knowledge that may used at the current stage:</b>
GameManualItem/content/IntroGameManual/5,"     This feature is especially helpful for the 'Git Commands' category.
     It can help you determine which commands will be used at the current stage."
GameManualItem/content/IntroFileContent/1,"The File Content window simulates a document editing tool in an actual computer.
It allows you to edit the contents of a specified document.

This window has the following features:
1. Add content
2. Modify content of specific lines
3. Delete content of specific lines
4. Rename the current file"
GameManualItem/content/IntroFileContent/2/Title,Title bar introduction
GameManualItem/content/IntroFileContent/2,"<b>Left text:</b> The name of the current document being edited.
<b>Right pencil icon:</b> Button to rename the file."
GameManualItem/content/IntroFileContent/3/Title,File content area
GameManualItem/content/IntroFileContent/3,"After opening a specified file, its content will be displayed in this area. 

Structure in each line: 
<b>·Left pencil button:</b> Modify this content in this line.
<b>·Middle text:</b> The text content in this line.
<b>·Right X button:</b> Delete this line.

Besides, there is a <color=#CF001C>+</color> button at the bottom for adding new content to the file."
GameManualItem/content/IntroFileContent/4,"If you perform an incorrect action during the game,
the system will display an error message here and provide the reason for the error.

To learn how to avoid operation errors,
please refer to 'How to Complete Objectives Perfectly' in the Game Manual."
GameManualItem/content/IntroFileManager/1,"The File Manager window simulates a file explorer system in a real computer.
It displays the contents of the computer in the current simulation background.

In the game, the window will usually remain open.
Because some Git commands require you to enter the names of specific files."
GameManualItem/content/IntroFileManager/2/Title,Toolbar introduction
GameManualItem/content/IntroFileManager/2,"<b>Left button:</b> Return to the previous folder.
<b>Right text box:</b> Displays the current folder location/path (Home is the home page)."
GameManualItem/content/IntroFileManager/3/Title,File type introduction
GameManualItem/content/IntroFileManager/3,"In this game, the files in the File Manager are simply divided into two types.
You can define them based on their icons:

<b>1. Document Type:</b>"
GameManualItem/content/IntroFileManager/4,"     Open the 'File Content' window by clicking the left mouse button.
     Right-clicking on the document icon will open the function menu.

<b>2. Folder Type:</b>"
GameManualItem/content/IntroFileManager/5,"     Click the left mouse button on the target folder to go into it.
     After moving, you can view the contents of the folder."
GameManualItem/content/IntroFileManager/6,"If you perform an incorrect action during the game,
the system will display an error message here and provide the reason for the error.

To learn how to avoid operation errors,
please refer to 'How to Complete Objectives Perfectly' in the Game Manual."
GameManualItem/content/IssuesBackupFile/1,"While backing up files can be a simple and quick way to manage a project.
It can cause many problems over time, 
making the project difficult to manage and negatively impacting development efficiency.

Here are a few common issues:

<b>1. Irrelevant files in project folder:</b>
     To back up files, you must copy and rename them with clear names. 
     Over time, there are many irrelevant files in the folder, making it not easy to manage.

<b>2. Difficulty in finding the difference between versions:</b>
     To understand the modifications made in a particular version, 
     you have to go through the entire file content. 
     When there are serious errors occur during development, 
     it takes a lot of time and effort to locate the source of the error.

<b>3. Modify the wrong files:</b>
     When there are too many irrelevant files in the project, 
     you might accidentally make changes to an old version of a file, 
     it confused the project records.

<b>4. Inconvenience in team development:</b>
     When collaborating with others on a project, 
     the method of file backup can confuse the development process.
     For example, issues like the number of backup files, time spent finding file differences, 
     and how to merge team content.

These are the common problems above.
Managing projects with backup files can lead to many unexpected troubles.

Using Git to manage projects can solve these problems.
It enhances the stability and efficiency of the project.
Allows you to spend more time on project development."
GameManualItem/content/DetachedHEAD/1,"Detached HEAD is a state in Git.
When the current HEAD is positioned at a specific commit, 
rather than on any branch in the Git repository.

This situation usually occurs when we use the following command:"
GameManualItem/content/DetachedHEAD/1/Command,git checkout <color=#CF001C>commit_ID</color>
GameManualItem/content/DetachedHEAD/2,"This command moves the HEAD to the specified commit, HEAD is in a 'Detached HEAD' state.

If new commits are created in this state, they will not belong to any branch. 
These commits not only risk being lost but can also cause management issues in the project.

Therefore, after switching to another commit to view file contents.
If you want to develop new features, please don't forget to switch back to the target branch. 
You can use the following command to switch back to a specific branch:"
GameManualItem/content/DetachedHEAD/2/Command,git checkout <color=#CF001C>branch_name</color>
GameManualItem/content/DetachedHEAD/2/tip,"In the game, when a Detached HEAD situation occurs, 
the HEAD flag icon in the Commit History window will become transparent.
Additionally, the game will remind you that can not commit while in a Detached HEAD state."
GameManualItem/content/.gitAndGitCoreAreas/1/Title,.git folder introduction
GameManualItem/content/.gitAndGitCoreAreas/1,"When you have decided the project you want to manage, 
you need to execute the following command in the project folder path to create the Git management system:"
GameManualItem/content/.gitAndGitCoreAreas/1/Command,git init
GameManualItem/content/.gitAndGitCoreAreas/2,"After execution is successful, 
a hidden folder named <color=#CF001C>.git</color> will be created in the project folder."
GameManualItem/content/.gitAndGitCoreAreas/3,"<color=#CF001C>.git</color> is a core component of Git. 
It stores all data related to the project, including the entire version history. 
Without this folder, most Git commands cannot be executed."
GameManualItem/content/.gitAndGitCoreAreas/4/Title,Git's core areas
GameManualItem/content/.gitAndGitCoreAreas/5,"Git consists of three important areas that help us manage projects using Git:

<b>1. Working Directory:</b>
     The area inside the project folder is known as the working directory, 
     including text, images, and other project files. 
     In the working directory, we add and edit files to develop the project.

<b>2. Staging Area:</b>
     The staging area acts as a bridge between the 'working directory' and the 'repository'. 
     We move modified files from the 'working directory' to this area. 
     Once ready, these files are moved to the 'repository' through a command 
     to create a new 'commit'.

<b>3. Repository:</b>
     The repository is the core area of Git, storing all records of the project. 
     After adding a new commit, it is stored in the 'commit history' area of the 'repository'. 
     This area helps track the version of changes."
GameManualItem/content/.gitAndGitCoreAreas/5/tip,"In fact, the <color=#CF001C>.git</color> folder is actually the 'repository', 
and the 'staging area' is also contained in the folder."
GameManualItem/content/RuleNameBranch/1,"Learning how to name branches is important.
Clear and specific branch names help manage the project more effectively.
And make it easier for the team to understand the purpose of each branch.

Here are some principles for naming branches:

<b>1. Keep it concise and clear:</b>
     The branch name should be simple and clear, 
     containing enough information to describe the purpose of creating the branch."
GameManualItem/content/RuleNameBranch/1/tip,"For example, using <color=#CF001C>fix-login-bug</color> is better than <color=#CF001C>fix-login-bug-in-homepage</color>.
To avoid overly long branch names."
GameManualItem/content/RuleNameBranch/2,"
<b>2. Avoid special symbols, spaces, and other language characters:</b>
     Branch names should avoid special symbols, spaces, and other language characters.
     Ensure the project can be used and read in different language environments.

     Proper naming should use lowercase English letters and
     separate words with hyphens (-) or slashes (/) to enhance readability."
GameManualItem/content/RuleNameBranch/2/tip,For example: <color=#CF001C>new-system-feature</color> or <color=#CF001C>new/system/feature</color>.
GameManualItem/content/RuleNameBranch/3,"
<b>3. Include author's name:</b>
     In team development, include the author's name in the branch name.
     It helps track the development progress of team members and 
     identify the person responsible for the development."
GameManualItem/content/RuleNameBranch/3/tip,For example: <color=#CF001C>john-bugfix-quest</color>.
GameManualItem/content/RuleNameBranch/4,"
<b>4. Add Issue ID:</b>
     In team project, developers often create discussion forums to solve problems. 
     Including the issue ID in the branch name helps track the corresponding issue."
GameManualItem/content/RuleNameBranch/4/tip,For example: <color=#CF001C>pan-3759-trade</color>.
GameManualItem/content/RuleNameBranch/5,"Following these principles for branch naming helps to understand the purpose of each branch. 
If you are part of a team, adhere to the team's branch naming rules to maintain consistency. 
It helps the team better understand and manage branches."
GameManualItem/content/ProcessCreateCommit/1,"When you have completed the development of a specific feature, 
or when you need to back up content in development.
It's time to create a commit in your local repository. 

Here's the process for creating a commit:

<b>1. Determine the files to upload:</b>
     You need to move files to the staging area 
     before you can push the file content to the repository to create a commit. 
     Please use commands to ensure that the staging area contains the files you want to save, 
     while irrelevant files should not be included in the staging area.

<b>2. Write a commit message and create the commit:</b>
     After confirmation, create a commit using the following command:"
GameManualItem/content/ProcessCreateCommit/1/Command,"git commit <color=#CF001C>-m or --message</color> <color=""#173D91"">""commit message""</color>"
GameManualItem/content/ProcessCreateCommit/2,"     The commit message should clearly describe the changes you made. 
     This helps track and understand the purpose of the commit.

     Executing this command means that you have completed the creation of the commit.
     You can also use the following command to verify if the operation was successful:"
GameManualItem/content/ProcessCreateCommit/2/Command,git log
GameManualItem/content/ProcessCreateCommit/3,"
<b>3. Upload the commit to the remote repository (optional):</b>
     After completing the development on your local branch, 
     you can push it to the linked remote repository using the following command:"
GameManualItem/content/ProcessCreateCommit/3/Command,"git push <color=#CF001C>remote_repository_alias</color> <color=""#173D91"">local_branch</color>"
GameManualItem/content/RuleCommitMessage/1,"Learning how to write Git commit messages is very important.
Clear and concise commit messages can better manage a project.
And make it easier for both teams and individuals to understand the purpose of each commit.

Here are some principles for writing commit messages:

<b>1. Keep it short and clear:</b>
     A good commit message should be able to declare the purpose of the commit 
     in one sentence. 
     This helps other developers to quickly understand the changes."
GameManualItem/content/RuleCommitMessage/1/tip,For example: <color=#CF001C>Added structure for web page login interface</color>.
GameManualItem/content/RuleCommitMessage/2,"
<b>2. Use key information:</b>
     Depending on the purpose of the commit, use verbs at the beginning of the message."
GameManualItem/content/RuleCommitMessage/2/tip,"Add verbs like 'Add', 'Update', and 'Delete' to enhance readability. 
For example: <color=#CF001C>Fix error: Welcome message not displayed after login</color>."
GameManualItem/content/RuleCommitMessage/3,"
<b>3. Avoid meaningless messages:</b>
     When writing commit messages, avoid vague or meaningless content.
     It can make it difficult for other developers to understand the purpose of the commit."
GameManualItem/content/RuleCommitMessage/3/tip,"For instance, avoid generic messages like <color=#CF001C>New commit</color> or <color=#CF001C>Fixed error</color>.
These messages are short and lack specific meaning."
GameManualItem/content/RuleCommitMessage/4,"
<b>4. Focus on a single topic:</b>
     Good development practice should focus on a specific goal 
     and include it in the commit message. 
     This not only makes each commit clearer but also reduces development risks."
GameManualItem/content/RuleCommitMessage/4/tip,"For example, if developing Feature A and Feature B at the same time.
But they are not closely related, consider splitting them into two separate commits."
GameManualItem/content/RuleCommitMessage/5,"These principles of commit messages help teams and individuals better understand the purpose of each commit. 
This improves the stability and efficiency of project management."
GameManualItem/content/ResolveMergeConflict/1,"Merge conflicts can occur during branch merging, 
especially common in collaborative work involving multiple people.

Conflicts happen when two branches make different changes to the same file. 
Git cannot automatically determine which content should be kept and which should be discarded.
So Git will ask developers to manually resolve these conflicts.

Here are the steps to resolve merge conflicts:

<b>1. Identify the conflicted files:</b>
     When a conflict occurs, the command line will display all files with conflicts. 
     These files will also appear as 'unstaged' in the staging area.

<b>2. Understand the contents of the conflicted files:</b>
     The conflicted file will have three special symbols added: <color=#CF001C><</color>, <color=#CF001C>=</color>, and <color=#CF001C>></color>。
     The modifications from both merging branches are included between these symbols."
GameManualItem/content/ResolveMergeConflict/2,"     For example, in the file shown above, 
     a conflict occurred when attempting to merge 
     the <color=#CF001C>new-feature</color> branch into the <color=#CF001C>master</color> branch.

     The special symbols divide the modifications of these branches.
     The content from lines 1 to 3 shows HEAD, 
     representing the modifications from the current branch <color=#CF001C>master</color>.
     The content from lines 3 to 5 shows the modifications from the <color=#CF001C>new-feature</color> branch.

<b>3. Resolve the file conflict:</b>
     Resolving the file conflict involves deciding which content to keep or delete."
GameManualItem/content/ResolveMergeConflict/3,"     For example:
     If you want to keep the modifications from the <color=#CF001C>new-feature</color> branch 
     and remove those from the <color=#CF001C>master</color> branch.
     Please delete the following content:
     1. The three lines of special delimiter symbols (lines 1, 3, 5).
     2. The modification content from the <color=#CF001C>master</color> branch (line 2).

<b>4. Create a commit to continue merging:</b>
     After resolving all file conflicts, please create a new commit with the resolved content. 
     After committing, the merging process will continue. 
     Finally, the <color=#CF001C>master</color> branch will receive the newly resolved commit."
GameManualItem/content/gitMergeModes/1,"When executing a branch merge command, 
Git compares the commit histories of the two target branches 
and apply one of the following merge modes:

Here are the three merge modes in Git:
1. Fast-Forward Merge
2. Auto Merge
3. Merge Conflict"
GameManualItem/content/gitMergeModes/2/Title,Fast-Forward Merge
GameManualItem/content/gitMergeModes/2,"When comparing the commit histories of the two branches, 
if their paths are linear without any forks, 
Git performs a fast-forward merge.

A fast-forward merge updates the current branch's commit history 
until the records are the same as the targeted merge branch.
There's no new commits are created, only update the commit history."
GameManualItem/content/gitMergeModes/3/Title,Auto Merge
GameManualItem/content/gitMergeModes/3,"When comparing the commit histories of the two branches, 
if they diverge into two separate development paths, 
Git compares the modifications in both branches.

If Git finds that the modifications in the branches do not cause conflicts.
It will use auto-merge.

After merging the contents of the specified branch into the current branch, a new commit is created. 
It means the merge action was successful, 
and the commit message will display the names of the two merged branches."
GameManualItem/content/gitMergeModes/4/Title,Merge Conflict
GameManualItem/content/gitMergeModes/4,"Similar to auto-merge.
When the two target branches diverge into separate development paths with their own commits.
Git compares the modifications in both branches.

If modifications are made to the same file and the content is different, 
Git will alert developers that a merge conflict has occurred, 
requiring them to resolve the conflict manually. 
This scenario is the merge conflict mode.

When a conflict occurs, the merging process is paused. 
Developers need to go into the conflicted files and decide 
which content should be kept and which should be deleted.

After resolving all conflicts and creating a new commit with these contents, the merging process will continue. 
Finally, the content of the specified branch will be merged into the current branch, 
and the current branch will receive a new commit. 
This commit contains the resolved conflict file content."
GameManualItem/content/gitMergeModes/4/tip,"Auto merge and merge conflict are related. 
In this game, merging is categorized into three modes for better understanding."
GameManualItem/content/IntroGameScore/1/Title,Scoring Introduction
GameManualItem/content/IntroGameScore/1,"In the game stages, 
you need to perform the correct operations to complete the current objective.

Every time you complete the objective will be rated based on your action.
You can understand what rate you will get by the star icon on the scoreboard.

There are four ratings:

<b>1. Completed the objective perfectly (1000 points):</b>"
GameManualItem/content/IntroGameScore/2,"     This rating is given when you complete the current objective 
     without making any mistakes.

<b>2. Completed the objective, but made mistakes (750 points):</b>"
GameManualItem/content/IntroGameScore/3,"     This rating is given when you complete the current objective 
     but make mistakes in the process."
GameManualItem/content/IntroGameScore/3/tip,"For how to get a perfect rating, 
please refer to 'How to Complete Objectives Perfectly' in the Game Manual."
GameManualItem/content/IntroGameScore/4,<b>3. Completed the objective with hints (500 points):</b>
GameManualItem/content/IntroGameScore/5,"     This rating is given when you complete the current objective 
     using hints during the process.

<b>4. Completed the objective using the answer feature (0 points):</b>"
GameManualItem/content/IntroGameScore/6,"     This rating is given when you complete the current objective 
     using answer feature during the process.

After completing the game stages, 
you can view the rating for each achieved objective on the results screen."
GameManualItem/content/IntroGame/1/Title,Game Introduction
GameManualItem/content/IntroGame/1,"Welcome to the world of Git Education Game! 
This game will teach you how to effectively manage projects using Git.

Git is a powerful project management tool that helps you track the development history of your project.
It enhances the stability and efficiency of project development. 

It's an essential tool for software developers 
and is also effective for managing any long-term project.

In this game, you will learn the basic concepts and usage of Git. 
It's designed for those who have no experience in programming or are new to Git. 
By completing the game, you will gain the ability to use Git."
GameManualItem/content/IntroGame/2/Title,Git theme stages:
GameManualItem/content/IntroGame/2,"The core knowledge of Git is divided into several stages.
They form three theme stages:

<b>1. Basics of Git:</b>
     Learn the core concepts and basic commands of Git.
     After completing this theme stage, 
     you will have the basic ability to manage projects with Git.

<b>2. Branch Management:</b>
     Learn about Git's branch system. 
     Using it to develop projects more stably and efficiently.

<b>3. Remote Management:</b>
     Learn Git's remote management features.
     Learn to upload the project to the internet, then collaboratively with the team."
GameManualItem/content/IntroGame/3/Title,Simulated scenario objectives
GameManualItem/content/IntroGame/3,"Each stage generates a scenario that fits the learning goal.
You solve practical problems within a storyline.

Each scenario has a main objective.
It breaks down into several smaller objectives. 

You can simply follow the current objective and instructions to do actions. 
When you complete all objectives, you pass the stage.

In the upper left corner of the game screen, it shows the current objective. 
Please follow it to complete the objectives and pass the stage."
GameManualItem/content/IntroGame/4/Title,Game Scoring
GameManualItem/content/IntroGame/4,"During the game, each completed objective will be rated based on your action.
Game points in each stage show your performance on the stage.

After completing a stage, the game will give you a final rating of 1 to 4 stars. 
Your score and completion time for the stage will be uploaded to the global leaderboard. 
Try to get high scores and become one of the top 10 Git learners in the world!"
GameManualItem/content/CheckBeforeMergeMainBrach/1,"Before merging a completed development branch into the remote main branch,
we should go through the 'Preparation for Merging' process.
It helps ensure the merged project works fine and avoids merge conflicts.

Here are the steps for confirmation:

<b>1. Check branch commit records:</b>
     Check the commit history of both the 'development branch' and 'main branch'. 
     Make sure they are consistent with the remote repository.
     This ensures the actions below are valid.

<b>2. Merge local main branch:</b>
     Merge the 'main branch' in your local computer into the 'development branch'.
     This integrates the changes from both branches.

<b>3. Verify project status after merge:</b>
     After merging, check if the project encounters any issues.
     If there are problems, we should resolve them locally.

<b>4. Upload the merged 'development branch' to the remote repository:</b>
     Once the merged project runs smoothly,
     or after resolving any issues caused by the merge,
     the branch can be uploaded to the remote repository.

After completing the above steps,
you can create a Pull Request for merging,
let the merged 'development branch' can be merged into the remote main branch."
GameManualItem/content/VersionControlAndGit/1/Title,Version Control
GameManualItem/content/VersionControlAndGit/1,"Version Control is a system for managing documents, code, and other content. 
It's particularly suited for projects requiring long-term operation and development.
It plays an important role in the field of software development.

It has the following features:

<b>1. File content tracking:</b>
     Each change is recorded. 
     You can use these records to see 
     who made the changes when they were made, and the specific changes.

<b>2. Version rollback:</b>
     When errors occur during development, 
     this feature allows you to revert to a version before the error occurs. 
     But current developments and all records won't lost. 
     You can easily switch to the version you want.

<b>3. Branch management:</b>
     You can divide the development content into multiple branches. 
     The main advantage of branch management is that branches do not interfere with each 
     other, enhancing development efficiency and stability."
GameManualItem/content/VersionControlAndGit/2,"Git is a widely used version control tool, especially popular in software development. 

It contains the principles of version control, 
allowing users to perform various operations through the command line. 

These commands are typically user-friendly, 
and you will learn and use them in this game to achieve scenario goals.

In addition to the advantages of version control, Git also supports team collaboration. 
There are many Git service platforms online (e.g., GitHub, GitLab). 
These platforms allow you to upload your projects and collaborate with other members."
GameManualItem/content/IntroStagingArea/1,"The Staging Area window is a separate display for the output of the 'git status' command. 
It shows the results of the 'git status' command execution."
GameManualItem/content/IntroStagingArea/2/Title,Current display content
GameManualItem/content/IntroStagingArea/2,"You can click on previously executed commands 
to view the staging area's status at different points in time. 
The corresponding command ID will be displayed here."
GameManualItem/content/IntroStagingArea/3/Title,Staged and Unstaged areas
GameManualItem/content/IntroStagingArea/3,"The game simplifies the content of the staging area into two file statuses:

<b>1. Unstaged Area:</b>
     Compares the current commit and the working directory files, 
     and found files are different in the working directory.
     But they are not moved to the staging area.

<b>2. Staged Area:</b>
     Compares the current commit and the working directory files, 
     and found files are different in the working directory.
     And they have been added to the staging area."
GameManualItem/content/IntroStagingArea/4/Title,File status
GameManualItem/content/IntroStagingArea/4,"From left to right, the display includes:
1. File status
2. File location in the project
3. File name

File status is categorized into:

<b>1. New File Icon:</b>"
GameManualItem/content/IntroStagingArea/5,"     Shows a file is being tracked for the first time.

<b>2. The modified file icon:</b>"
GameManualItem/content/IntroStagingArea/6,"     Shows a tracked file has been modified.

<b>3. The Deleted file icon:</b>"
GameManualItem/content/IntroStagingArea/7,"     Shows a tracking file has been removed, 
     which typically means that the file has been deleted."
GameManualItem/content/IntroAssistance/1,"The dialogue window is frequently used in the game. 
Before starting the game, you need to click this button to proceed to the next step. 
There're multiple dialogues will appear during the stage.
They will guide you on what to do next.

When the system allows you to start an action by yourself, 
you can click the button again to use the assistance feature. 
The system will pop up options."
GameManualItem/content/IntroAssistance/2/Title,Review previous conversations
GameManualItem/content/IntroAssistance/2,"The dialogue usually contains instructional content and guidance. 
You can choose this option when you forget what you should be doing."
GameManualItem/content/IntroAssistance/3/Title,Use hint feature
GameManualItem/content/IntroAssistance/3,"The hint feature will provide guidance based on the current stage objective. 
After using the hint feature, 
the rating for completing the current objective will change to 'Completed the objective with hints'."
GameManualItem/content/IntroAssistance/4/Title,Use answer feature
GameManualItem/content/IntroAssistance/4,"The answer feature assists you through dialogue until the current objective is completed. 
After using the answer feature, 
the rating for completing the current objective will change to 'Completed objective with answer feature'.

To use this feature, it needs to meet some conditions so you can use it.
To better learn Git commands and version control knowledge, 
please try to complete objectives in other ways."
GameManualItem/content/IntroResultsScreen/1,"This window will display after completing the stage. 
The system records your actions during the stage, 
and the window will show the summarized results, allowing you to understand your performance on the stage."
GameManualItem/content/IntroResultsScreen/2/Title,Stage rating and detailed statistics
GameManualItem/content/IntroResultsScreen/2,"Displays the total score and rating for the stage, 
The system will give a rating from 1 to 4 stars. 
You can use the rating to know your performance on the stage.

The bottom section will display a count of actions performed during the stage."
GameManualItem/content/IntroResultsScreen/3/Title,Leaderboard
GameManualItem/content/IntroResultsScreen/3,"The personal leaderboard shows your best record for the current stage. 
You can use it to track your learning status. 
Try to break your records to show you are improving on the stage.

Also, your score and completion time for the stage will be uploaded to the global leaderboard. 
You can view the global leaderboard for the stage using the button in the top-right corner."
GameManualItem/content/IntroResultsScreen/4/Title,Completed objectives list
GameManualItem/content/IntroResultsScreen/4,"Displays all the objectives completed at the current stage. 
Each objective includes a task description and the time taken to complete it.
And the completed objectives are categorized into four ratings:

1. <b>Completed the objective perfectly:</b>"
GameManualItem/content/IntroResultsScreen/5,"2. <b>Completed the objective, but made mistakes:</b>"
GameManualItem/content/IntroResultsScreen/6,3. <b>Completed the objective with hints:</b>
GameManualItem/content/IntroResultsScreen/7,4. <b>Completed the objective using the answer feature:</b>
GameManualItem/content/IntroCommandLine/1,"The command line window simulates the command prompt (CMD) window in real computers. 
Users can execute system commands and Git commands in this window.

Using Git in the real scenario, 
command execution results are displayed in this window."
GameManualItem/content/IntroCommandLine/2/Title,Toolbar introduction
GameManualItem/content/IntroCommandLine/2,<b>Right-side trash bin icon:</b> Clears the content of command history.
GameManualItem/content/IntroCommandLine/3/Title,Command history
GameManualItem/content/IntroCommandLine/3,"Used to record previously executed commands. 
Click on a command to view its execution result, 
or hover over a command to quickly preview the result.

After executing a command, there are three types of results:

<b>1. Command executed successfully:</b>"
GameManualItem/content/IntroCommandLine/4,"     When the executed command is correct and doesn't cause problems for the project.

<b>2. Warning:</b>"
GameManualItem/content/IntroCommandLine/5,"     Command execution is interrupted, it usually means there's an error during the execution. 
     The game will alert you to the reason for the failure.

<b>3. Command execution aborted:</b>"
GameManualItem/content/IntroCommandLine/6,"     The executed command might cause problems for the project. 
     If the command is successfully executed, it may require additional time and effort
     to resolve issues. 
     In the game, the execution will be forcibly stopped and considered an operation error."
GameManualItem/content/IntroCommandLine/7/Title,Command execution details
GameManualItem/content/IntroCommandLine/7,"After executing a command, the result is displayed here."
GameManualItem/content/IntroCommandLine/8/Title,Current location
GameManualItem/content/IntroCommandLine/8,"<b>Hover over the left-side compass icon:</b> Current command line location.
<b>Hover over the right-side branch icon:</b> Current branch, commit."
GameManualItem/content/IntroCommandLine/8/tip,"In the game, 
the command line window syncs with the path in the file manager window. 
If you move the path in the file manager window, the command line will also update the path."
GameManualItem/content/IntroCommandLine/9/Title,Input command field
GameManualItem/content/IntroCommandLine/9,"Used to execute Git commands.
During command input, the following operations can be performed:
1. Click the Tab key or lens icon for the quick search feature.
2. Press Enter or click the arrow icon to execute the command.
3. Use the up and down arrow keys to quickly fill in previously executed commands.
4. Right-click in the input field to paste the copied content."
GameManualItem/content/IntroCommandLine/10/Title,Quick complete feature
GameManualItem/content/IntroCommandLine/10,"Search for appropriate results based on current input to quickly fill in the input field. 
It is useful in the following scenarios:
1. Quick enter command.
2. Unfamiliarity with command structure.
3. Use in-game systems: Filling in commit messages, and naming branches."
GameManualItem/content/IntroCommandLine/10/tip,"For how to use the quick fill for commit messages and branch naming,
please refer to the 'git commit', and 'git branch' commands in the game manual."
GameManualItem/content/IntroGitCommand/1/Title,Introduction to Git command structure
GameManualItem/content/IntroGitCommand/1,"Git is a widely used version control tool. 
Users need to enter Git commands in the command line to perform various operations.
The structure of a Git command consists of several keywords.
They are separated by spaces.

For example:"
GameManualItem/content/IntroGitCommand/1/exampleBox,<color=#CF001C>git</color> <color=#173D91>add</color> <color=#244B0E>Text_File.txt</color>
GameManualItem/content/IntroGitCommand/2,"This command has 3 command fields:

<b>First command field  -   <color=#CF001C>git</color>:</b>
This is a keyword that must be entered when executing Git commands. 
Commands related to Git need to begin with <color=#CF001C>git</color>.

<b>Second command field  -   <color=#173D91>add</color>:</b>
This content is usually used to determine the type of Git command.
The <color=#173D91>add</color> command type is used to move files to the staging area.

<b>Third command field  -   <color=#244B0E>Text_File.txt</color>:</b>
Depending on the type of command, 
some commands can add other keywords in front to achieve various features. 
Check Git's official website to learn how to use a particular command type."
GameManualItem/content/IntroGitCommand/3/Title,Notes
GameManualItem/content/IntroGitCommand/3,"This game will focus on the most basic and practical Git commands. 
You only need to learn the commands mentioned in the game manual and stage.

Here are some key points to note when executing Git commands:

<b>1. Use spaces to separate command fields:</b>
     Git needs spaces to recognize the content of each field to execute different functions.

<b>2. Pay attention to the case of the command:</b>
     Git commands need to ensure the case are same as the command format.
     It can avoid accidental errors.

<b>3. Enter commands according to the format mentioned in the game manual and stage:</b>
     The game simplifies the diverse structure of Git commands. 
     By following the methods mentioned in the tutorials, 
     you can execute the command successfully."
GameManualItem/content/IntroCommitHistory/1,"The Commit History window is a separate display for the output of the 'git log' command. 
It shows the results of the 'git log' command execution.
and makes some improvements to enhance your understanding of the commit history."
GameManualItem/content/IntroCommitHistory/2/Title,Current display content
GameManualItem/content/IntroCommitHistory/2,"You can click on previously executed commands 
to view the commit history's status at different points in time. 
The corresponding command ID will be displayed here."
GameManualItem/content/IntroCommitHistory/3/Title,Commit History area
GameManualItem/content/IntroCommitHistory/3,"The commit history is divided into two parts: local and remote. 
If the current scenario has a remote repository, 
you can expand or collapse the content using the remote button."
GameManualItem/content/IntroCommitHistory/4/Title,Commit History branch list and HEAD
GameManualItem/content/IntroCommitHistory/4,"This area displays the list of branches in the local and remote repositories. 
Based on the color on the list, and the color shown on the commits.
You can define which branch a commit belongs to.

Besides, when you click on a branch in the list, 
all commits belonging to that clicked branch will switch to the color representing that branch.

The flag icon represents HEAD.
It shows the current commit where Git is located. 
Clicking HEAD on the branch list will display all the commit history on HEAD."
GameManualItem/content/IntroCommitHistory/5/Title,Commit detail content
GameManualItem/content/IntroCommitHistory/5,"When running the 'git log' command in the real scenario.
Details like the author, time, and message of the commit are displayed in the command line.

In this game, these details are hidden. 
To view this information, please click on a specific commit. 
A pop-up will show all the detailed information about that commit."
GameManualItem/content/IntroCommitHistory/6/Title,Locked commits
GameManualItem/content/IntroCommitHistory/6,"When running the 'git log' command in the real scenario.
If we have not updated the remote repository with commands like 'git pull', 
we cannot see the information on these locked commits.

In the game, this feature reminds you. 
please use 'git pull' to update the content of the remote repository if you need it."