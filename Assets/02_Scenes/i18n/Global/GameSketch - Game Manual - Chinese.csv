TooltipMessage/GameManualButton/Unlock,遊戲手冊
TooltipMessage/GameManualButton/Lock,尚未解鎖視窗：遊戲手冊
TooltipMessage/GameManualItem/content/commandDetail/Lock,後面的指令尚未解鎖
GameManualItem/list/IntroGitCommand,Git 指令的基本介紹
GameManualItem/list/git,git
GameManualItem/list/git init,git init
GameManualItem/list/git status,git status
GameManualItem/list/git add,git add
GameManualItem/list/git reset,git reset
GameManualItem/list/git commit,git commit
GameManualItem/list/git log,git log
GameManualItem/list/git checkout,git checkout
GameManualItem/list/git branch,git branch
GameManualItem/list/git merge,git merge
GameManualItem/list/git clone,git clone
GameManualItem/list/git remote,git remote
GameManualItem/list/git push,git push
GameManualItem/list/git pull,git pull
GameManualItem/list/IntroGame,遊戲玩法和目標
GameManualItem/list/IntroGameScore,遊戲得分介紹
GameManualItem/list/IntroGetPerfect,如何完美達成目標
GameManualItem/list/IntroAssistance,協助功能
GameManualItem/list/IntroGameManual,視窗介紹：遊戲手冊
GameManualItem/list/IntroFileManager,視窗介紹：檔案管理
GameManualItem/list/IntroFileContent,視窗介紹：檔案內容
GameManualItem/list/IntroResultsScreen,視窗介紹：結算畫面
GameManualItem/list/IntroCommandLine,視窗介紹：命令行
GameManualItem/list/IntroStagingArea,視窗介紹：暫存區域
GameManualItem/list/IntroCommitHistory,視窗介紹：提交記錄
GameManualItem/list/IssuesBackupFile,備份檔案的問題
GameManualItem/list/VersionControlAndGit,版本控制 和 Git
GameManualItem/list/.gitAndGitCoreAreas,.git 與 Git 的核心區域
GameManualItem/list/ProcessCreateCommit,創建提交的流程
GameManualItem/list/RuleNameBranch,命名分支的原則
GameManualItem/list/RuleCommitMessage,提交訊息的原則
GameManualItem/list/DetachedHEAD,分離 HEAD
GameManualItem/list/gitMergeModes,git merge 的合併模式
GameManualItem/list/ResolveMergeConflict,解決合併衝突
GameManualItem/list/CheckBeforeMergeMainBrach,合併至遠端主分支前的確認
GameManualWindow/content/DefaultContent,"點擊左方列表
來觀看教學內容"
GameManualItem/content/common/windowTitle,視 窗 介 紹
GameManualItem/content/common/knowledgeTitle,知 識 介 紹
GameManualItem/content/common/errorMsgTitle,錯誤操作提示訊息
GameManualItem/content/common/commandTitle,指 令 類 型 介 紹
GameManualItem/content/common/commandDetailedTitle,指 令 細 節
GameManualItem/content/common/command/use, 用途：
GameManualItem/content/common/command/scenario, 使用情境：
GameManualItem/content/common/command/example, 使用範例：
GameManualItem/content/common/command/hint, 需要注意的地方：
GameManualItem/content/common/tipTitle,小提醒：
GameManualWindow/Title,遊 戲 手 冊
GameManualWindow/CategoryButton/Command,指 令
GameManualWindow/CategoryButton/RuleAndWindow,遊 戲 規 則 與 視 窗
GameManualWindow/CategoryButton/VersionControl,版 本 控 制
GameManualWindow/ListTitle/Command,Git 指 令 列 表
GameManualWindow/ListTitle/RuleAndWindow,遊 戲 規 則 與 視 窗 教 學 列 表
GameManualWindow/ListTitle/VersionControl,版 本 控 制 教 學 列 表
GameManualItem/content/git/1,"'git' 是 Git 指令中最基礎的類型之一。

在執行大部分 Git 指令時，
您需要將 'git' 作為第 1 個指令欄位，
然後在第 2 欄位加上其他指令類型（例如：init 、add）。

而 'git' 指令類型，只需要輸入 1 個欄位的指令即可執行。
您也可以在指令前方加入其他參數來執行不同操作。

通常情況下，'git' 指令可用於以下情境：
 1. 確認當前電腦使用的 Git 系統版本。
 2. 了解可用的 Git 系統指令，以及每個指令的用途。"
GameManualItem/content/git/commandDetail/1,git <color=#CF001C>-h 或 --help</color>
GameManualItem/content/git/commandDetail/1/use,"了解所有可用 Git 指令的簡要說明。
除了執行這個指令外，
您也可以從 Git 官方網站來獲得更詳細的指令使用方法。"
GameManualItem/content/git/commandDetail/1/scenario,"1. 需要回顧之前學習的內容。
2. 查找特定指令的使用方法時。"
GameManualItem/content/git/commandDetail/1/example,當使用者 A 在使用 Git 遇到問題時，可以執行以下指令來獲得幫助：
GameManualItem/content/git/commandDetail/1/exampleBox,git <color=#CF001C>--help</color>
GameManualItem/content/git/commandDetail/1/hint,"在本遊戲中，每個指令的詳細說明都包含在遊戲手冊中。
如果想要進一步了解特定指令，
請點擊遊戲手冊按鈕或執行這個指令來開啟手冊。"
GameManualItem/content/git/commandDetail/2,git <color=#CF001C>-v 或 --version</color>
GameManualItem/content/git/commandDetail/2/use,"確認當前電腦使用的 Git 系統版本，
同時確認是否已安裝系統。"
GameManualItem/content/git/commandDetail/2/scenario,"1. 在開始使用 Git 管理專案之前。
2. 需要確認電腦是否已安裝 Git 系統。"
GameManualItem/content/git/commandDetail/2/example,"當使用者 A 想要使用 Git 來管理專案時。
可以執行以下指令來確認 Git 是否已安裝："
GameManualItem/content/git/commandDetail/2/exampleBox,git <color=#CF001C>--version</color>
GameManualItem/content/git/commandDetail/2/hint,"無特別注意事項，只需遵守基本的 Git 指令輸入規則即可。
（詳情請查看 'Git 指令的基本介紹'）"
GameManualItem/content/git init/1,"'git init' 是 Git 指令中最基礎的類型之一。

當您想要開始使用 Git 來管理您的專案時，
'git init' 將是您需要執行的第一個指令。

執行成功後，將在您指定的檔案路徑下創建一個名為 '.git' 的隱藏資料夾。
這個資料夾是 Git 管理系統的核心，它儲存著專案的管理記錄。
如果缺少這個資料夾，大多數 Git 指令將無法運作。"
GameManualItem/content/git init/commandDetail/1,git init
GameManualItem/content/git init/commandDetail/1/use,在命令行所在的路徑下創建一個 '.git' 隱藏資料夾。
GameManualItem/content/git init/commandDetail/1/scenario,1. 想要開始使用 Git 管理專案時。
GameManualItem/content/git init/commandDetail/1/example,"當使用者 A 準備使用 Git 來管理專案時，
在選定要管理的專案路徑後，執行以下指令："
GameManualItem/content/git init/commandDetail/1/exampleBox,git init
GameManualItem/content/git init/commandDetail/1/hint,"1. 確保執行指令時的路徑正確：
當您執行 'git init' 時，
Git 將在命令行所在的路徑下創建 '.git' 資料夾。

請確保這個路徑與您要管理的專案相符，
以避免不必要的混淆和困擾。"
GameManualItem/content/git status/1,"'git status' 屬於與 '暫存區域' 相關的指令類型。

透過這個指令，
您可以查看目前 Git 管理系統中的 '暫存區域' 狀態。
以便了解哪些檔案已被追蹤，哪些檔案已被修改，
以及是否準備好進行提交。"
GameManualItem/content/git status/1/tip,"在實際使用 Git 時，指令的輸出內容會顯示在命令行視窗中。
本遊戲將輸出內容，整合到 '暫存區域' 視窗中。
以便更容易查看內容，視窗的設計和實際輸出相似。"
GameManualItem/content/git status/commandDetail/1,git status
GameManualItem/content/git status/commandDetail/1/use,開啟 '暫存區域' 視窗，顯示當前 '暫存區域' 的狀態。
GameManualItem/content/git status/commandDetail/1/scenario,"1. 需要確認當前 '暫存區域' 的狀態。
2. 將檔案推入或移出 '暫存區域' 後。
3. 創建新的 '提交' 前，確認追蹤的檔案和狀態。"
GameManualItem/content/git status/commandDetail/1/example,"當使用者 A 在將修改完成的檔案推入或移出 '暫存區域' 後，
執行以下指令來查看區域中檔案的狀態："
GameManualItem/content/git status/commandDetail/1/exampleBox,git status
GameManualItem/content/git status/commandDetail/1/hint,"1. 無法即時更新內容：
在執行與 '暫存區域' 互動的指令
（例如：git add、git reset 等）後。

雖然檔案的狀態已更改，但您無法立即看到視窗中的更新。
因此，在執行這些指令後，
請再次使用 'git status' 指令以查看最新的狀態。"
GameManualItem/content/git add/1,"'git add' 是與 '暫存區域' 有關的指令類型。
透過這個指令，將檔案內容從工作目錄加入到 '暫存區域'。

成功將檔案加入 '暫存區域' 後，這些檔案會被標記為 '已追蹤'。
它們將作為下一次的 '提交'（版本記錄）。"
GameManualItem/content/git add/commandDetail/1,git add <color=#CF001C>指定的檔案名稱</color>
GameManualItem/content/git add/commandDetail/1/use,將特定檔案加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/1/scenario,1. 希望將特定檔案的更改保存為記錄時。
GameManualItem/content/git add/commandDetail/1/example,"當使用者 A 已經完成對 '文章A.txt' 的修改後，
可以執行以下指令，將該檔案加入到 '暫存區域' 中："
GameManualItem/content/git add/commandDetail/1/exampleBox,git add <color=#CF001C>文章A.txt</color>
GameManualItem/content/git add/commandDetail/1/hint,"1. 無法即時更新內容：
執行指令後，不會立即看到即時的反饋。
請使用 'git status' 指令查看最新的 '暫存區域' 狀態。"
GameManualItem/content/git add/commandDetail/2,git add <color=#CF001C>資料夾名稱</color>
GameManualItem/content/git add/commandDetail/2/use,將指定資料夾中的所有檔案一次性加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/2/scenario,1. 想要將一個資料夾中的所有檔案一次性加入 '已追蹤' 時。
GameManualItem/content/git add/commandDetail/2/example,"當使用者 A 想要一次性將 '網站圖片庫' 資料夾中的
所有檔案加入到 '暫存區域' 時。
可以執行以下指令："
GameManualItem/content/git add/commandDetail/2/exampleBox,git add <color=#CF001C>網站圖片庫</color>
GameManualItem/content/git add/commandDetail/3,git add <color=#CF001C>.</color>
GameManualItem/content/git add/commandDetail/3/use,一次性將命令行所在路徑下的所有檔案加入到 '已追蹤' 中。
GameManualItem/content/git add/commandDetail/3/scenario,"1. 想要一次性將整個工作目錄下的所有檔案加入到 '已追蹤' 中。
2. 第一次建立 Git 管理系統時，用於初始化專案。"
GameManualItem/content/git add/commandDetail/3/example,"當使用者 A 需要初始化一個新的 Git 專案。
將整個工作目錄中的檔案加入 '暫存區域' 時。
可以執行以下指令："
GameManualItem/content/git add/commandDetail/3/exampleBox,git add <color=#CF001C>.</color>
GameManualItem/content/git reset/1,"'git reset' 是功能強大的指令類型。
它涵蓋了 '暫存區域'、'提交記錄' 這些領域。

在開發專案時，如果不想要將一些檔案新增到 '暫存區域' 時，
可以使用這個指令將檔案從 '已追蹤' 區域移回 '未追蹤' 區域。"
GameManualItem/content/git reset/commandDetail/1,git reset <color=#CF001C>指定的檔案名稱</color>
GameManualItem/content/git reset/1/tip,"在實際使用 Git 時，
'git reset' 除了可以做到上述功能外，還能夠刪除 '提交記錄' 裡的 '提交'。
但是，考慮到刪除 '提交' 後造成的不可挽回性以及操作的難度。
本遊戲將略過 '刪除提交記錄' 功能，以確保學習品質。"
GameManualItem/content/git reset/commandDetail/1/use,將指定的檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/1/scenario,1. 當你不想要將修改後的檔案放入 '暫存區域' 時。
GameManualItem/content/git reset/commandDetail/1/example,"當使用者 A 不小心將一個重要檔案推送到 '暫存區域' 時，
可以執行以下指令將其移回 '未追蹤' 區域："
GameManualItem/content/git reset/commandDetail/1/exampleBox,git reset <color=#CF001C>機密文件.txt</color>
GameManualItem/content/git reset/commandDetail/1/hint,"1. 無法即時更新內容：
執行指令後，不會立即看到即時的反饋。
請使用 'git status' 指令查看最新的 '暫存區域' 狀態。"
GameManualItem/content/git reset/commandDetail/2,git reset <color=#CF001C>資料夾名稱</color>
GameManualItem/content/git reset/commandDetail/2/use,將指定資料夾中的所有檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/2/scenario,1. 希望一次性將指定資料夾中的所有檔案移回 '未追蹤' 區域時。
GameManualItem/content/git reset/commandDetail/2/example,"當使用者 A 不希望將資料夾中的大型檔案提交到 '暫存區域' 時。
可以執行以下指令將其移回 '未追蹤' 區域："
GameManualItem/content/git reset/commandDetail/2/exampleBox,git reset <color=#CF001C>未壓縮圖片庫</color>
GameManualItem/content/git reset/commandDetail/3,git reset <color=#CF001C>.</color>
GameManualItem/content/git reset/commandDetail/3/use,將命令行所在路徑下的所有檔案從 '已追蹤' 區域移回 '未追蹤' 區域。
GameManualItem/content/git reset/commandDetail/3/scenario,1. 希望一次性將整個專案的檔案移回 '未追蹤' 區域時。
GameManualItem/content/git reset/commandDetail/3/example,"當使用者 A 需要一次性將多個資料夾中的檔案移回 '未追蹤' 區域時。
可以執行以下指令："
GameManualItem/content/git reset/commandDetail/3/exampleBox,git reset <color=#CF001C>.</color>
GameManualItem/content/git commit/1,"'git commit' 是與 '提交記錄' 有關的指令類型。

這個指令是將位於 '暫存區域' 中的修改整合成一個新的 '提交'，
並將其儲存到 '儲存庫' 中的 '提交記錄' 區域。

要成功執行 'git commit'，需要滿足以下兩個條件：
1. 至少有一個檔案已經被加入 '暫存區域'。
2. 提供一個簡潔且有意義的提交訊息。
   
這個指令有助於開發者整理工作，
以便更好地追蹤不同版本修改內容和目的。"
GameManualItem/content/git commit/commandDetail/1,"git commit <color=#CF001C>-m 或 --message</color> <color=""#173D91"">""提交訊息""</color>"
GameManualItem/content/git commit/commandDetail/1/use,"用於將 '暫存區域' 中的修改整合成一個新的 '提交'，
同時提供提交訊息以說明修改的內容。"
GameManualItem/content/git commit/commandDetail/1/scenario,1. 已確定要將 '暫存區域' 中的修改保存為一個 '提交' 時。
GameManualItem/content/git commit/commandDetail/1/example,"使用者 A 最近開發了一個新的功能。
並將檔案加入至 '暫存區域'，
然後執行以下指令以創建新的 '提交'："
GameManualItem/content/git commit/commandDetail/1/exampleBox,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""新增搜尋關鍵字功能""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/1,"1. 提交訊息需要使用雙引號（""）包裹：
Git 指令使用空格來區分不同的指令欄位。
使用雙引號可以確保提交訊息被視為一個指令欄位。

2. 提交訊息要具體而清晰：
為了讓人能夠快速了解每個 '提交' 的內容和目的，
請確保填寫的提交訊息具體而清晰。

3. 如何在本遊戲中快速填寫提交訊息：
本遊戲提供了快速填寫提交訊息的方式，
請按照以下步驟執行正確的指令：
"
GameManualItem/content/git commit/commandDetail/1/hint/2,        1. 在命令行中輸入以下指令：
GameManualItem/content/git commit/commandDetail/1/hint/3,"git commit <color=#CF001C>-m</color> <color=""#173D91"">""""</color>"
GameManualItem/content/git commit/commandDetail/1/hint/4,"        2. 按下 Tab 鍵或搜尋功能按鈕，以開啟提交訊息的選擇視窗。
        3. 從選擇視窗中選擇最適合的提交訊息選項。
        4. 選擇後，提交訊息將自動填入指令中。"
GameManualItem/content/git commit/commandDetail/1/hint/5,"按照上述步驟，
您就可以輕鬆執行 'git commit' 指令並提交您的修改。"
GameManualItem/content/git log/1,"'git log' 是一個廣泛使用的指令類型。
它涵蓋了 '提交記錄'、'分支管理'、'遠端管理' 領域。

這個指令類型的主要作用
是讓您了解目前 Git 管理系統中的 '提交記錄' 狀態。

'提交記錄' 是 '儲存庫' 中的一個區域，用來存放專案的所有 '提交'。"
GameManualItem/content/git log/1/tip,"在實際使用 Git 時，'提交記錄' 狀態會顯示在命令行視窗中。
本遊戲將輸出內容，整合到 '提交記錄' 視窗中。
以便更容易查看內容，視窗的設計和實際輸出相似。
並整合了 'git log' 不同參數的輸出結果。"
GameManualItem/content/git log/commandDetail/1,git log
GameManualItem/content/git log/commandDetail/1/use,開啟 '提交記錄' 視窗，以顯示當前的 '提交記錄' 內容。
GameManualItem/content/git log/commandDetail/1/scenario,"1. 想要確認當前 '提交記錄' 的狀態。
2. 剛剛新建一個 '提交'。
3. 切換到其他 '提交' 後。
4. 查看本地儲存庫分支的狀態。
5. 查看遠端儲存庫分支的狀態。"
GameManualItem/content/git log/commandDetail/1/example,"當使用者完成一個新的功能並成功提交後，
可以執行以下指令來查看目前 '提交記錄' 狀態："
GameManualItem/content/git log/commandDetail/1/exampleBox,git log
GameManualItem/content/git log/commandDetail/1/hint/1,"1. 無法即時更新內容：
在執行會影響 '提交記錄' 的指令時
（例如：git commit、git checkout 等）。

雖然成功執行了指令，您無法立即看到視窗中的更新。

因此，在執行這些指令後，
請再次使用 'git log' 以查看最新的狀態。

2. '提交記錄' 視窗的設計：
在本遊戲中，將 'git log' 指令的輸出結果
整合到一個名為 '提交記錄' 的視窗中。

如果您在實際使用 Git 時需要輸入以下指令以達到相同效果："
GameManualItem/content/git log/commandDetail/1/hint/2,"git log <color=#CF001C>--oneline</color> <color=""#173D91"">--all</color> <color=#244B0E>--graph</color>"
GameManualItem/content/git log/commandDetail/1/hint/3,"以下是這些參數的功能：
'--oneline' 僅顯示 '提交ID' 和 '提交訊息'。
'--all'：顯示所有分支的 '提交記錄'。
'--graph'：通過圖示來顯示 '提交' 間關係。"
GameManualItem/content/git checkout/1,"'git checkout' 是一個廣泛使用的指令類型。
它涵蓋了 '提交記錄'、'分支管理' 這些領域。

這個指令允許您切換到不同的 '提交' 和 '分支'，
同時還會同步 '工作目錄' 中的檔案內容。"
GameManualItem/content/git checkout/commandDetail/1,git checkout <color=#CF001C>提交ID</color>
GameManualItem/content/git checkout/commandDetail/1/use,將 HEAD 移動到指定的 '提交'，以恢復專案到該 '提交' 的版本。
GameManualItem/content/git checkout/commandDetail/1/scenario,"1. 檢查不同 '提交' 的修改內容。
2. 在最新版本中發現錯誤，需要進行問題修復時。
3. 想要回到之前的版本，放棄新版本的內容時。"
GameManualItem/content/git checkout/commandDetail/1/example,"當使用者 A 需要回到先前的版本以檢查錯誤的根本原因時。
在確認了指定提交的 ID 後（例如：'123abc'）。
可以執行以下指令："
GameManualItem/content/git checkout/commandDetail/1/exampleBox,git checkout <color=#CF001C>123abc</color>
GameManualItem/content/git checkout/commandDetail/1/hint,"1. 查看完成後，需要返回到正確的分支以繼續開發：
當 HEAD 指向 '提交'，而不是指向 '分支' 時，
這被稱為 '分離 HEAD' 狀態。

在這種狀態下，新的 '提交' 不會新建在任何分支上。
這可能導致 '提交' 的遺失。

為了維護專案的管理，請在查看完內容後。
使用 'git checkout 分支名稱' 指令將 HEAD 重新指向分支。"
GameManualItem/content/git checkout/commandDetail/2,git checkout <color=#CF001C>分支名稱</color>
GameManualItem/content/git checkout/commandDetail/2/use,"將 HEAD 指向指定的 '分支'。
HEAD 將移動到該分支的最新 '提交'，以便繼續專案開發。"
GameManualItem/content/git checkout/commandDetail/2/scenario,"1. 繼續在特定分支上進行開發。
2. 準備進行分支合併操作時。"
GameManualItem/content/git checkout/commandDetail/2/example,"當使用者 A 完成查看之前版本的內容後，需要繼續在 'master' 分支上開發時。
可以執行以下指令："
GameManualItem/content/git checkout/commandDetail/2/exampleBox,git checkout <color=#CF001C>master</color>
GameManualItem/content/git checkout/commandDetail/2/hint,"1. 注意當前所在分支：
在專案開發過程中，經常會在不正確的分支開發功能。
為了造成避免不必要的混淆。
請在開發功能前，確保位於正確的分支。"
GameManualItem/content/git branch/1,"'git branch' 是與 '分支管理'、'遠端管理' 有關的指令類型

這個指令可以執行各種分支管理操作，
包括查看、新增、刪除等。

此外，加入特定參數可以查看遠端儲存庫中的遠端分支。
通常會與 'git checkout' 指令類型結合使用。"
GameManualItem/content/git branch/commandDetail/1,git branch
GameManualItem/content/git branch/commandDetail/1/use,"查看當前本地儲存庫中所有本地分支的名稱。
同時也會顯示目前 HEAD 位於哪一個 '分支' 或 '提交'。"
GameManualItem/content/git branch/commandDetail/1/scenario,"1. 確認當前 HEAD 所在位置
2. 查看儲存庫中有哪些本地分支"
GameManualItem/content/git branch/commandDetail/1/example,"當使用者 A 需要查看本地儲存庫中的所有分支，
以及 HEAD 目前所在的分支時。
可以執行以下指令："
GameManualItem/content/git branch/commandDetail/1/exampleBox,git branch
GameManualItem/content/git branch/commandDetail/1/hint,"1. 與 'git log' 指令的區別：
雖然這兩個指令都可以查看分支，但它們的用途不同。
'git branch' 用於查看儲存庫中的所有分支，
'git log' 用於查看分支的 '提交記錄'。"
GameManualItem/content/git branch/commandDetail/2,git branch <color=#CF001C>分支名稱</color>
GameManualItem/content/git branch/commandDetail/2/use,"創建一個新的本地分支。
這個分支將基於當前 HEAD 指向的 '提交' 創建，
並含有其他舊的 '提交'。"
GameManualItem/content/git branch/commandDetail/2/scenario,"1. 需要在專案上修復問題
2. 需要在專案上開發新功能"
GameManualItem/content/git branch/commandDetail/2/example,"當使用者 A 需要在專案中開發新功能時，
可以執行以下指令以創建新的分支："
GameManualItem/content/git branch/commandDetail/2/exampleBox,git branch <color=#CF001C>new-feature</color>
GameManualItem/content/git branch/commandDetail/2/hint,"1. 創建分支後需要切換到該分支：
這個指令僅用於創建分支。
如果要在新創建的分支上進行開發，
還需要使用 'git checkout' 指令切換到該分支。

2. 分支名稱要具體而清晰：
為了讓自己和團隊能夠快速了解分支的內容和目的，
請確保分支名稱具體而清晰。

"
GameManualItem/content/git branch/commandDetail/3,"git branch <color=#CF001C>-d 或 --delete</color> <color=""#173D91"">分支名稱</color>"
GameManualItem/content/git branch/commandDetail/3/use,將指定的本地分支從本地儲存庫中刪除。
GameManualItem/content/git branch/commandDetail/3/scenario,1. 當分支已經完成目標並合併到主分支時
GameManualItem/content/git branch/commandDetail/3/example,"當使用者 A 已將開發功能的分支合併到主分支時，
可以執行以下指令來刪除分支："
GameManualItem/content/git branch/commandDetail/3/exampleBox,"git branch <color=#CF001C>-d</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git branch/commandDetail/3/hint,"1. 刪除分支前，請確保已將 HEAD 移動到其他位置：
為了成功執行刪除分支指令，
請確保 HEAD 已經移動到其他分支或提交上。"
GameManualItem/content/git branch/commandDetail/4,git branch <color=#CF001C>-r 或 --remote</color>
GameManualItem/content/git branch/commandDetail/4/use,"查看所有遠端分支的名稱，這些遠端分支會以以下格式命名：
'遠端儲存庫別名/分支名稱'"
GameManualItem/content/git branch/commandDetail/4/scenario,1. 需要知道遠端儲存庫中的遠端分支名稱。
GameManualItem/content/git branch/commandDetail/4/example,"當使用者 A 想要得知使用者 B 開發的遠端分支名稱時，
可以執行以下指令："
GameManualItem/content/git branch/commandDetail/4/exampleBox,git branch <color=#CF001C>-r</color>
GameManualItem/content/git branch/commandDetail/4/hint,"1. 與 'git branch' 指令的不同處：
雖然這兩個指令都能夠查看分支名稱，但是作用不同
'git branch' 用於查看本地分支，
'git branch -r' 用於查看所有遠端分支名稱。"
GameManualItem/content/git branch/commandDetail/5,"git branch <color=#CF001C>本地分支名</color> <color=""#173D91"">遠端分支名</color>"
GameManualItem/content/git branch/commandDetail/5/use,"將指定遠端分支的 '提交記錄' 複製到一個新創建的本地分支上，
然後連接在一起。"
GameManualItem/content/git branch/commandDetail/5/scenario,"1. 需要從遠端獲取特定分支。
2. 需要查看其他開發者或自己的遠端分支時。"
GameManualItem/content/git branch/commandDetail/5/example,"當使用者 A 需要從使用者 B 開發的 'member-branch' 分支
查看開發進度時，可以執行以下指令："
GameManualItem/content/git branch/commandDetail/5/exampleBox,"git branch <color=#CF001C>member-branch</color> <color=""#173D91"">origin/member-branch</color>"
GameManualItem/content/git branch/commandDetail/5/hint,"1. 本地分支盡量與遠端分支名稱一致：
通常情況下，本地分支的名稱應與遠端分支相對應。
以減少混淆。

2. 確保執行此指令時，指定的分支名稱不存在：
和 'git branch' 指令相同，這個指令會在本地儲存庫上創建分支。
如果創建的分支名稱已存在，將停止運行。"
GameManualItem/content/git merge/1,"'git merge' 是一個重要的指令類型。
它涵蓋了 '提交記錄'、'分支管理' 這些領域。

這個指令能夠執行分支合併操作。
'將一個分支的修改內容移動到另一個分支中'。
這個動作稱為 '合併'。

在合併過程中，
Git 根據兩個目標分支的 '提交記錄' 自動選擇合併模式。
合併模式有以下三種：
1. 快進合併（Fast-Forward Merge）
2. 自動合併（Auto Merge）
3. 合併衝突（Merge Conflict）

關於這些合併模式的詳細說明，
可以參考遊戲手冊中的 'git merge 的合併模式'。"
GameManualItem/content/git merge/commandDetail/1,git merge <color=#CF001C>分支名稱</color>
GameManualItem/content/git merge/commandDetail/1/use,"將指定分支合併到當前分支上，
使得當前分支獲得指定分支的所有 '提交記錄'。"
GameManualItem/content/git merge/commandDetail/1/scenario,"1. 準備將已完成的分支合併到主分支時。
2. 在準備創建 Pull Request 之前，確認合併流程的步驟之一。"
GameManualItem/content/git merge/commandDetail/1/example,"當使用者 A 在 'new-feature' 分支上完成開發後，
想要將其內容合併到 'master' 分支上。
可以切換到 'master' 分支，然後執行以下指令："
GameManualItem/content/git merge/commandDetail/1/exampleBox,git merge <color=#CF001C>new-feature</color>
GameManualItem/content/git merge/commandDetail/1/hint,"1. 確認當前分支：
在執行合併之前，請確保當前分支是正確的。
以避免合併到錯誤的分支上，造成不必要的困擾。

2. 了解指定分支和當前所在分支的角色：
合併分支 A 到分支 B 的結果，
可能會不同於合併分支 B 到分支 A。

因此在進行合併之前，請先確定兩個分支的角色，
以避免合併到錯誤的分支。"
GameManualItem/content/git clone/1,"'git clone' 是與 '遠端管理' 有關的指令類型，
在使用遠端儲存庫時要執行的第一個指令。

這個指令類型允許您將遠端儲存庫的內容複製到本地設備，
同時創建本地設備和遠端儲存庫之間的連接。

通常情況下，複製成功的遠端儲存庫會被 Git 命名為 'origin'，
這些連接的遠端儲存庫會有一個別名，對應著遠端儲存庫的網址。"
GameManualItem/content/git clone/commandDetail/1,git clone <color=#CF001C>remote_repository_URL</color>
GameManualItem/content/git clone/commandDetail/1/use,將遠端儲存庫的內容複製到本地設備中。
GameManualItem/content/git clone/commandDetail/1/scenario,"1. 準備開始使用遠端儲存庫進行開發時。
2. 需要在新的設備上繼續專案開發時。"
GameManualItem/content/git clone/commandDetail/1/example,"當使用者 A 在 Git 服務平台（例如：GitHub、GitLab 等）上
創建了一個新的遠端儲存庫（例如：https://github.com/user/New-Project.git）。

如果要在自己的本地設備上開發專案時，
可以執行以下指令："
GameManualItem/content/git clone/commandDetail/1/exampleBox,git clone <color=#CF001C>https://github.com/user/New-Project.git</color>
GameManualItem/content/git clone/commandDetail/1/hint,"1. 確認當前命令行的路徑：
當執行此指令後，
Git 會在命令行路徑下創建一個與遠端儲存庫相同名稱的資料夾。
資料夾內包含了遠端儲存庫的所有檔案。

2. 了解指令執行失敗的原因：
指令執行失敗的原因可能是：
        1. 網路連接問題
        2. 權限問題
        3. 當前路徑的狀態

如果想要避免 '當前路徑的狀態' 造成指令執行失敗。
請您確保當前路徑中不包含與遠端儲存庫同名的資料夾，
並且該資料夾內容為空。"
GameManualItem/content/git remote/1,"'git remote' 是與 '遠端管理' 有關的指令類型。

這個指令用於確認專案是否已連接到其他遠端儲存庫，
並顯示已連接遠端儲存庫的網址和別名。

在實際使用 Git 時，
這個指令還可以用來新增或刪除與其他遠端儲存庫的連接。"
GameManualItem/content/git remote/commandDetail/1,git remote <color=#CF001C>-v 或 --verbose</color>
GameManualItem/content/git remote/commandDetail/1/use,"確認本地專案是否已與其他遠端儲存庫建立連接，
同時顯示連接儲存庫的網址和別名。"
GameManualItem/content/git remote/commandDetail/1/scenario,1. 當需要確認當前專案的遠端連接狀態時。
GameManualItem/content/git remote/commandDetail/1/example,"當使用者 A 已經成功將遠端儲存庫從 Git 服務平台複製到本地設備中。
如果想要確認是否已經正確連接到對應的遠端儲存庫，
可以執行以下指令："
GameManualItem/content/git remote/commandDetail/1/exampleBox,git remote <color=#CF001C>-v</color>
GameManualItem/content/git remote/commandDetail/1/hint,"1. 沒有與任何遠端儲存庫連接時不會有回應：
如果專案尚未建立與其他遠端儲存庫的連接。
執行指令後將不會返回任何訊息。"
GameManualItem/content/git push/1,"'git push' 是與 '遠端管理' 有關的指令類型

這個指令用於將本地分支的內容上傳到指定的遠端儲存庫，
同時遠端儲存庫將創建並更新相對應的遠端分支。"
GameManualItem/content/git push/commandDetail/1,"git push <color=#CF001C>遠端儲存庫別名</color> <color=""#173D91"">本地分支</color>"
GameManualItem/content/git push/commandDetail/1/use,"將指定的本地分支上傳到指定的遠端儲存庫。
在遠端儲存庫上創建同名的遠端分支，
並同步本地分支的 '提交記錄'。"
GameManualItem/content/git push/commandDetail/1/scenario,"1. 當已完成部分功能時。
2. 需要備份本地分支的內容時。
3. 當功能已經完全開發完畢時。"
GameManualItem/content/git push/commandDetail/1/example,"當使用者 A 已經在 'new-feature' 分支上完成功能。
想要上傳分支的內容到遠端儲存庫，可以執行以下指令："
GameManualItem/content/git push/commandDetail/1/exampleBox,"git push <color=#CF001C>origin</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git push/commandDetail/1/hint,"1. 確認遠端儲存庫的名稱：
通常情況下，在開發專案時只需要連接一個遠端儲存庫
這個遠端儲存庫在 Git 中被命名為 'origin'。

但是，如果您有連接到多個遠端儲存庫。
在上傳修改內容之前，
請使用 'git remote -v' 指令檢查正確的遠端儲存庫名稱。"
GameManualItem/content/git push/commandDetail/2,"git push <color=#CF001C>-d 或 --delete</color> <color=""#173D91"">遠端儲存庫別名</color> <color=#244B0E>分支名稱</color>"
GameManualItem/content/git push/commandDetail/2/use,刪除指定遠端儲存庫中的特定遠端分支。
GameManualItem/content/git push/commandDetail/2/scenario,1. 當特定遠端分支已經被合併到遠端主分支時。
GameManualItem/content/git push/commandDetail/2/example,"當使用者 A 創建的 Pull Request 
已經將 'new-feature' 分支成功合併到遠端的 'master' 分支時，
可以執行以下指令來刪除遠端分支："
GameManualItem/content/git push/commandDetail/2/exampleBox,"git push <color=#CF001C>-d</color> <color=""#173D91"">origin</color> <color=#244B0E>new-feature</color>"
GameManualItem/content/git push/commandDetail/2/hint,"1. 確認遠端儲存庫的名稱：
通常情況下，在開發專案時只需要連接一個遠端儲存庫
這個遠端儲存庫在 Git 中被命名為 'origin'。

但是，如果您有連接到多個遠端儲存庫。
在刪除分支之前，
請使用 'git remote -v' 指令檢查正確的遠端儲存庫名稱。"
GameManualItem/content/git pull/1,"'git pull' 是與 '遠端管理' 有關的指令類型

這個指令用於將本地分支與遠端儲存庫中的分支同步，
以確保您的本地分支保持最新的狀態。

當執行這個指令時，它會依序執行以下兩個操作：
1. 從遠端儲存庫下載最新的 '提交記錄'
2. 將這些新的 '提交記錄' 合併到您的本地分支

其中，第 2 個操作和 'git merge' 指令的功能相似，
Git 將根據分支之間的差異自動選擇合併模式之一。"
GameManualItem/content/git pull/commandDetail/1,"git pull <color=#CF001C>遠端儲存庫別名</color> <color=""#173D91"">分支名稱</color>"
GameManualItem/content/git pull/commandDetail/1/use,將當前本地分支同步至指定遠端儲存庫中的指定遠端分支。
GameManualItem/content/git pull/commandDetail/1/scenario,"1. 需要在其他本地設備上開發專案時。
2. 在準備創建 Pull Request 之前，確認合併流程的步驟之一"
GameManualItem/content/git pull/commandDetail/1/example,"當使用者 A 需要在其他設備上開發專案，
但本地儲存庫已經很長時間沒有更新時，
可以執行以下指令來更新本地 'new-feature' 分支："
GameManualItem/content/git pull/commandDetail/1/exampleBox,"git pull <color=#CF001C>origin</color> <color=""#173D91"">new-feature</color>"
GameManualItem/content/git pull/commandDetail/1/hint,"1. 確認遠端儲存庫的名稱：
通常情況下，在開發專案時只需要連接一個遠端儲存庫
這個遠端儲存庫在 Git 中被命名為 'origin'。

但是，如果您有連接到多個遠端儲存庫。
在更新內容之前，
請使用 'git remote -v' 指令檢查正確的遠端儲存庫名稱。

2. 確保切換到正確的分支：
在執行這個指令之前，請確保您位於正確的分支上。

假如您在 'master' 分支上執行 'git pull origin new-feature'，
'master' 分支會獲得遠端 'new-feature'的 '提交記錄'。
這會造成不必要的困擾。"
GameManualItem/content/IntroGameManual/1,"遊戲手冊可以幫助您回顧之前在遊戲中學到的內容。
您隨時可以在選擇關卡畫面或遊玩關卡時開啟它以查看手冊內容。

如果在遊戲中遇到困難，無法解決當前的挑戰時。
遊戲手冊可以提供提示和解決方案。

隨著您遊玩新的關卡，新的知識將被解鎖並添加到其中。
根據知識的種類分為三個主題：
1. Git 指令
遊戲中會學到的 Git 指令都歸類在這個分類下。
包括每個指令的使用方法、情境和注意事項。

2. 遊戲規則與視窗
這個分類包括了遊戲中的系統、視窗、規則等內容。
如果您想回顧如何操作遊戲，就可以從此分類來了解。

3. 版本控制
這裡包含版本控制、Git 相關的知識和概念。

當完成遊戲的某個關卡後，想要複習之前學到的知識時。
就可以開啟遊戲手冊來複習。
或者是直接在選擇關卡畫面中選擇要複習的關卡並進行實際練習。"
GameManualItem/content/IntroGameManual/2/Title,手冊知識列表：
GameManualItem/content/IntroGameManual/2,"在遊戲手冊中，左側列出了每個主題下的內容。
您可以點擊左上方的分類按鈕，以查看每個分類中包含的知識列表。

知識列表有三種不同的圖示：
1. 未解鎖的知識，您可以通過遊玩新關卡來解鎖。"
GameManualItem/content/IntroGameManual/3,2. 已解鎖的知識。
GameManualItem/content/IntroGameManual/4,3. 已解鎖的知識，並且在當前關卡中會使用到。
GameManualItem/content/IntroGameManual/5,"在遊戲手冊中，如果您看到 ★ 圖示，
通常表示該知識會在當前關卡中使用。

這個提示對 'Git 指令' 分類特別有幫助，
它能幫助您確定哪些指令將在當前關卡中使用。"
GameManualItem/content/IntroFileContent/1,"檔案內容視窗模擬了現實電腦中的文件編輯工具，
讓您可以對指定文件的內容進行編輯。

這個視窗具備以下功能：
1. 新增內容
2. 修改特定行數的內容
3. 刪除特定行數的內容
4. 重新命名當前文件"
GameManualItem/content/IntroFileContent/2/Title,標題欄介紹
GameManualItem/content/IntroFileContent/2,"左側文字：當前編輯的文件名稱
右側鉛筆圖示：重新命名文件按鈕"
GameManualItem/content/IntroFileContent/3/Title,文件內容區域
GameManualItem/content/IntroFileContent/3,"在開啟指定文件後，文件的內容會顯示在此區域。
這個區域包括以下內容：
·左側鉛筆按鈕：修改指定行數文字內容
·中間文字：當前行數的文字內容
·右側 X 按鈕：刪除指定行數文字內容

此外，底部有一個 + 按鈕，用於新增文件內容。"
GameManualItem/content/IntroFileContent/4,"如果您在遊戲過程中執行了不正確的操作，
系統會在此顯示錯誤訊息，並提供造成錯誤的原因。

想要了解如何避免操作錯誤發生
可以參考遊戲手冊中的 '如何完美達成目標'。"
GameManualItem/content/IntroFileManager/1,"檔案管理視窗模擬了現實電腦中的檔案總管系統，
展示目前模擬背景中的電腦內容。

在使用 Git 的過程中，檔案管理視窗會維持打開的狀態。
因為某些 Git 指令需要您輸入特定檔案的名稱。"
GameManualItem/content/IntroFileManager/2/Title,工具欄介紹
GameManualItem/content/IntroFileManager/2,"左側按鈕：返回上一層資料夾
右側文字框：顯示目前所在的資料夾位置/路徑（Home 表示首頁）"
GameManualItem/content/IntroFileManager/3/Title,檔案類型介紹
GameManualItem/content/IntroFileManager/3,"在本遊戲裡，檔案管理中的文件簡單分為兩種類型。
您可以根據圖示進行區分：

1. 文件類型"
GameManualItem/content/IntroFileManager/4,"您可以透過點擊滑鼠左鍵來開啟 '檔案內容' 視窗。
同時，右鍵點擊文件圖示會彈出功能選單。

2. 資料夾類型"
GameManualItem/content/IntroFileManager/5,"對目標資料夾點擊滑鼠左鍵來移動路徑。
移動後，您可以查看資料夾中的內容。"
GameManualItem/content/IntroFileManager/6,"如果您在遊戲過程中執行了不正確的操作，
系統會在此顯示錯誤訊息，並提供造成錯誤的原因。

想要了解如何避免操作錯誤發生
可以參考遊戲手冊中的 '如何完美達成目標'。"
GameManualItem/content/IssuesBackupFile/1,"備份檔案雖然能夠簡單快速的管理專案。
但是長期下來會產生大量問題，
導致專案變得難以管理，進而影響開發效率。

以下將介紹幾個常見的問題：

<b>1. 專案資料夾出現不相關的文件</b>
     如果需要備份檔案，就需要複製文件並命名成方便辨識的名稱。
     時間一長，資料夾中會多出大量不相關的文件，造成管理上的不便。

<b>2. 難以查看不同版本的差異：</b>
     如果想要知道某個版本的檔案做了什麼修改時，
     需要將整個文件內容瀏覽一遍才行。
     當開發過程中發生嚴重錯誤時，會花費大量時間和精力去尋找發生錯誤的來源。

<b>3. 修改到錯誤的檔案上</b>
     當專案中出現過多不相關的檔案時，
     可能會不小心在舊版本文件上改動內容。
     造成專案記錄錯亂。

<b>4. 團隊開發的不便</b>
     當我們想要與其他人合作開發專案時，
     備份檔案的方式會嚴重破壞開發流程。
     例如：備份檔案的數量、查看版本差異的時間、如何將團隊的內容合併在一起等系列問題。

以上只是較為常見的問題，
使用備份檔案來管理專案，可能會造成許多意想不到的麻煩。

使用 Git 來管理專案。
能夠解決上述問題，進而提升專案的穩定性和效率。
讓您可以花費更多時間在開發專案上。"
GameManualItem/content/DetachedHEAD/1,"分離 HEAD（Detached HEAD）是一種情況，
指的是當目前 HEAD 位於某個提交上，而不在 Git 儲存庫中的任何分支上時。

這種情況通常發生在我們使用以下指令時："
GameManualItem/content/DetachedHEAD/1/Command,git checkout <color=#CF001C>提交ID</color>
GameManualItem/content/DetachedHEAD/2,"這個指令會將 HEAD 移動到指定的提交，此時 HEAD 會處於 '分離 HEAD' 狀態。

如果在這種情況下創建新的提交，它將不屬於任何分支。
這些提交不僅存在丟失的風險，還會引起專案管理上的麻煩。

因此，當我們切換到其他提交以查看檔案內容後。
如果要繼續開發功能，請不要忘記要切換指定分支上。
您可以使用以下指令來切換回指定分支："
GameManualItem/content/DetachedHEAD/2/Command,git checkout <color=#CF001C>分支名稱</color>
GameManualItem/content/DetachedHEAD/2/tip,"在遊戲中，當分離 HEAD 的情況發生時，
提交記錄視窗的 HEAD 旗子圖示將變為透明。
此外，遊戲會提醒您在分離 HEAD 情況下無法進行提交。"
GameManualItem/content/.gitAndGitCoreAreas/1/Title,.git 資料夾介紹
GameManualItem/content/.gitAndGitCoreAreas/1,"當您確定好要管理的專案後，
我們需要在專案資料夾路徑下執行以下指令來創建 Git 管理系統："
GameManualItem/content/.gitAndGitCoreAreas/1/Command,git init
GameManualItem/content/.gitAndGitCoreAreas/2,執行成功後，專案資料夾中將會生成一個名為 <color=#CF001C>.git</color> 的隱藏資料夾。
GameManualItem/content/.gitAndGitCoreAreas/3,"<color=#CF001C>.git</color> 是 Git 的核心組成部份，它將儲存與專案相關的所有資料，
包括所有版本修改歷史等信息。
如果沒有這個資料夾，您將無法執行大部分的 Git 指令。"
GameManualItem/content/.gitAndGitCoreAreas/4/Title,Git 的核心區域
GameManualItem/content/.gitAndGitCoreAreas/5,"Git 基本是由三個重要的區域所組成，這些區域將幫助我們使用 Git 來管理專案：

<b>1. 工作目錄 (Working Directory)：</b>
     專案資料夾內的區域都稱作工作目錄，
     包括專案中的文字、圖片檔案。
     在工作目錄中，我們將新增、編輯檔案內容來開發專案。

<b>2. 暫存區域 (Staging Area)：</b>
     暫存區域作為 '工作目錄' 與 '儲存庫' 之間的橋樑，
     我們將 '工作目錄' 中已修改的檔案移動到此區域。
     在準備完成後，通過指令一次性地將它們移動到 '儲存庫' 中，來創建一個新的 '提交'。

<b>3. 儲存庫 (Repository)：</b>
     儲存庫是 Git 的核心區域，它保存了專案中的所有記錄。
     當完成提交後，它將存放至 '儲存庫' 中的 '提交記錄' 區域中。
     這個區域有助於追蹤版本之間的變化。"
GameManualItem/content/.gitAndGitCoreAreas/5/tip,"實際上，<color=#CF001C>.git</color> 資料夾其實就是 '儲存庫'，
而 '暫存區域' 也位於這個資料夾中。"
GameManualItem/content/RuleNameBranch/1,"學習如何命名分支是非常重要的，
因為清晰明確的分支名稱有助於更有效地管理專案。
並讓團隊更容易理解每個分支間的用途。

以下是命名分支的一些原則：

<b>1. 保持簡潔明確：</b>
     分支名稱應該簡單而明確，包含足夠的信息以描述創建分支的目的。"
GameManualItem/content/RuleNameBranch/1/tip,"例如：使用 <color=#CF001C>fix-login-bug</color> 比 <color=#CF001C>fix-login-bug-in-homepage</color> 更好。
避免使用過長的分支名稱。"
GameManualItem/content/RuleNameBranch/2,"
<b>2. 避免使用特殊符號、空格、英文以外的字母：</b>
     分支名稱應該避免使用特殊符號、空格和英文以外的字母。
     以確保專案能在不同語言環境下使用和閱讀。

     正確的命名應該使用小寫英文字母，並使用短劃線（-）或正斜杠（/）來區分單字。
     這樣可以增加分支命名的可讀性。"
GameManualItem/content/RuleNameBranch/2/tip,例如：<color=#CF001C>new-system-feature</color> 或 <color=#CF001C>new/system/feature</color>
GameManualItem/content/RuleNameBranch/3,"
<b>3. 包括作者名稱：</b>
     在團隊開發中，將作者名稱寫入分支名稱。
     有助於追蹤團隊成員的開發進度，並能夠識別出負責開發的人。"
GameManualItem/content/RuleNameBranch/3/tip,例如：<color=#CF001C>john-bugfix-quest</color>
GameManualItem/content/RuleNameBranch/4,"
<b>4. 添加事件ID：</b>
     在團隊專案裡，開發者通常會建立討論區以解決問題。
     將事件 ID 寫入分支名稱有助於追蹤對應問題。"
GameManualItem/content/RuleNameBranch/4/tip,例如：<color=#CF001C>pan-3759-trade</color>
GameManualItem/content/RuleNameBranch/5,"以上的分支命名原則有助於了解每個分支的用途。

如果您參與了團隊開發，請遵循團隊的分支命名原則，以保持一致性。
這有助於團隊更好地理解和管理分支。"
GameManualItem/content/ProcessCreateCommit/1,"當成功完成特定功能的開發，或者需要備份開發中的內容時。
我們就需要在本地儲存庫中創建提交。

以下是創建提交的流程：

<b>1. 確定要上傳的檔案：</b>
     我們需要將檔案移到暫存區域，才能將檔案內容推送到儲存庫以創建提交。
     請通過指令來確認暫存區域中包含了需要保存的檔案，
     而不相關的檔案則不應該放入暫存區域中。

<b>2. 填寫提交訊息並創建提交：</b>
     在確認完成後，通過以下指令來創建提交。"
GameManualItem/content/ProcessCreateCommit/1/Command,"git commit <color=#CF001C>-m 或 --message</color> <color=""#173D91"">""提交訊息""</color>"
GameManualItem/content/ProcessCreateCommit/2,"     提交訊息應該清晰地描述你所做的更改，這有助於以後追蹤和理解提交的目的。

     執行指令後，表示您已完成創建提交。
     您也可以透過以下指令來確認操作是否成功。"
GameManualItem/content/ProcessCreateCommit/2/Command,git log
GameManualItem/content/ProcessCreateCommit/3,"
<b>3. 將提交上傳至遠端儲存庫（可選）</b>
     在本地分支上完成開發後，可以通過以下指令來推送到連結的遠端儲存庫："
GameManualItem/content/ProcessCreateCommit/3/Command,"git push <color=#CF001C>遠端儲存庫別名</color> <color=""#173D91"">本地分支</color>"
GameManualItem/content/RuleCommitMessage/1,"學習如何填寫 Git 提交訊息是非常重要的，
因為清晰明確的提交訊息可以更好地管理專案，
並讓團隊和個人更容易理解每個提交的目的。

以下是填寫提交訊息的一些原則：

<b>1. 保持簡潔明確：</b>
     良好的提交訊息應該能夠用一句話清楚說明本次提交的目的，以幫助其他開發者快速理解。"
GameManualItem/content/RuleCommitMessage/1/tip,例如：<color=#CF001C>新增網頁登入界面結構</color>。
GameManualItem/content/RuleCommitMessage/2,"
<b>2. 使用關鍵訊息：</b>
     根據提交的目的，可以在訊息的開頭使用動詞。"
GameManualItem/content/RuleCommitMessage/2/tip,"加上 '新增'、'更新'、'刪除' 等動詞以增加可讀性。
例如：<color=#CF001C>修復錯誤：登入後未顯示歡迎訊息</color>。"
GameManualItem/content/RuleCommitMessage/3,"
<b>3. 避免無意義的訊息：</b>
     在填寫提交信息時，避免使用模糊或無意義的訊息。
     因為這會讓其他開發者難以理解提交的目的。"
GameManualItem/content/RuleCommitMessage/3/tip,"例如：只填寫 <color=#CF001C>新增提交</color> 或 <color=#CF001C>修復錯誤</color>
這種簡短且沒有特定意義的訊息。"
GameManualItem/content/RuleCommitMessage/4,"
<b>4. 專注於單一主題：</b>
     良好的開發流程中，應該專注於一個特定目標，並將目標填寫在提交訊息中。
     這樣不僅能夠讓每個提交更加明確，也減少了開發風險。"
GameManualItem/content/RuleCommitMessage/4/tip,"例如，如果同時開發功能 A 和功能 B，但它們之間關聯不大。
就可以考慮將它們分為兩次提交。"
GameManualItem/content/RuleCommitMessage/5,"這些提交訊息原則，有助於團隊和個人更好地理解提交之間的目的。
提高專案管理的穩定性和效率。"
GameManualItem/content/ResolveMergeConflict/1,"在進行分支合併時，可能會出現合併衝突。
尤其在多人協作裡更為常見。

當兩個分支對同一文件做了修改，但修改內容不同時。
Git 無法自行判斷哪些內容應該要留下、哪些要捨棄，
因此會提醒開發者需要手動解決衝突。

以下是解決合併衝突的步驟：

<b>1. 確認發生衝突的檔案：</b>
     當發生衝突時，命令行會顯示所有發生衝突的檔案。
     這些檔案在暫存區域裡也會變成 '未追蹤'。

<b>2. 了解衝突文件內容：</b>
     衝突的檔案內容會新增三行特殊符號  <color=#CF001C><</color>，<color=#CF001C>=</color>，和 <color=#CF001C>></color>。
     兩個合併分支的修改內容也包含在其中。"
GameManualItem/content/ResolveMergeConflict/2,"     例如：上圖的檔案裡，
     想要將 <color=#CF001C>new-feature</color> 分支合併至 <color=#CF001C>master</color> 分支，但是發生了文件衝突。

     特殊符號區兩個分支的修改內容
     第 1 到第 3 行的內容顯示的是 HEAD，表示所在分支 <color=#CF001C>master</color> 的修改內容。
     而第 3 到第 5 行的內容，表示分支 <color=#CF001C>new-feature</color> 的修改內容。

<b>3. 解決文件衝突：</b>
     解決文件衝突需要去判斷要保留、刪除的內容。"
GameManualItem/content/ResolveMergeConflict/3,"     例如:
     如何需要保留 <color=#CF001C>new-feature</color> 分支的修改內容，移除 <color=#CF001C>master</color> 分支的內容的話。
     請刪除以下內容：
     1. 三行的特殊分隔符號（第 1、3、5 行）
     2. <color=#CF001C>master</color> 分支的修改內容（第 2 行）

<b>4. 創建提交以繼續進行合併：</b>
     當確認並解決所有衝突文件後，需要將解決衝突後的內容新建一個提交。
     提交後，合併將會繼續進行。
     最後，<color=#CF001C>master</color> 分支會獲得剛才解決衝突後的提交。"
GameManualItem/content/gitMergeModes/1,"當執行分支合併指令時，Git 會比較兩個目標分支的提交記錄，並採用其中一種合併模式。

以下是 Git 的三種合併模式：
1. 快速合併（Fast-Forward Merge）
2. 自動合併（Auto Merge）
3. 合併衝突（Merge Conflict）"
GameManualItem/content/gitMergeModes/2/Title,快速合併
GameManualItem/content/gitMergeModes/2,"比較兩個分支的提交記錄，
發現兩個分支的路徑沒有分叉，保持成一條直線，
Git 將執行快速合併。

快速合併會更新當前分支的提交記錄，
最終與指定合併分支的提交記錄相同。
並且過程中不會新增提交，只有提交記錄被更新。"
GameManualItem/content/gitMergeModes/3/Title,自動合併
GameManualItem/content/gitMergeModes/3,"比較兩個分支的提交記錄，
發現提交記錄分成兩條路徑，它們有各自的開發提交。
Git 將比較兩個分支的修改內容。

檢查後如果發現分支的修改內容不會造成衝突，則使用自動合併。

在將指定分支的內容合併到當前分支後，會多新增一個提交。
表示合併已成功，提交訊息會顯示進行合併的兩個分支名稱。"
GameManualItem/content/gitMergeModes/4/Title,合併衝突
GameManualItem/content/gitMergeModes/4,"與自動合併相似，
當兩個目標分支分成兩條路徑，有各自的開發提交時。
Git 將比較兩個分支的修改內容。

如果都在同個文件上修改內容，並且有不同的修改時。
Git 會提醒開發者合併發生衝突，需要手動解決。
這時採用的是合併衝突模式。

當衝突發生時，合併過程將會暫停。
開發者需要進入發生衝突的檔案，
決定哪些內容需要保留，哪些需要刪除。

解決所有衝突後，將這些內容新建提交，合併將會繼續進行。
最後，指定分支的內容將合併到當前分支。
並且當前分支會新增一個提交。
這個提交包含著我們解決衝突後的檔案內容。"
GameManualItem/content/gitMergeModes/4/tip,"自動合併與合併衝突是相關的，
而本遊戲將合併分為三種模式，以提高辨認度。"
GameManualItem/content/IntroGameScore/1/Title,得 分 介 紹
GameManualItem/content/IntroGameScore/1,"在遊戲關卡中，
您需要執行正確的操作來達成當前目標。

完成目標時會根據您的表現給予評價，
您可以通過計分表中的星星圖示
來得知當前目標完成後可以獲得的評價。

評價分為以下四種：
1. 完美達成目標 (1000 分)："
GameManualItem/content/IntroGameScore/2,"在完成當前目標的過程中，
沒有執行任何錯誤操作時得到的評價。

2. 完成目標，但過程中有錯誤操作 (750 分)："
GameManualItem/content/IntroGameScore/3,"完成當前目標，
但在過程中執行了錯誤操作得到的評價。"
GameManualItem/content/IntroGameScore/3/tip,"關於如何得到完美評價，
可以參考遊戲手冊中的 '如何完美達成目標'。"
GameManualItem/content/IntroGameScore/4,3. 使用提示功能達成目標 (500 分)：
GameManualItem/content/IntroGameScore/5,"完成當前目標的過程中，
曾使用過提示功能得到的評價

4. 使用解答功能達成目標 (0 分)："
GameManualItem/content/IntroGameScore/6,"完成當前目標時的過程中，
曾使用過解答功能得到的評價。

通過遊戲關卡後，
可以在結算畫面中查看每一個完成目標的評價。"
GameManualItem/content/IntroGame/1/Title,遊 戲 介 紹
GameManualItem/content/IntroGame/1,"歡迎來到 Git Education Game 的遊戲世界！
本遊戲將教會您如何使用 Git 來有效管理專案。

Git 是一個強大的專案管理工具，
它能幫助您追蹤專案的開發歷程，
提高專案的穩定性和開發效率。

它對軟體開發人員來說是很重要的工具，
同時，只要是長期需要進行管理的專案
都能夠通過 Git 來有效管理它們

在遊戲中，您將學習到 Git 的基本概念和用法。
即使您沒有寫程式的經驗或從未接觸過 Git。
完成遊戲後，您將具備使用 Git 的能力。"
GameManualItem/content/IntroGame/2/Title,Git 主題關卡
GameManualItem/content/IntroGame/2,"本遊戲將 Git 的核心知識分成了多個關卡，
並組成三個主題關卡：
1. Git 的基礎：
學習 Git 的核心概念和基本指令。
完成主題關卡後，
將具備使用 Git 進行專案管理的基本能力。

2. 分支管理：
學習 Git 的分支系統，
讓專案能以更穩定和有效的方式進行開發。

3. 遠端管理：
學習 Git 的遠端管理功能，
讓專案能夠通過網絡與團隊共同開發專案。"
GameManualItem/content/IntroGame/3/Title,模擬場景目標
GameManualItem/content/IntroGame/3,"每個關卡會生成符合學習目標的場景，讓您在故事情節中解決實際問題。

每個場景都有一個主要目標，
本遊戲將它細分成了多個小目標。

您只需按照當前目標和指示執行動作，
當所有目標都完成後即可通過關卡。

在遊戲畫面左上方，顯示著當前目標的要求。
請按照指示一一完成任務，來完成關卡吧"
GameManualItem/content/IntroGame/4/Title,遊戲得分
GameManualItem/content/IntroGame/4,"遊戲過程中，每個完成的目標會根據您的表現獲得不同評價。
關卡分數表示對關卡的熟練程度。

完成關卡後，遊戲將給予您 1 到 4 顆星的最後評價。
並且，您在關卡的得分和通過時間將上傳至全球排行榜。
請試著獲得高分來成為全球前 10 名的 Git 學習者吧！"
GameManualItem/content/CheckBeforeMergeMainBrach/1,"在準備將開發完成的分支合併至遠端主分支前，
通過 '合併前的確認' 流程有助於確保合併後專案的完整性和避免合併衝突。

以下是應該進行確認的流程：

<b>1. 檢查分支的提交記錄</b>
     請確認 '開發分支' 和 '主分支' 的提交記錄與遠端儲存庫一致。
     以確保後續的動作是有效的。

<b>2. 合併本地主分支</b>
     將本地電腦中的 '主分支' 合併至 '開發分支' 中，
     通過這種方式來整合兩個分支的修改內容。

<b>3. 驗證合併後專案的運行狀態</b>
     在合併後，需要檢查專案是否出現問題。
     如果發生問題，需要在本地將問題解決。

<b>4. 將合併後的 '開發分支' 上傳至遠端儲存庫</b>
     當合併後的專案可以順利運行，或是將合併後造成的問題解決後。
     就可以將這個分支上傳至遠端。

當完成以上流程後，就能創建 Pull Request 合併請求。
讓合併後的 '開發分支' 合併至遠端主分支上。"
GameManualItem/content/VersionControlAndGit/1/Title,版 本 控 制
GameManualItem/content/VersionControlAndGit/1,"版本控制是一個用於管理文件、程式碼和其他內容的系統。
它非常適合應用在需要長期運營和開發的專案。
對於程式開發領域來說是不可缺少的工具。

版本控制提供了以下的功能：

<b>1. 檔案內容追蹤：</b>
     每一次的更改都會被記錄下來，
     您能夠通過這些記錄得知
     誰做了修改、何時修改的以及具體的修改內容。

<b>2. 回溯版本：</b>
     當開發過程發生錯誤時，
     這個功能可以切換回錯誤發生之前的版本。
     而您目前開發的內容以及所有記錄都不會遺失。
     您可以輕易地移動到想要的版本上。

<b>3. 分支管理：</b>
     您可以將開發中的內容分成多個分支進行。
     分支管理最大的長處，就是分支間不會互相影響。
     以此來提升開發效率和穩定性。"
GameManualItem/content/VersionControlAndGit/2,"Git 是一個廣泛使用的版本控制工具，尤其在軟體開發領域上很受歡迎。

它結合了版本控制的原理，
允許使用者通過命令行（Command Line）輸入 Git 指令來執行各種操作。

這些指令通常是簡單易使用的，
您將會在本遊戲中學習並實際使用它們來完成場景目標。

Git 除了有上述版本控制提到的優點外，它也支持團隊協作。
網絡上有很多的 Git 服務平台（例如：GitHub、GitLab 等）。
這些平台允許您將專案上傳上去，並與其他成員共同開發它。"
GameManualItem/content/IntroStagingArea/1,"暫存區域視窗是一個
將 'git status' 指令的輸出結果獨立出來的視窗，
視窗將還原指令執行的內容。"
GameManualItem/content/IntroStagingArea/2/Title,當前顯示內容
GameManualItem/content/IntroStagingArea/2,"您可以點擊之前執行過的指令
來查看不同時期的暫存區域狀態。
這裡將顯示對應的指令 ID。"
GameManualItem/content/IntroStagingArea/3/Title,已追蹤與未追蹤區域
GameManualItem/content/IntroStagingArea/3,"遊戲將暫存區域內容簡化成了兩種檔案狀態：
1. 未追蹤區域：
比較當前提交和工作目錄的檔案內容，
發現工作目錄的內容不同，但尚未移動至暫存區域的檔案

2. 已追蹤區域：
比較當前提交和工作目錄的檔案內容，
發現工作目錄的內容不同，並加入至暫存區域的檔案"
GameManualItem/content/IntroStagingArea/4/Title,檔案狀態
GameManualItem/content/IntroStagingArea/4,"從左到右分別是：
1. 檔案狀態
2. 檔案在專案中的位置
3. 檔案名稱

其中，檔案狀態分成下列幾種：
1. 新增圖示"
GameManualItem/content/IntroStagingArea/5,"這個檔案是第一次被追蹤。

2. 修改圖示"
GameManualItem/content/IntroStagingArea/6,"檔案已被追蹤，但是內容有做修改。

3. 刪除圖示"
GameManualItem/content/IntroStagingArea/7,移除檔案的追蹤，通常表示該檔案已被刪除
GameManualItem/content/IntroAssistance/1,"對話視窗是遊戲中經常使用的視窗。
在遊戲開始前，需要點擊此按鈕來進行下一步。
關卡中會出現多個對話來引導您目前應該做什麼。

當系統允許您自由操作時，
再次點擊按鈕來啟動協助功能。
系統會跳出選項。"
GameManualItem/content/IntroAssistance/2/Title,回顧上一次的對話
GameManualItem/content/IntroAssistance/2,"對話中通常會包含教學內容和引導，
在忘記應該做什麼事情時就可以選擇這個選項。"
GameManualItem/content/IntroAssistance/3/Title,使用提示功能
GameManualItem/content/IntroAssistance/3,"提示功能將會根據當前的關卡目標，給予對應的提示。
使用了提示功能後，
本次完成目標的評價將會變為 '使用提示功能達成目標'。"
GameManualItem/content/IntroAssistance/4/Title,使用解答功能
GameManualItem/content/IntroAssistance/4,"解答功能會通過對話來協助您，直至當前目標完成。
使用了提示功能後，
本次完成目標的評價將會變為 '使用解答功能達成目標'。

如果要使用本功能，需要達成一定條件才能解鎖。
為了更好地學習 Git 指令與版本控制的知識，
請盡量通過其他方式來完成目標吧。"
GameManualItem/content/IntroResultsScreen/1,"在通過關卡時顯示的視窗。
系統會記錄您在關卡中執行的操作，
視窗中將統計它們，讓您了解自己在關卡中的熟練度。"
GameManualItem/content/IntroResultsScreen/2/Title,關卡評價與細節統計
GameManualItem/content/IntroResultsScreen/2,"顯示本次關卡的總得分和關卡評價，
每個關卡都有 1 到 4 顆星的評價。
您可以通過評價來驗證在關卡中的熟練度。

另外，下方將顯示在關卡中執行動作的次數統計。"
GameManualItem/content/IntroResultsScreen/3/Title,排行榜
GameManualItem/content/IntroResultsScreen/3,"個人排行榜是您在本次關卡的最佳記錄
通過排行榜來追蹤自己的進步，
請嘗試打破自己的記錄，來加強對關卡的熟練度吧。

另外，關卡的得分和通過時間將上傳至全球排行榜。
您可以通過右上方的按鈕來查看本關卡的全球排行榜。"
GameManualItem/content/IntroResultsScreen/4/Title,完成目標列表
GameManualItem/content/IntroResultsScreen/4,"顯示本次關卡中已完成的所有目標。
每個目標都包括任務描述和完成目標花費的時間。

完成的目標會分為四種評價：
1. 完美達成目標"
GameManualItem/content/IntroResultsScreen/5,2. 完成目標，但過程中有錯誤操作
GameManualItem/content/IntroResultsScreen/6,3. 使用提示功能達成目標
GameManualItem/content/IntroResultsScreen/7,4. 使用解答功能達成目標
GameManualItem/content/IntroCommandLine/1,"命令行視窗模擬了現實電腦中的命令提示字元（CMD）視窗。
使用者能在視窗上執行系統指令和 Git 指令。

在實際執行 Git 指令時，
大部分的指令執行結果都會顯示在這個視窗中。"
GameManualItem/content/IntroCommandLine/2/Title,工具欄介紹
GameManualItem/content/IntroCommandLine/2,右側垃圾桶圖示：清除指令歷史記錄的內容
GameManualItem/content/IntroCommandLine/3/Title,指令歷史記錄
GameManualItem/content/IntroCommandLine/3,"用於記錄之前執行過的指令。
點擊其中一個指令，來查看執行後的結果。
或者將滑鼠移到指令上，來快速預覽結果。

執行指令後，會有三種結果：
1. 執行成功："
GameManualItem/content/IntroCommandLine/4,"執行的指令正確且不會對專案造成問題時。

2. 警告："
GameManualItem/content/IntroCommandLine/5,"指令執行中斷，通常表示執行的內容有誤。
遊戲會提醒您執行失敗的原因。

3. 指令執行中止："
GameManualItem/content/IntroCommandLine/6,"執行的指令可能對專案造成問題。
如果指令執行成功，需要花費額外時間和精力來解決問題。
在遊戲中，執行的內容會強制中止，並視為操作錯誤。"
GameManualItem/content/IntroCommandLine/7/Title,指令執行細節
GameManualItem/content/IntroCommandLine/7,執行指令後，其結果會顯示在這裡。
GameManualItem/content/IntroCommandLine/8/Title,當前位置
GameManualItem/content/IntroCommandLine/8,"滑鼠移到左側指針圖示：當前命令行位置
滑鼠移到右側分支圖示：當前所在分支、提交"
GameManualItem/content/IntroCommandLine/8/tip,"在本遊戲裡，
命令行視窗將同步檔案管理視窗的路徑，
如果在檔案管理視窗中移動路徑，命令行也會更新路徑。"
GameManualItem/content/IntroCommandLine/9/Title,輸入指令欄
GameManualItem/content/IntroCommandLine/9,"用於執行 Git 指令，
在輸入指令的過程中能進行以下操作：
1. 點擊 Tab 鍵或放大鏡圖示來使用快速搜尋功能
2. 點擊 Enter 鍵或箭頭圖示來執行指令。
3. 按下方向鍵上下來快速填入之前執行過的指令。
4. 選取輸入欄時，點擊右鍵來貼上複製的內容。"
GameManualItem/content/IntroCommandLine/10/Title,快速完成功能
GameManualItem/content/IntroCommandLine/10,"根據目前輸入的內容搜尋合適的結果，以快速填入到輸入欄中。
適用於以下情景：
1. 快速填入指令
2. 不熟悉指令的結構
3. 使用遊戲中的系統：填入提交訊息、命名分支"
GameManualItem/content/IntroCommandLine/10/tip,"關於如何使用快速填入提交訊息、命名分支功能
請查看 'git commit'、'git branch' 指令"
GameManualItem/content/IntroGitCommand/1/Title,Git 指令結構介紹
GameManualItem/content/IntroGitCommand/1,"Git 是一個廣泛使用的版本控制工具，
使用者需要在命令行上輸入 Git 指令來執行各種操作。

Git 指令的結構是由多段的關鍵字組成的
並通過空格來區分。

例如："
GameManualItem/content/IntroGitCommand/1/exampleBox,"git <color=#CF001C>add</color> <color=""#173D91"">Text_File.txt</color>"
GameManualItem/content/IntroGitCommand/2,"以上的指令總共有 3 個指令欄位：

<b>第 1 個欄位 'git'：</b>
是執行 Git 指令時必須輸入的關鍵字
Git 相關的指令需要在開頭輸入 'git'

<b>第 2 個欄位 'add'：</b>
這欄內容通常用於決定 Git 指令類型，
'add' 指令類型用於將檔案移入暫存區域。

<b>第 3 個欄位 'Text_File.txt'：</b>
根據不同的指令類型，
有些指令可以在前方加入其他關鍵字來達成多樣的功能。
查閱 Git 的官方網站，來得知一個指令類型的使用方法。"
GameManualItem/content/IntroGitCommand/3/Title,注意事項
GameManualItem/content/IntroGitCommand/3,"在本遊戲中，將注重於最基本且實用的 Git 指令。
您只需要學習遊戲手冊、關卡教學提到的指令即可。

以下是在執行 Git 指令需要注意的一些要點：

<b>1. 通過空格來區分指令欄位：</b>
Git 需要通過空格來確認每一個欄位的內容，
以此來執行不同的功能。

<b>2. 注意指令的大小寫：</b>
Git 指令需要確保大小寫一致，
來避免意外錯誤發生。

<b>3. 按照遊戲手冊、關卡教學提到的指令格式來輸入：</b>
本遊戲盡量簡化了多樣的 Git 指令結構，
按照教學中提到的使用方法，您就可以順利執行指令。"
GameManualItem/content/IntroCommitHistory/1,"提交記錄視窗是一個
將 'git log' 指令的輸出結果獨立出來的視窗。

視窗將還原指令執行的內容，
並做出一些改進來提升您對提交記錄的理解。"
GameManualItem/content/IntroCommitHistory/2/Title,當前顯示內容
GameManualItem/content/IntroCommitHistory/2,"您可以點擊之前執行過的指令，
來查看不同時期的提交記錄狀態。
這裡將顯示對應的指令 ID。"
GameManualItem/content/IntroCommitHistory/3/Title,提交記錄區域
GameManualItem/content/IntroCommitHistory/3,"提交記錄將分成本地和遠端兩個部分，
當本次場景擁有遠端儲存庫的話，
可以通過遠端折疊按鈕來展開、收起內容。"
GameManualItem/content/IntroCommitHistory/4/Title,提交記錄分支列表與 HEAD
GameManualItem/content/IntroCommitHistory/4,"這裡將顯示本地、遠端儲存庫包含的分支列表。
您可以藉由列表上的顏色，以及當前提交的顏色，
來得知它們屬於什麼分支。

另外，當點擊列表中一個分支時。
屬於點擊分支的所有提交將會切換成該分支代表的顏色。

旗子圖示的是 HEAD，表示當前 Git 所在的提交，
點擊在分支列表上的 HEAD，將顯示 HEAD 上的所有提交記錄。"
GameManualItem/content/IntroCommitHistory/5/Title,提交詳細內容
GameManualItem/content/IntroCommitHistory/5,"在實際運行 'git log' 指令時，
提交資訊如創建提交的作者、時間、訊息都會顯示於命令行上。

本遊戲將這些資訊隱藏起來，
如果要查看這些內容，請點擊特定的提交。
在彈窗中將顯示該提交的所有細節資訊。"
GameManualItem/content/IntroCommitHistory/6/Title,鎖起來的提交
GameManualItem/content/IntroCommitHistory/6,"在實際運行 'git log' 指令時，
如果我們沒有通過 'git pull' 等指令來更新遠端儲存庫。
實際上是看不見這些鎖住提交的資訊的。

遊戲中通過這個方式來提醒您，
如有需要，請使用 'git pull' 來更新遠端儲存庫的內容。"