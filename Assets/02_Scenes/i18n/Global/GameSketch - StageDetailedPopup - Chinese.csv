Common/None,無
SelfLeaderboard/TitleText,個 人 最 佳 成 績
SelfLeaderboard/ClearTimesText,-  通關次數：
StageIntroductionPanel/Title,關 卡 介 紹
StageIntroductionPanel/TitleText,關卡：
StageIntroductionPanel/StageOverviewTitle,關卡概述
StageIntroductionPanel/StageObjectivesTitle,關卡目標
ModeSelectionPanel/Title,模 式 選 擇
ModeSelectionPanel/TutorialModeButton,教學模式
ModeSelectionPanel/PracticeModeButton,練習模式
ModeSelectionPanel/BackToStageSelectionButton,回到關卡選擇畫面
ModeSelectionPanel/PlayThisStage,遊玩此關卡
TooltipMessage/TutorialModeDescription,"在教學模式下，
過程中將會有教學文字引導您完成模擬情景中的主要目標"
TooltipMessage/PracticeModeDescription,"在練習模式下，
您需要獨自完成模擬情景中提供的目標
（需要先通過教學模式才能解鎖）"
StageIntroductionPanel/StageOverview/Game Introduction,"'遊戲介紹' 關卡是您在這個 Git 教學遊戲的起點。
在這個關卡中，將介紹基本遊戲的玩法和規則。
您將通過 '備份檔案' 的方式，來熟悉遊戲的基本操作和介面。"
StageIntroductionPanel/StageObjective/Game Introduction,"1. 遊玩關卡來了解遊戲介面和操作。
2. 通過 '備份檔案' 的方法來熟悉遊戲環境和玩法。"
StageIntroductionPanel/StageOverview/Version Control and Git,"在這一關卡中，您將學習版本控制和 Git 的基本知識。
本關卡將重點介紹：
備份檔案的問題，版本控制、Git 的是什麼以及它們帶來的好處。
此關卡不包含實際操作，但在最後有一個小測驗來複習學習內容。"
StageIntroductionPanel/StageObjective/Version Control and Git,"1. 回顧上一關卡並點出 '備份檔案' 可能造成的問題。
2. 理解版本控制的基本概念和帶來的優點。
3. 了解什麼是 Git 以及使用它的優點。
4. 通過測驗來加深對版本控制和 Git 的理解。"
StageIntroductionPanel/StageOverview/Create Local Repository,"在這個關卡中，您將學習如何使用命令行界面創建第一個 Git 本地存儲庫。
通過文字教學和實際行動，
來學習如何控制命令行界面、執行 Git 命令，並了解 Git 的組成及工作流程。"
StageIntroductionPanel/StageObjective/Create Local Repository,"1. 學會開啟和使用命令行界面。
2. 理解並執行 'git --version' 指令，以檢查 Git 的安裝和版本。
3. 執行 'git init' 指令，在指定目錄創建一個新的 Git 儲存庫。
4. 了解 '.git' 資料夾的作用和組成。"
StageIntroductionPanel/StageOverview/Basic Staging Area,"在這個關卡中，您將學習 Git 暫存區域的基本操作。
本關卡將進一步認識暫存區域的結構，
並通過 Git 指令來查看暫存區域的內容和控制文件的追蹤狀態。"
StageIntroductionPanel/StageObjective/Basic Staging Area,"1. 理解暫存區域在 Git 工作流程中的作用和重要性。
2. 學會使用 'git status' 指令來查看暫存區域的狀態。
3. 熟悉如何使用 'git add' 指令將文件加入暫存區域。
4. 了解如何使用 'git reset' 指令將文件從暫存區域移除。"
StageIntroductionPanel/StageOverview/Advanced Staging Area,"在這個關卡中，您將學習 Git 暫存區域的進階操作。
本關卡將學會如何在指令前方加入參數來更高效地管理文件的暫存狀態。
您將學會如何一次性地移動資料夾的檔案和移動命令行路徑中的所有檔案。"
StageIntroductionPanel/StageObjective/Advanced Staging Area,"1. 學會在 'git add' 和 'git reset' 指令加入參數來更高效地操作暫存區域。
2. 在過程中了解 Git 指令的高靈活性"
StageIntroductionPanel/StageOverview/Creating First Version,"在這個關卡中，您將學習創建 Git 提交（commit）的流程。
前面的關卡裡，您已經學會將檔案加入至暫存區域。
而本次會將這些內容推入提交記錄中，並從中了解區域中的內容。"
StageIntroductionPanel/StageObjective/Creating First Version,"1. 使用 'git add'、'git reset' 指令將檔案加入、移出暫存區域。
2. 學習使用 'git commit' 指令來提交更改。
3. 理解提交訊息的重要性並學習如何填寫有意義的訊息。
4. 使用 'git status' 和 'git log' 來查看暫存區域和提交記錄的狀態。"
StageIntroductionPanel/StageOverview/Switching Project Versions,"在這個關卡中，您將學習如何使用 'git checkout' 指令來切換不同的提交版本。
並學習如何查看提交記錄，由此來移動 HEAD 到其他提交上。
過程中會遇到切換版本時會發生的情況。"
StageIntroductionPanel/StageObjective/Switching Project Versions,"1. 熟悉提交記錄的結構。
2. 學會使用 'git checkout 提交ID' 來切換到不同的提交。
3. 理解 '分離 HEAD'（Detached HEAD）的概念和造成的影響。
4. 學會如何使用 'git checkout 分支名稱' 將 HEAD 切換回指定分支。"
StageIntroductionPanel/StageOverview/Git Branching Basics,"在這個關卡中，您將學習 Git 分支的基本操作和管理技巧。

本次會介紹分支系統所帶來的好處，並通過場景來學習分支相關指令。

場景中會包含創建、查看、切換和刪除分支的動作。"
StageIntroductionPanel/StageObjective/Git Branching Basics,"1. 介紹分支管理在專案的重要性以及好處。
2. 學習使用 'git branch' 指令來管理分支，加入參數來使用更多功能。
3. 練習使用 'git checkout' 來切換分支。
4. 透過實際操作驗證分支管理在專案開發中的重要性。"
StageIntroductionPanel/StageOverview/Fast-Forward Merging,"在本次關卡中，您將學習如何使用 'git merge' 指令來合併分支。

您會練習如何將新功能分支合併回主分支，
並了解 Git 在合併分支時會選擇的合併模式。

本次將重點介紹 '快進合併'。"
StageIntroductionPanel/StageObjective/Fast-Forward Merging,"1. 練習使用 'git merge' 指令來合併分支。
2. 理解什麼是快進合併模式，以及為什麼 Git 會選擇它。
3. 完成分支合併後，學習刪除不再需要的分支。"
StageIntroductionPanel/StageOverview/Auto Merging,"在本次關卡中，您將學習如何使用 'git merge' 指令來合併分支。

本次將重點介紹 '自動合併'。

理解在兩個分支的提交記錄不在一直線時，Git 如何進行自動合併。"
StageIntroductionPanel/StageObjective/Auto Merging,"1. 通過兩次的分支合併，了解 '快進合併'、'自動合併' 的影響。
2. 理解自動合併過程中的 Git 如何判斷合併衝突的發生。
3. 動手合併分支，並觀察提交記錄的變化。"
StageIntroductionPanel/StageOverview/Merge Conflicts,"在本次關卡中，您將學習如何處理 Git 合併時出現的衝突。
理解 Git 在採用自動合併時會做出的判斷，
並練習識別和解決在合併不同分支時出現的文件衝突。"
StageIntroductionPanel/StageObjective/Merge Conflicts,"1. 學習合併衝突發生的原因。
2. 練習手動解決文件衝突。
3. 練習解決合併衝突的流程。"
StageIntroductionPanel/StageOverview/Create Remote Repository,"在本次關卡中，您將理解使用遠端儲存庫帶來的優點。
學習如何在 GitHub 等平台上創建遠端儲存庫，
並將其複製到本地電腦。"
StageIntroductionPanel/StageObjective/Create Remote Repository,"1. 理解遠端儲存庫在專案管理和團隊合作中的作用。
2. 在 Git 服務平台上創建一個新的遠端儲存庫。
3. 使用 'git clone' 指令將遠端儲存庫複製到本地電腦。
4. 通過 'git remote -v' 指令確認遠端儲存庫已正確連接到本地專案。"
StageIntroductionPanel/StageOverview/Push to Remote Branches,"在本次關卡中，您將學習如何將本地分支上傳到遠端儲存庫。
您將經歷以下情景：
1. 從本地儲存庫創建新分支，
2. 更新本地分支內容
3. 使用 'git push' 將更改推送到遠端儲存庫。
過程中將學會如何去創建、刪除遠端分支。"
StageIntroductionPanel/StageObjective/Push to Remote Branches,"1. 使用 'git push' 指令將本地分支上傳到遠端儲存庫。
2. 學習如何使用 'git push -d' 指令刪除遠端分支。"
StageIntroductionPanel/StageOverview/Keep Branches in Sync,"在本次關卡中，您將學習如何使用 'git pull' 同步遠端儲存庫的內容到本地分支。
本次會遇到兩個常見的場景，
需要您通過指令來獲取遠端儲存庫的分支到本地電腦上。"
StageIntroductionPanel/StageObjective/Keep Branches in Sync,"1. 理解為什麼 'git clone' 無法去解決場景中遇到的問題。
2. 使用 'git pull' 指令更新本地分支至遠端分支的最新版本。
3. 學習如何查看儲存庫所有的遠端分支。
4. 通過 'git branch' 進階的指令用法，來獲得指定的遠端分支"
StageIntroductionPanel/StageOverview/Preparation for Merging,"在本次關卡中，將學習在合併到遠端主分支前需要進行的確認和準備。
場景中將跟著流程來確認並解決任何潛在的衝突。
讓創建 Pull Request 流程變得流暢。"
StageIntroductionPanel/StageObjective/Preparation for Merging,"1. 確認本地開發分支和主分支的記錄與遠端分支一致。
2. 在本地將主分支合併到開發分支中，並處理可能的衝突。
3. 檢查合併後的專案是否運行正常，無出現問題。
4. 將合併後的開發分支成功推送至遠端儲存庫。"
StageIntroductionPanel/StageOverview/Creating a Pull Request,"在本次關卡中，您將學習如何在 Git 服務平台上創建合併請求（Pull Request）。
您將扮演創建合併請求者，經歷並解決過程中會遇到的問題。"
StageIntroductionPanel/StageObjective/Creating a Pull Request,"1. 理解 Pull Request 是什麼以及在團隊開發中的作用。
2. 實踐在 Git 服務平台上填寫並創建合併請求。
3. 理解 Pull Request 詳細頁面的結構。
4. 根據團隊成員的修改建議更新 Pull Request。"
StageIntroductionPanel/StageOverview/Review and Merge Pull Requests,"在這個關卡中，您將扮演審核人員的角色。
學習如何審核並合併Pull Request。
您將查看團隊成員的合併請求、提出修改建議，並在確認無誤後批准合併。"
StageIntroductionPanel/StageObjective/Review and Merge Pull Requests,"1. 學習如何審核 Pull Request 中的文件改動。
2. 練習提出有效的修改建議並與開發者進行溝通。
3. 在確保所有修改符合要求後，批准 Pull Request。
4. 當合併請求的條件都完成後，合併 Pull Request。"