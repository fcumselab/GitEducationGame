歡迎來到關卡 "版本控制 與 Git"！

這次將會注重在概念的解釋上，
所以本次關卡並沒有實際操作的部分

但是在觀看完了關卡中的對話後
為了確認您對本關卡的理解
最後會進行一次小測驗！

在這類型的關卡中，
並沒有連續答對的計數

如果回答正確可以獲得 1000 分
而答錯問題不會得分
================

在開始之前，讓我們先來回顧第一關卡
我們透過備份檔案的方式來完成期中簡報
雖然這是一種直接且快速的方式

但是，不知道您是否曾經做過更為複雜的簡報或專案
由於您在開發過程中備份了大量的檔案
導致難以去追蹤版本之間的差異

萬一在開發過程中遇到了嚴重的錯誤
需要您回到過去的版本以修復錯誤時
以上的這個問題將會嚴重的影響您的開發進度

而複製檔案會導致您的工作環境變得雜亂
甚至，您可能也會遇到以下的情況：
1. 不小心在舊版本的文件中進行專案開發
2. 備份檔案時覆蓋了現在正在開發的檔案

=====================================

為了避免這些問題的發生
我們就可以引用版本控制系統來協助我們管理專案！

首先，讓我們先來了解什麼是版本控制吧

版本控制在程式開發領域中有著非常重要的地位
但是它不只能管理程式相關的檔案
只要是需要長期經營、開發的專案
都可以透過版本控制來進行管理

例如：
美術設計、網頁設計師在圖片編輯的過程中
由於圖片可能有多次的改動
所以透過版本控制來管理圖片也是非常合適的

版本控制的主要目標是讓您能夠更好地管理檔案的變化。
它將專案開發過程中的每一次的修改都記錄了下來。

以下是版本控制的好處：

1. 歷史追蹤： 
版本控制允許您查看檔案的每一次變化
其中包括誰進行了修改、何時進行了修改
以及具體的修改內容。

2. 回溯功能： 
如果您遇到錯誤，或者您需要回到以前的版本時
版本控制可以讓您輕鬆地回到先前的狀態
並且您正在開發的內容不會被影響

3. 分支管理： 
版本控制允許您創建分支來進行開發，
這使得不同功能的開發可以同時進行，且不會互相干擾

以上版本控制的好處
在後面的關卡中都會進行更詳細的解說與實際操作

=====

在了解了什麼是版本控制之後，
讓我們更進一步的了解什麼是 Git 吧！

Git 是一個非常強大的版本控制工具，
開發者將版本控制的概念引入到了 Git 中

使用者需要透過在命令行 (Command Line) 
輸入 Git 指令的方式來操作版本控制的相關功能

Git 對於軟體開發領域來說是非常受歡迎的工具
以下我將告訴您使用 Git 所帶來的一些好處：

1. 團隊協作：
Git 可以讓團隊成員同時進行專案開發
成員間的的工作並不會受到影響
同時也能夠輕鬆地將彼此的檔案合併在一起

2. 分支策略： 
繼承了版本控制的分支管理功能
Git 的分支功能讓專案的發展過程更加流暢
創建的分支可以各自專注於不同的目標
當完成了功能需求後在合併到主要分支中
提升專案的穩定度

3. 版本追蹤：
每一次的檔案提交都會轉成一份記錄並放入 Git 中
這代表著您可以清楚地看到每一次記錄的內容

4. 容易學習： 
即使您不是程式開發人員或從未接觸過程式
Git 的概念相對簡單的
透過較為簡單的命令可以讓您快速的上手

而對於第4點容易學習的內容
本遊戲將會把 Git 指令更加精簡化
我們將注重在幾個非常實用的指令上
並去除掉幾個相對不重要的指令

讓您可以更快上手 Git 指令，
並集中學習最常用的指令

==================

總結下來
版本控制大幅提升了我們在開發專案的效率
也讓專案的管理更加的有系統

歷史與版本追蹤功能讓我們更清楚版本之間的差異

回溯功能讓我們更容易的回到先前的歷史記錄

分支系統讓系統的開發變得更加穩定
並提升開發效率

最後版本控制支持團隊協作
讓團隊成員可以獨自開發功能
完成功能後將功能整合到共同的專案中


=======

在講解了什麼是版本控制與 Git 後
在本關卡的後半部分
我們要進行一個小測驗
 
讓我們來模擬一個背景故事

您將扮演選修了 "版本控制" 課程的學生
並透過剛才學習到的知識來進行題目的作答

在開始作答之前
您可以透過對話視窗或者是遊戲手冊再次複習先前的知識

問答系統已經新增到這台電腦當中了
當您準備好要作答時就點選問答系統吧！

請加油吧！





在理解完了版本控制與 Git 的好處後

在下一關的關卡中
我們將正式學習 Git 指令
並透過輸入指令來操作 Git
